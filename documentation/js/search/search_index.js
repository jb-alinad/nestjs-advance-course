var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Address.html",[0,0.111,1,4.141]],["body/classes/Address.html",[0,0.181,1,6.991,2,1.962,3,0.027,4,0.032,5,0.051,6,3.951,7,4.063,8,0.15,9,1.132,10,2.557,11,6.387,12,6.387,13,0.406,14,0.005,15,0.848,16,1.46,17,4.491,18,4.659,19,6.05,20,0.33,21,4.91,22,2.392,23,4.91,24,0.447,25,2.643,26,3.634,27,5.588,28,3.634,29,4.165,30,5.588,31,3.634,32,1.899,33,2.346,34,1.693,35,3.634,36,2.643,37,0.051,38,2.777,39,3.542,40,2.658,41,5.588,42,4.54,43,3.611,44,0.431,45,3.812,46,3.812,47,4.063,48,2.643,49,0.669,50,3.611,51,1.568,52,0.003,53,0.003]],["title/controllers/AppController.html",[54,1.138,55,2.494]],["body/controllers/AppController.html",[0,0.139,3,0.037,4,0.044,5,0.044,8,0.205,10,1.771,14,0.005,15,0.803,16,1.445,20,0.326,24,0.478,37,0.044,52,0.004,53,0.004,54,1.762,55,3.863,56,1.982,57,0.142,58,3.863,59,6.682,60,1.109,61,5.481,62,6.682,63,0.884,64,0.81,65,4.481,66,5.188,67,2.63,68,1.167,69,5.987]],["title/controllers/AppController-1.html",[54,0.965,55,2.115,70,1.466]],["body/controllers/AppController-1.html",[0,0.139,3,0.037,4,0.044,5,0.044,8,0.205,10,1.771,14,0.005,15,0.803,16,1.445,20,0.326,24,0.478,37,0.044,52,0.004,53,0.004,54,1.762,55,3.863,56,1.982,57,0.142,60,1.109,61,5.481,63,0.884,64,0.81,65,4.481,66,5.188,67,2.63,68,1.167,69,5.987,71,3.863,72,6.682,73,6.682]],["title/controllers/AppController-2.html",[54,0.965,55,2.115,74,1.914]],["body/controllers/AppController-2.html",[0,0.122,3,0.033,4,0.039,5,0.039,8,0.181,10,1.563,14,0.005,15,0.574,16,1.275,20,0.373,24,0.518,37,0.039,52,0.004,53,0.004,54,1.628,55,3.569,56,1.749,57,0.145,60,1.024,61,5.237,63,1.01,64,0.714,65,2.948,66,4.578,68,1.03,75,5.935,76,5.688,77,5.284,78,2.151,79,8.015,80,5.284,81,5.284,82,3.352,83,6.837,84,4.578,85,2.133,86,5.284,87,5.284,88,1.775,89,3.681,90,1.855,91,5.284,92,5.284,93,1.479,94,5.284,95,4.936,96,3.681,97,5.284]],["title/controllers/AppController-3.html",[54,0.965,55,2.115,98,2.373]],["body/controllers/AppController-3.html",[0,0.133,3,0.036,4,0.042,5,0.042,8,0.197,13,0.314,14,0.005,16,1.392,20,0.314,24,0.467,37,0.042,44,0.565,52,0.004,53,0.004,54,1.721,55,3.773,56,1.909,57,0.138,60,1.083,63,0.851,64,0.78,75,5.659,78,2.24,84,4.995,99,5.933,100,5.765,101,7.228,102,7.228,103,7.895,104,7.228,105,5.765,106,1.008,107,0.791,108,2.724,109,5.765,110,1.319,111,5.765]],["title/controllers/AppController-4.html",[54,0.965,55,2.115,112,2.926]],["body/controllers/AppController-4.html",[0,0.122,3,0.033,4,0.039,5,0.039,8,0.181,10,1.563,14,0.005,15,0.574,16,1.275,20,0.373,24,0.518,37,0.039,52,0.004,53,0.004,54,1.628,55,3.569,56,1.749,57,0.145,60,1.024,61,5.237,63,1.01,64,0.714,65,2.948,66,4.578,68,1.03,76,5.688,77,5.284,78,2.151,79,8.015,80,5.284,81,5.284,82,3.352,83,6.837,84,4.578,85,2.133,86,5.284,87,5.284,88,1.775,89,3.681,90,1.855,91,5.284,92,5.284,93,1.479,94,5.284,95,4.936,96,3.681,97,5.284,113,5.935]],["title/controllers/AppController-5.html",[54,0.965,55,2.115,114,3.041]],["body/controllers/AppController-5.html",[0,0.133,3,0.036,4,0.042,5,0.042,8,0.197,13,0.314,14,0.005,16,1.392,20,0.314,24,0.467,37,0.042,44,0.565,52,0.004,53,0.004,54,1.721,55,3.773,56,1.909,57,0.138,60,1.083,63,0.851,64,0.78,78,2.24,84,4.995,99,5.933,100,5.765,101,7.228,102,7.228,103,7.895,104,7.228,105,5.765,106,1.008,107,0.791,108,2.724,109,5.765,110,1.319,111,5.765,113,5.659]],["title/controllers/AppController-6.html",[54,0.965,55,2.115,115,4.052]],["body/controllers/AppController-6.html",[0,0.128,3,0.034,4,0.041,5,0.041,8,0.189,14,0.005,15,0.886,16,1.701,20,0.384,24,0.358,37,0.041,49,1.309,52,0.004,53,0.004,54,1.32,55,3.679,56,1.835,57,0.149,60,1.056,63,1.041,64,0.749,68,1.374,116,4.429,117,5.541,118,2.434,119,3.328,120,8.159,121,8.159,122,5.541,123,7.049,124,5.541,125,3.418,126,4.158,127,4.548,128,7.049,129,6.107,130,5.541]],["title/controllers/AppController-7.html",[54,0.965,55,2.115,131,4.052]],["body/controllers/AppController-7.html",[0,0.127,3,0.034,4,0.04,5,0.04,8,0.188,14,0.005,15,0.883,16,1.691,20,0.382,24,0.355,37,0.04,49,1.305,52,0.004,53,0.004,54,1.307,55,3.657,56,1.817,57,0.148,60,1.049,63,1.034,64,0.742,68,1.365,117,5.488,118,2.411,119,3.296,120,8.13,121,8.13,122,5.488,123,7.005,124,5.488,125,3.385,126,4.118,127,4.505,128,7.005,129,6.07,130,5.488,132,4.208,133,3.945]],["title/controllers/AppController-8.html",[54,0.965,55,2.115,134,4.052]],["body/controllers/AppController-8.html",[0,0.139,3,0.037,4,0.044,5,0.044,8,0.205,14,0.005,15,0.652,16,1.45,20,0.327,24,0.388,37,0.044,52,0.004,53,0.004,54,1.431,55,3.871,56,1.989,57,0.142,60,1.111,63,0.887,64,0.812,68,1.171,118,2.64,119,3.609,125,3.707,127,4.932,129,5.206,135,6.706,136,8.399,137,7.416,138,6.706,139,4.138,140,4.704]],["title/controllers/AppController-9.html",[54,0.965,55,2.115,141,4.052]],["body/controllers/AppController-9.html",[0,0.129,3,0.035,4,0.041,5,0.041,6,4.442,8,0.191,14,0.005,15,0.768,16,1.708,20,0.386,24,0.36,37,0.041,52,0.004,53,0.004,54,1.328,55,3.695,56,1.846,60,1.06,61,5.343,63,1.045,64,0.754,68,1.38,118,2.45,127,5.81,136,8.178,137,7.078,139,4.563,142,6.224,143,3.759,144,6.224,145,7.899,146,6.224,147,6.224]],["title/modules/AppModule.html",[148,2.216,149,4.141]],["body/modules/AppModule.html",[0,0.12,3,0.032,4,0.038,5,0.038,14,0.005,24,0.556,37,0.038,38,1.737,52,0.004,53,0.004,56,1.712,57,0.099,58,2.7,64,0.699,82,3.281,148,3.126,149,7.566,150,2.955,151,4.405,152,5.172,153,5.172,154,6.104,155,6.619,156,4.405,157,3.379,158,3.379,159,5.772,160,4.901,161,5.172,162,3.948,163,4.481,164,6.743,165,3.881,166,4.481,167,3.107,168,5.772,169,3.734,170,6.227,171,5.772,172,5.772,173,5.772,174,5.172,175,5.772,176,3.19]],["title/injectables/AppService.html",[65,2.666,177,0.695]],["body/injectables/AppService.html",[0,0.144,3,0.039,4,0.046,5,0.046,8,0.213,14,0.005,15,0.823,20,0.339,24,0.402,37,0.046,52,0.004,53,0.004,57,0.145,58,3.957,60,1.136,61,5.556,63,0.92,64,0.842,65,4.229,68,1.214,95,4.496,96,4.339,177,1.103,178,1.947,179,6.95,180,6.95]],["title/injectables/AppService-1.html",[65,2.261,70,1.466,177,0.59]],["body/injectables/AppService-1.html",[0,0.144,3,0.039,4,0.046,5,0.046,8,0.213,14,0.005,15,0.823,20,0.339,24,0.402,37,0.046,52,0.004,53,0.004,57,0.145,60,1.136,61,5.556,63,0.92,64,0.842,65,4.229,68,1.214,71,3.957,95,4.496,96,4.339,177,1.103,178,1.947,181,6.95,182,6.95]],["title/injectables/AppService-2.html",[65,2.261,74,1.914,177,0.59]],["body/injectables/AppService-2.html",[0,0.143,3,0.038,4,0.045,5,0.045,8,0.211,14,0.005,15,0.819,20,0.337,24,0.399,37,0.045,52,0.004,53,0.004,57,0.145,60,1.131,61,5.542,63,0.913,64,0.836,65,4.211,68,1.205,75,5.909,76,5.663,95,4.464,96,4.307,177,1.098,178,1.933,183,6.182,184,6.182]],["title/injectables/AppService-3.html",[65,2.261,98,2.373,177,0.59]],["body/injectables/AppService-3.html",[0,0.143,3,0.038,4,0.045,5,0.045,8,0.211,14,0.005,15,0.819,20,0.337,24,0.399,37,0.045,52,0.004,53,0.004,57,0.145,60,1.131,61,5.542,63,0.913,64,0.836,65,4.211,68,1.205,75,5.909,95,4.464,96,4.307,99,6.195,177,1.098,178,1.933,185,6.182,186,6.182]],["title/injectables/AppService-4.html",[65,2.261,112,2.926,177,0.59]],["body/injectables/AppService-4.html",[0,0.143,3,0.038,4,0.045,5,0.045,8,0.211,14,0.005,15,0.819,20,0.337,24,0.399,37,0.045,52,0.004,53,0.004,57,0.145,60,1.131,61,5.542,63,0.913,64,0.836,65,4.211,68,1.205,76,5.663,95,4.464,96,4.307,113,5.909,177,1.098,178,1.933,183,6.182,184,6.182]],["title/injectables/AppService-5.html",[65,2.261,114,3.041,177,0.59]],["body/injectables/AppService-5.html",[0,0.143,3,0.038,4,0.045,5,0.045,8,0.211,14,0.005,15,0.819,20,0.337,24,0.399,37,0.045,52,0.004,53,0.004,57,0.145,60,1.131,61,5.542,63,0.913,64,0.836,65,4.211,68,1.205,95,4.464,96,4.307,99,6.195,113,5.909,177,1.098,178,1.933,185,6.182,186,6.182]],["title/controllers/AuthController.html",[54,1.138,187,3.586]],["body/controllers/AuthController.html",[0,0.096,3,0.026,4,0.031,5,0.031,8,0.142,13,0.227,14,0.005,16,1.005,20,0.227,24,0.495,34,1.602,37,0.031,38,1.399,44,0.408,49,1.021,52,0.003,53,0.003,54,0.992,56,1.379,57,0.112,60,0.872,63,0.615,64,0.563,67,1.829,68,0.812,78,1.906,85,2.351,90,1.462,93,1.63,106,0.728,107,0.571,116,3.327,118,1.829,119,2.501,125,2.569,139,3.249,187,4.37,188,4.164,189,5.046,190,4.164,191,2.9,192,4.164,193,4.164,194,4.164,195,2.901,196,4.164,197,3.582,198,2.514,199,3.26,200,1.967,201,3.125,202,4.78,203,3.608,204,4.78,205,2.438,206,5.378,207,2.221,208,3.925,209,3.418,210,3.418,211,3.418,212,4.164,213,2.901,214,4.164,215,2.641,216,4.164,217,5.04,218,4.679,219,4.37,220,4.164,221,4.164,222,2.756,223,3.845,224,4.164,225,4.164,226,4.164,227,3.845,228,3.845,229,4.164,230,1.653,231,5.046,232,3.418,233,2.39,234,4.164,235,2.27,236,4.78,237,1.565,238,5.378,239,3.925,240,4.164,241,4.164,242,2.085,243,3.845]],["title/controllers/AuthController-1.html",[54,0.965,70,1.466,187,3.041]],["body/controllers/AuthController-1.html",[0,0.097,3,0.026,4,0.031,5,0.031,8,0.143,13,0.227,14,0.005,16,1.007,20,0.227,24,0.495,34,1.606,37,0.031,38,1.402,44,0.409,49,1.022,52,0.003,53,0.003,54,0.994,56,1.382,57,0.112,60,0.874,63,0.616,64,0.564,67,1.834,68,0.814,78,1.908,85,2.355,90,1.465,93,1.633,106,0.73,107,0.573,118,1.834,119,2.507,125,2.575,132,3.181,133,2.982,139,3.255,187,4.378,188,4.174,189,5.055,190,4.174,191,2.902,192,4.174,193,4.174,194,4.174,195,2.908,196,4.174,197,3.587,198,2.518,199,3.268,200,1.972,201,3.132,202,4.789,203,3.617,204,4.789,205,2.444,206,5.388,207,2.226,208,3.932,209,3.426,210,3.426,211,3.426,212,4.174,213,2.908,214,4.174,215,2.648,216,4.174,217,5.046,218,4.685,219,4.378,220,4.174,221,4.174,222,2.76,223,3.855,224,4.174,225,4.174,226,4.174,227,3.855,228,3.855,229,4.174,230,1.655,231,5.055,232,3.426,233,2.394,234,4.174,235,2.276,236,4.789,237,1.122,239,2.813,240,4.174,241,4.174,242,2.09,243,3.855,244,4.658]],["title/controllers/AuthController-2.html",[54,0.965,74,1.914,187,3.041]],["body/controllers/AuthController-2.html",[0,0.112,3,0.03,4,0.036,5,0.036,8,0.166,13,0.264,14,0.005,16,1.56,20,0.352,24,0.522,37,0.036,44,0.634,52,0.004,53,0.004,54,1.155,56,1.605,57,0.139,60,0.968,63,0.954,64,0.656,67,2.13,68,1.26,71,3.794,78,2.356,90,2.269,106,1.13,107,0.887,118,2.13,133,2.479,187,4.849,191,1.837,197,3.447,215,4.611,245,5.412,246,5.968,247,4.355,248,5.412,249,5.412,250,5.412,251,2.303,252,5.412,253,5.817,254,5.412,255,5.412,256,2.269,257,2.839,258,1.605,259,3.639,260,4.849,261,3.98,262,4.478,263,5.412,264,4.478,265,5.412,266,5.412,267,5.412,268,5.412,269,5.412,270,5.412,271,5.412,272,4.478,273,5.412,274,5.412]],["title/injectables/AuthMiddleware.html",[177,0.695,275,3.122]],["body/injectables/AuthMiddleware.html",[0,0.106,3,0.028,4,0.034,5,0.034,8,0.157,13,0.339,14,0.005,20,0.339,24,0.49,37,0.034,40,3.33,44,0.61,49,1.074,52,0.003,53,0.003,57,0.135,60,0.933,63,0.678,64,0.62,67,2.016,78,2.006,85,2.514,93,1.743,106,1.089,107,0.855,110,1.05,177,0.906,178,1.435,191,2.871,197,2.447,200,2.168,207,2.447,213,4.338,215,4.808,230,1.302,233,2.556,275,4.068,276,3.403,277,3.403,278,5.121,279,3.474,280,4.589,281,5.121,282,6.227,283,4.338,284,7.888,285,4.33,286,6.222,287,5.121,288,3.767,289,2.831,290,4.338,291,3.339,292,3.767,293,5.121,294,5.121,295,5.121,296,1.794,297,5.111,298,3.767,299,3.767,300,3.976,301,5.121,302,5.121,303,4.238,304,3.976]],["title/injectables/AuthMiddleware-1.html",[70,1.466,177,0.59,275,2.648]],["body/injectables/AuthMiddleware-1.html",[0,0.101,3,0.027,4,0.032,5,0.032,8,0.15,10,1.294,13,0.328,14,0.005,20,0.328,24,0.48,37,0.044,40,3.265,44,0.591,49,1.048,52,0.003,53,0.003,57,0.132,60,0.903,63,0.646,64,0.592,67,1.923,78,1.957,85,2.434,90,1.537,93,1.688,106,1.054,107,0.827,110,1.002,132,3.761,133,3.525,177,0.877,178,1.369,191,2.284,197,2.334,200,2.068,207,2.334,208,5.009,209,3.593,213,3.05,230,1.711,233,2.474,235,2.387,256,2.421,275,3.939,279,3.364,283,4.201,285,4.246,286,6.1,288,3.593,289,2.7,290,4.201,291,3.258,292,3.593,296,1.711,297,4.949,298,3.593,299,3.593,300,3.793,303,4.042,304,3.793,305,4.377,306,4.885,307,4.885,308,6.029,309,6.863,310,5.976,311,4.885,312,1.145,313,2.334,314,4.377,315,3.427,316,4.377,317,4.042,318,4.377,319,4.377]],["title/injectables/AuthMiddleware-2.html",[74,1.914,177,0.59,275,2.648]],["body/injectables/AuthMiddleware-2.html",[0,0.116,3,0.031,4,0.037,5,0.037,6,4.224,8,0.172,13,0.274,14,0.005,20,0.36,24,0.478,37,0.037,40,3.452,44,0.492,49,1.124,52,0.004,53,0.004,60,0.991,63,0.741,64,0.679,78,2.098,85,2.027,93,1.405,106,0.878,107,0.689,110,1.692,177,0.962,178,1.57,191,2.977,197,2.677,200,2.371,207,2.677,230,1.425,233,2.06,275,4.32,279,3.689,283,4.607,285,4.49,286,6.451,288,4.121,289,3.097,290,4.607,291,3.124,292,4.121,296,1.962,297,6.07,298,4.121,299,4.121,300,4.35,310,6.407,315,3.93,320,5.603,321,5.603,322,5.603,323,5.603]],["title/injectables/AuthMiddleware-3.html",[98,2.373,177,0.59,275,2.648]],["body/injectables/AuthMiddleware-3.html",[0,0.097,3,0.026,4,0.031,5,0.031,8,0.143,13,0.318,14,0.005,20,0.318,24,0.495,37,0.031,40,3.202,44,0.573,52,0.003,53,0.003,57,0.129,60,0.875,63,0.618,64,0.566,67,1.838,78,1.911,85,2.719,88,1.406,90,1.469,93,1.885,106,1.022,107,0.802,108,2.76,110,0.957,129,3.625,177,0.85,178,1.308,191,2.761,197,2.232,200,1.977,207,2.232,213,5.078,230,1.658,233,2.764,235,2.282,242,2.096,275,3.818,279,3.26,280,4.184,282,7.944,283,4.071,285,4.164,286,5.983,288,3.435,289,2.581,290,4.071,291,3.443,292,3.435,296,1.636,297,6.295,298,3.435,304,5.834,310,5.834,324,4.67,325,3.292,326,4.67,327,4.67,328,3.864,329,4.67,330,4.184,331,6.219,332,4.67,333,4.67,334,4.67,335,4.67,336,4.67,337,2.513]],["title/modules/AuthModule.html",[148,2.216,338,4.141]],["body/modules/AuthModule.html",[0,0.113,3,0.03,4,0.036,5,0.036,14,0.005,24,0.557,37,0.036,52,0.004,53,0.004,56,2.152,57,0.094,64,0.661,71,2.553,148,3.013,150,2.794,151,4.246,155,6.517,156,4.246,157,3.195,158,3.195,160,4.246,161,4.891,176,4.009,187,5.478,215,5.281,261,4.015,262,4.517,338,7.757,339,4.891,340,5.458,341,4.891,342,7.213,343,7.213,344,5.458,345,7.253,346,5.458,347,4.891,348,5.458,349,5.458,350,5.458,351,5.458,352,5.458,353,4.891]],["title/classes/AuthPayload.html",[0,0.111,354,3.741]],["body/classes/AuthPayload.html",[0,0.196,2,1.49,3,0.033,4,0.039,5,0.039,8,0.18,9,1.275,13,0.286,14,0.005,15,0.992,20,0.286,37,0.062,52,0.004,53,0.004,57,0.13,58,3.555,198,3.263,237,2.282,247,4.59,256,1.844,354,5.917,355,4.311,356,5.861,357,4.031,358,3.379,359,5.332,360,6.801,361,4.111,362,4.111,363,4.311,364,3.331,365,4.111]],["title/injectables/AuthService.html",[177,0.695,215,3.032]],["body/injectables/AuthService.html",[0,0.068,3,0.018,4,0.021,5,0.021,8,0.1,10,1.327,13,0.244,14,0.005,15,0.815,20,0.396,24,0.396,37,0.021,39,2.626,40,1.971,44,0.713,49,1.062,52,0.003,53,0.003,57,0.144,60,0.672,63,1.032,64,0.395,68,1.501,71,3.919,78,2.435,88,2.687,90,2.704,106,1.272,107,0.998,110,1.027,177,0.653,178,0.913,213,5.231,215,2.846,230,2.27,237,0.784,246,4.143,251,2.489,256,2.849,347,2.919,357,1.557,358,3.124,366,3.258,367,5.006,368,3.682,369,5.006,370,5.006,371,5.006,372,2.696,373,4.8,374,8.12,375,3.258,376,3.512,377,5.006,378,6.843,379,3.258,380,3.258,381,4.486,382,3.258,383,5.006,384,3.258,385,5.006,386,3.258,387,5.006,388,3.258,389,5.006,390,5.733,391,3.258,392,4.143,393,2.919,394,4.486,395,1.852,396,3.258,397,2.563,398,4.965,399,3.258,400,2.696,401,3.239,402,5.006,403,6.843,404,3.258,405,3.258,406,6.097,407,3.258,408,2.396,409,3.258,410,3.258,411,3.258,412,3.258,413,3.258,414,3.258,415,1.353,416,3.258]],["title/injectables/AuthService-1.html",[70,1.466,177,0.59,215,2.571]],["body/injectables/AuthService-1.html",[0,0.118,3,0.032,4,0.038,5,0.038,8,0.175,9,1.252,10,2.206,13,0.278,14,0.005,15,0.81,20,0.406,24,0.482,37,0.038,38,1.717,44,0.501,49,1.133,52,0.004,53,0.004,57,0.152,60,1.002,63,0.755,64,0.691,68,0.996,88,2.506,93,1.873,106,0.893,107,0.701,110,1.707,167,3.069,177,0.974,178,1.598,200,2.414,213,3.56,215,4.244,276,3.81,277,3.81,291,2.414,325,3.195,417,5.703,418,6.179,419,7.466,420,7.466,421,5.703,422,4.428,423,3.16,424,3.152,425,7.466,426,3.56,427,3.338,428,2.369]],["title/controllers/AuthenticationController.html",[54,1.138,429,4.779]],["body/controllers/AuthenticationController.html",[0,0.102,3,0.027,4,0.032,5,0.032,8,0.15,10,1.301,13,0.33,14,0.005,16,1.669,20,0.377,24,0.447,37,0.032,38,2.032,44,0.593,49,1.298,52,0.003,53,0.003,54,1.048,56,1.457,57,0.143,60,0.906,63,1.021,64,0.595,68,1.348,78,2.424,88,1.478,90,2.124,93,1.232,106,1.058,107,0.83,110,1.007,118,1.933,251,2.464,257,2.576,258,2.29,276,3.586,277,3.586,376,4.737,429,6.05,430,4.91,431,4.91,432,5.588,433,8.312,434,6.752,435,4.91,436,5.189,437,4.91,438,6.05,439,4.91,440,4.91,441,5.589,442,6.752,443,4.91,444,4.368,445,2.874,446,4.078,447,3.953,448,3.611,449,4.91,450,4.91,451,2.965,452,2.791,453,4.91,454,4.91,455,4.91,456,4.91,457,4.91,458,4.91]],["title/controllers/BlogController.html",[54,1.138,459,4.779]],["body/controllers/BlogController.html",[0,0.111,3,0.03,4,0.035,5,0.035,8,0.163,14,0.005,16,1.545,20,0.349,24,0.498,34,1.84,37,0.047,38,2.15,49,1.257,52,0.004,53,0.004,54,1.139,56,1.583,57,0.138,60,0.959,63,0.945,64,0.646,68,1.248,78,2.347,110,1.094,118,2.1,119,2.872,125,2.949,132,3.936,133,3.689,197,2.55,198,3.328,205,2.799,239,3.222,256,2.247,258,1.583,259,3.588,446,3.222,447,4.182,451,3.222,452,3.033,459,6.402,460,4.781,461,7.708,462,7.708,463,5.336,464,5.336,465,5.336,466,5.336,467,3.588,468,4.781,469,3.925,470,4.781,471,4.143,472,4.804,473,4.781,474,4.416,475,4.416,476,5.336,477,7.145,478,5.336]],["title/interfaces/Cat.html",[312,1.25,479,4.141]],["body/interfaces/Cat.html",[3,0.038,4,0.045,5,0.045,6,3.519,8,0.211,9,1.409,13,0.443,14,0.005,15,0.96,22,2.813,37,0.045,44,0.831,45,7.341,46,7.341,52,0.004,53,0.004,312,1.611,479,6.525,480,2.614,481,6.875]],["title/controllers/CatController.html",[54,1.138,482,4.414]],["body/controllers/CatController.html",[0,0.095,3,0.025,4,0.03,5,0.03,6,3.807,8,0.14,10,1.214,13,0.224,14,0.005,16,1.391,20,0.314,24,0.467,34,1.579,37,0.03,38,1.936,43,5.933,44,0.402,50,3.369,52,0.003,53,0.003,54,0.977,56,1.359,60,0.864,63,0.851,64,0.555,67,1.803,68,1.124,78,2.24,93,1.865,106,0.717,107,0.563,108,3.414,118,1.803,127,4.732,191,2.184,200,1.939,202,5.47,203,3.556,204,5.47,205,2.403,223,6.675,251,2.054,257,2.403,258,1.909,325,1.657,368,3.885,445,2.681,446,3.885,447,3.766,451,2.766,452,2.603,479,6.262,482,5.324,483,4.58,484,4.104,485,6.434,486,8.066,487,4.58,488,4.58,489,6.434,490,6.434,491,6.434,492,5.324,493,6.675,494,4.58,495,4.58,496,5.765,497,4.58,498,2.963,499,3.556,500,3.79,501,3.369,502,6.664,503,7.437,504,4.58,505,4.732,506,4.104,507,4.58,508,4.58,509,6.434,510,2.863,511,6.434,512,5.765,513,4.58,514,4.58,515,4.58]],["title/entities/Category.html",[516,2.549,517,4.414]],["body/entities/Category.html",[0,0.14,3,0.027,4,0.032,5,0.032,8,0.15,9,1.132,13,0.425,14,0.005,15,0.657,16,1.885,20,0.425,22,2.093,24,0.505,32,1.899,37,0.032,49,1.363,51,2.464,52,0.003,53,0.003,57,0.155,256,2.124,258,2.862,276,3.885,277,3.885,423,2.078,428,2.04,516,3.227,517,7.452,518,2.455,519,4.91,520,4.661,521,4.661,522,3.812,523,4.91,524,5.189,525,3.065,526,4.91,527,4.818,528,4.91,529,4.4,530,6.752,531,4.91,532,3.065,533,4.91,534,3.542,535,4.866,536,4.215,537,3.812,538,3.812,539,6.05,540,4.215,541,4.737]],["title/modules/CatsModule.html",[148,2.216,542,4.141]],["body/modules/CatsModule.html",[0,0.12,3,0.032,4,0.038,5,0.038,6,3.867,13,0.283,14,0.005,20,0.283,24,0.515,37,0.038,44,0.51,49,1.029,52,0.004,53,0.004,56,2.241,60,0.779,63,0.768,64,0.704,106,0.91,107,0.714,119,3.125,148,3.139,150,2.973,151,4.423,156,4.423,157,3.399,158,3.399,176,4.176,275,3.399,296,2.034,482,6.949,505,6.952,506,5.203,542,7.338,543,5.203,544,5.203,545,5.807,546,4.806,547,6.252,548,6.905,549,5.807,550,4.806,551,2.413,552,5.866,553,4.806,554,5.807,555,5.807,556,5.807,557,5.807,558,5.203,559,4.806,560,5.203]],["title/injectables/CatsService.html",[177,0.695,505,3.923]],["body/injectables/CatsService.html",[0,0.123,3,0.033,4,0.039,5,0.039,6,4.585,8,0.181,9,1.282,10,2.245,13,0.373,14,0.005,20,0.414,24,0.443,37,0.039,44,0.52,52,0.004,53,0.004,60,1.026,63,1.012,64,0.717,68,1.033,88,2.55,106,0.927,107,0.727,177,0.997,178,1.657,368,4.617,423,2.504,424,3.27,479,7.685,484,7.591,505,5.624,551,2.458,561,5.915,562,7.411,563,7.646,564,5.915,565,5.915,566,5.915,567,5.915,568,5.915,569,5.915]],["title/entities/Comment.html",[516,2.549,541,3.741]],["body/entities/Comment.html",[0,0.13,3,0.025,4,0.029,5,0.029,8,0.136,9,1.054,13,0.426,14,0.005,15,0.611,16,1.885,20,0.426,22,1.948,24,0.46,32,1.714,37,0.029,38,2.392,49,1.363,51,2.332,52,0.003,53,0.003,57,0.154,256,2.972,258,2.803,276,3.868,277,3.868,423,1.876,428,1.841,516,3.004,518,2.215,520,4.411,521,4.411,522,3.44,524,4.962,525,2.766,527,4.56,532,2.766,534,3.297,535,4.653,536,3.924,537,5.671,540,3.924,541,5.124,570,4.431,571,3.832,572,4.431,573,4.431,574,5.201,575,6.285,576,6.577,577,6.577,578,6.577,579,4.431,580,4.431,581,4.431,582,6.285,583,4.431]],["title/classes/Company.html",[0,0.111,140,3.741]],["body/classes/Company.html",[0,0.114,2,1.404,3,0.031,4,0.036,5,0.036,8,0.169,9,1.226,13,0.455,14,0.005,15,0.939,16,1.962,20,0.443,22,2.265,24,0.423,37,0.054,44,0.72,52,0.004,53,0.004,57,0.16,140,5.748,217,4.914,230,1.404,584,4.947,585,7.341,586,8.193,587,7.341,588,7.341,589,9.942,590,5.521,591,5.521,592,5.521,593,5.521,594,5.521,595,5.521,596,4.061,597,6.549,598,4.287,599,4.947,600,4.947,601,5.521]],["title/controllers/CompanyController.html",[54,1.138,602,4.414]],["body/controllers/CompanyController.html",[0,0.061,3,0.016,4,0.019,5,0.019,8,0.09,13,0.225,14,0.005,16,1.52,20,0.343,24,0.468,34,1.009,37,0.03,38,1.387,44,0.617,52,0.002,53,0.002,54,0.625,56,0.869,57,0.128,60,0.618,63,0.93,64,0.355,67,1.152,68,1.227,78,2.33,85,2.542,90,2.21,93,1.429,106,1.1,107,0.864,108,2.974,118,1.152,140,6.895,197,3.357,200,1.239,202,5.488,204,5.488,230,1.786,238,6.885,239,1.768,251,2.243,257,2.989,258,1.367,259,1.968,445,1.714,446,1.768,447,2.697,451,1.768,452,1.664,467,1.968,469,2.153,471,2.273,472,3.098,474,2.423,475,2.423,492,4.714,493,7.185,496,6.295,498,1.894,499,2.273,500,2.423,502,4.128,510,2.691,512,6.295,602,3.813,603,2.623,604,2.623,605,4.607,606,4.128,607,4.607,608,4.128,609,4.128,610,2.928,611,2.928,612,6.295,613,6.46,614,8.516,615,2.928,616,5.421,617,2.928,618,6.741,619,2.928,620,2.928,621,2.928,622,2.928,623,2.928,624,2.928,625,4.607,626,4.607,627,3.232,628,2.928,629,2.928,630,2.928,631,2.928,632,2.928,633,5.104,634,2.928,635,2.928,636,2.928,637,2.928,638,5.346,639,2.928,640,4.19,641,2.623,642,2.928,643,2.623,644,2.928,645,2.928,646,5.789,647,2.928,648,2.928,649,7.026,650,2.928,651,2.928,652,5.697,653,2.928,654,2.928,655,2.928,656,2.928,657,2.928,658,2.928,659,2.928,660,2.928,661,2.928,662,2.928]],["title/classes/CompanyDTO.html",[0,0.111,618,4.141]],["body/classes/CompanyDTO.html",[0,0.136,2,1.67,3,0.037,4,0.043,5,0.043,8,0.201,9,1.37,13,0.454,14,0.005,15,0.973,20,0.454,37,0.043,44,0.781,52,0.004,53,0.004,57,0.164,585,7.969,587,7.969,588,7.969,618,6.343,663,6.567,664,6.567,665,6.567,666,6.567,667,6.567]],["title/modules/CompanyModule.html",[148,2.216,668,4.141]],["body/modules/CompanyModule.html",[0,0.103,3,0.028,4,0.033,5,0.033,13,0.333,14,0.005,20,0.243,24,0.546,37,0.033,44,0.598,49,0.928,52,0.003,53,0.003,56,2.021,57,0.117,60,0.668,63,0.658,64,0.603,106,0.779,107,0.612,140,4.779,148,2.83,150,2.546,151,3.988,156,3.988,157,2.912,158,2.912,160,3.988,176,3.766,217,3.345,275,2.912,296,1.742,546,4.116,547,5.638,548,6.488,550,5.638,551,2.067,552,5.289,553,4.116,558,4.457,559,4.116,560,4.457,596,3.659,600,6.104,602,6.43,604,4.457,640,6.65,641,4.457,668,7.51,669,4.457,670,4.974,671,4.457,672,6.439,673,6.65,674,4.974,675,4.974,676,6.104,677,4.974,678,4.974,679,4.974,680,4.974,681,4.457,682,4.974,683,4.974,684,3.218,685,4.974]],["title/injectables/CompanyService.html",[177,0.695,640,3.923]],["body/injectables/CompanyService.html",[0,0.08,3,0.022,4,0.026,5,0.026,8,0.119,10,1.028,13,0.407,14,0.005,15,0.915,20,0.42,24,0.461,37,0.026,38,1.168,44,0.732,52,0.003,53,0.003,57,0.152,60,0.767,63,1.102,64,0.47,68,1.504,78,2.5,88,1.168,90,2.709,93,1.432,106,1.305,107,1.024,110,0.796,140,5.844,177,0.745,178,1.087,198,3.64,230,1.452,238,6.184,596,2.854,598,3.013,606,5.117,608,5.117,609,5.117,618,5.802,633,6.072,640,4.201,643,3.477,681,3.477,686,3.881,687,5.711,688,7.473,689,5.711,690,3.881,691,5.802,692,3.881,693,5.711,694,5.711,695,3.881,696,5.711,697,3.881,698,3.881,699,5.711,700,3.881,701,5.711,702,3.881,703,5.711,704,3.881,705,3.881,706,3.477,707,3.881,708,3.881,709,3.881,710,3.881,711,3.881,712,5.711,713,3.881,714,1.94,715,5.711,716,3.881,717,3.881,718,3.881,719,3.881,720,2.272,721,3.881,722,3.881,723,3.881,724,3.881]],["title/interfaces/ConfigData.html",[312,1.25,725,3.122]],["body/interfaces/ConfigData.html",[3,0.04,4,0.036,5,0.036,8,0.167,9,1.216,13,0.441,14,0.005,15,0.965,22,2.879,37,0.048,44,0.637,52,0.004,53,0.004,57,0.094,107,0.892,116,2.794,218,4.528,222,2.007,279,3.626,312,1.7,480,2.076,725,4.246,726,4.238,727,5.419,728,4.798,729,6.385,730,5.389,731,6.74,732,4.246,733,3.626,734,4.528,735,3.713,736,4.877,737,5.335,738,5.616,739,2.608,740,3.67,741,3.195,742,3.829,743,4.238,744,3.829,745,3.407,746,3.407]],["title/interfaces/ConfigData-1.html",[70,1.466,312,1.06,725,2.648]],["body/interfaces/ConfigData-1.html",[3,0.042,4,0.038,5,0.038,8,0.176,9,1.257,13,0.408,14,0.005,15,0.947,22,2.92,37,0.049,44,0.658,52,0.004,53,0.004,57,0.099,107,0.922,132,2.803,133,2.628,218,4.679,222,2.11,279,3.747,312,1.757,480,2.182,725,4.388,726,4.454,727,5.526,728,4.893,730,5.455,732,4.388,733,3.747,734,4.679,735,3.837,736,5.04,737,5.513,738,3.712,739,2.742,740,3.858,741,3.359,742,4.025,743,4.454,744,4.025,745,3.582,746,3.582]],["title/interfaces/ConfigData-2.html",[74,1.914,312,1.06,725,2.648]],["body/interfaces/ConfigData-2.html",[3,0.041,4,0.037,5,0.037,8,0.174,9,1.247,13,0.447,14,0.005,15,0.977,22,2.836,37,0.037,52,0.004,53,0.004,57,0.097,107,0.915,108,2.4,218,3.539,222,2.085,279,3.718,312,1.329,480,2.156,510,1.757,627,5.217,725,4.354,727,5.501,728,4.87,729,6.481,730,5.337,733,3.718,734,4.643,735,3.807,736,5.001,737,5.47,745,3.539,746,3.539,747,5.669,748,2.156,749,4.401,750,7.895,751,3.478,752,5.47]],["title/modules/ConfigModule.html",[148,2.216,154,3.45]],["body/modules/ConfigModule.html",[0,0.135,3,0.036,4,0.043,5,0.043,14,0.005,24,0.513,37,0.043,52,0.004,53,0.004,56,1.935,57,0.112,64,0.79,68,1.139,93,1.636,116,3.339,148,3.38,150,3.339,154,5.263,160,3.818,162,4.651,176,3.605,230,2.068,684,4.219,753,6.522,754,8.135,755,6.522,756,8.866,757,6.522,758,4.797,759,6.522,760,5.079,761,6.522]],["title/injectables/ConfigService.html",[162,2.798,177,0.695]],["body/injectables/ConfigService.html",[0,0.084,3,0.022,4,0.027,5,0.027,8,0.123,9,0.984,10,1.555,13,0.371,14,0.005,20,0.412,24,0.401,37,0.027,44,0.608,49,1.149,52,0.003,53,0.003,57,0.15,60,0.788,63,1.07,64,0.488,68,1.209,88,2.741,106,1.085,107,0.851,108,3.22,110,0.826,116,4.46,162,3.079,177,0.765,178,1.129,415,2.438,510,1.249,551,1.674,725,5.227,727,4.322,728,2.227,729,2.963,730,3.336,731,3.128,732,3.436,738,4.479,739,1.925,740,2.709,748,2.232,760,5.684,762,3.61,763,4.117,764,3.946,765,3.946,766,4.557,767,5.869,768,6.816,769,4.857,770,4.857,771,5.259,772,4.028,773,5.259,774,5.259,775,5.259,776,5.869,777,6.985,778,4.028,779,3.61,780,4.857,781,3.946,782,4.857,783,3.61,784,4.857,785,3.334,786,3.334,787,5.73,788,3.334,789,3.61,790,3.334,791,3.334,792,3.334,793,3.334,794,3.61,795,3.61,796,3.334,797,3.334,798,5.869,799,4.028,800,4.028,801,4.028,802,4.028]],["title/injectables/ConfigService-1.html",[70,1.466,162,2.373,177,0.59]],["body/injectables/ConfigService-1.html",[0,0.091,3,0.024,4,0.029,5,0.029,8,0.135,9,1.049,10,1.657,13,0.355,14,0.005,20,0.409,24,0.421,37,0.029,44,0.549,49,1.184,52,0.003,53,0.003,57,0.149,60,0.839,63,1.048,64,0.533,68,1.092,88,2.618,106,0.98,107,0.769,108,3.354,110,0.902,132,4.249,133,3.983,162,3.281,177,0.816,178,1.233,415,1.828,510,1.364,551,1.828,725,5.352,727,3.904,728,2.432,730,2.501,732,3.661,738,2.847,748,2.378,760,5.807,762,3.943,763,4.387,764,4.205,765,4.205,766,4.856,768,7.099,769,5.176,770,5.176,771,5.604,773,5.604,774,5.604,775,5.604,777,6.021,779,3.943,780,5.176,781,4.205,782,5.176,783,3.943,784,5.176,785,3.641,786,3.641,787,6.021,788,3.641,789,3.943,790,3.641,791,3.641,792,3.641,793,3.641,796,3.641,797,3.641,803,4.4]],["title/injectables/ConfigService-2.html",[74,1.914,162,2.373,177,0.59]],["body/injectables/ConfigService-2.html",[0,0.096,3,0.026,4,0.031,5,0.031,8,0.142,9,1.088,10,1.719,13,0.365,14,0.005,20,0.417,24,0.433,37,0.031,44,0.57,49,1.204,52,0.003,53,0.003,57,0.152,60,0.871,63,0.99,64,0.562,68,1.133,88,2.662,106,1.016,107,0.798,108,2.746,110,0.951,162,3.404,177,0.846,178,1.299,415,1.926,510,1.437,551,1.926,725,5.424,727,4.05,728,2.562,729,3.41,730,2.635,732,3.798,748,2.467,750,4.154,760,5.328,763,4.552,764,4.363,765,4.363,766,5.037,769,5.369,770,5.369,777,6.194,780,5.369,781,4.363,782,5.369,784,5.369,785,3.836,786,3.836,787,6.194,788,3.836,790,3.836,791,3.836,792,3.836,793,3.836,794,4.154,795,4.154,796,3.836,797,3.836,804,4.636,805,8.109,806,6.488,807,4.636,808,4.636,809,4.636,810,4.636,811,4.636,812,4.636]],["title/interfaces/Contact.html",[312,1.25,813,2.798]],["body/interfaces/Contact.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.341,13,0.428,14,0.005,15,0.997,37,0.053,44,0.808,52,0.004,53,0.004,57,0.109,143,3.834,237,2.214,312,1.875,480,2.414,510,2.479,748,2.414,813,4.823,814,1.636,815,5.688,816,3.963,817,3.834,818,3.963,819,3.963,820,3.438,821,2.793,822,2.189,823,3.417,824,2.224]],["title/interfaces/Contact-1.html",[70,1.466,312,1.06,813,2.373]],["body/interfaces/Contact-1.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.339,13,0.427,14,0.005,15,0.997,37,0.053,44,0.807,52,0.004,53,0.004,57,0.109,143,3.821,237,2.211,312,1.871,480,2.406,510,2.474,748,2.406,813,4.817,816,3.95,817,3.821,818,3.95,819,3.95,820,3.433,821,2.784,822,2.182,823,3.405,824,2.216,825,3.597,826,3.597,827,5.67]],["title/interfaces/Contact-2.html",[74,1.914,312,1.06,813,2.373]],["body/interfaces/Contact-2.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.341,13,0.428,14,0.005,15,0.997,37,0.053,44,0.808,52,0.004,53,0.004,57,0.109,143,3.834,237,2.214,312,1.875,480,2.414,510,2.479,748,2.414,813,4.823,814,1.636,816,3.963,817,3.834,818,3.963,819,3.963,820,3.438,821,2.793,822,2.189,823,3.417,824,2.224,828,5.688]],["title/interfaces/Contact-3.html",[98,2.373,312,1.06,813,2.373]],["body/interfaces/Contact-3.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.339,13,0.427,14,0.005,15,0.997,37,0.053,44,0.807,52,0.004,53,0.004,57,0.109,143,3.821,237,2.211,276,2.73,277,2.73,312,1.871,480,2.406,510,2.474,748,2.406,813,4.817,816,3.95,817,3.821,818,3.95,819,3.95,820,3.433,821,2.784,822,2.182,823,3.405,824,2.216,829,5.67]],["title/interfaces/Contact-4.html",[112,2.926,312,1.06,813,2.373]],["body/interfaces/Contact-4.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.339,13,0.427,14,0.005,15,0.997,37,0.053,44,0.807,52,0.004,53,0.004,57,0.109,143,3.821,237,2.211,312,1.871,480,2.406,510,2.474,748,2.406,813,4.817,814,1.631,816,3.95,817,3.821,818,3.95,819,3.95,820,3.433,821,2.784,822,2.182,823,3.405,824,2.216,830,3.092,831,5.67]],["title/classes/CreateCatDto.html",[0,0.111,43,3.923]],["body/classes/CreateCatDto.html",[0,0.175,1,7.258,2,1.871,3,0.025,4,0.03,5,0.049,6,4.319,7,3.719,8,0.138,9,1.065,10,2.564,11,3.719,12,3.719,13,0.439,14,0.005,15,0.852,16,1.73,17,4.529,18,4.683,19,5.688,20,0.39,22,2.281,24,0.426,25,2.418,26,3.416,27,5.253,28,3.416,29,4.032,30,5.253,31,3.416,32,1.738,33,2.147,34,1.549,35,3.416,36,2.418,37,0.049,38,2.767,39,3.33,40,2.499,41,5.253,42,4.268,43,4.669,44,0.647,45,5.714,46,5.714,47,3.719,48,2.418,49,1.002,50,3.305,51,1.435,52,0.003,53,0.003,107,0.781,832,4.494,833,4.494,834,4.494,835,4.494,836,4.494,837,4.494]],["title/classes/CreatePostDto.html",[0,0.111,838,2.346]],["body/classes/CreatePostDto.html",[0,0.173,2,0.902,3,0.02,4,0.023,5,0.023,8,0.109,9,0.896,13,0.445,14,0.005,15,0.873,16,1.547,17,4.355,18,4.682,20,0.349,22,2.825,24,0.372,25,1.91,26,2.876,28,4.829,29,3.997,31,2.876,32,1.373,33,3.852,34,1.224,35,2.876,36,1.91,37,0.051,38,2.426,44,0.312,48,1.91,49,1.329,51,2.283,52,0.003,53,0.003,57,0.132,107,0.657,191,2.181,237,1.847,258,1.906,415,1.474,510,2.377,714,4.303,814,1.977,820,2.868,822,2.644,824,2.93,838,2.35,839,2.61,840,2.61,841,3.549,842,3.849,843,2.937,844,3.549,845,3.93,846,3.549,847,3.549,848,2.671,849,4.49,850,2.077,851,1.734,852,1.774,853,1.91,854,1.774,855,1.774,856,2.671,857,2.447,858,3.213,859,2.077,860,2.386,861,4.186,862,2.215,863,3.575,864,3.128,865,1.561,866,2.077,867,2.671,868,3.128,869,1.774]],["title/classes/CreatePostDto-1.html",[0,0.094,70,1.466,838,1.99]],["body/classes/CreatePostDto-1.html",[0,0.164,2,0.967,3,0.021,4,0.025,5,0.025,8,0.117,9,0.944,13,0.446,14,0.005,15,0.873,16,1.601,17,4.362,18,4.667,20,0.361,22,2.781,24,0.388,25,2.047,26,3.028,28,4.728,29,3.952,31,3.028,32,1.471,33,3.775,34,1.311,35,3.028,36,2.047,37,0.044,38,2.489,44,0.334,48,2.047,49,1.328,51,1.797,52,0.003,53,0.003,57,0.136,107,0.692,191,2.273,237,1.902,258,1.669,415,1.58,510,2.294,714,4.134,814,2.036,820,2.953,822,2.723,824,2.997,838,2.475,840,2.798,842,3.983,843,3.147,845,4.139,848,2.813,849,4.332,850,2.226,851,1.858,852,1.901,853,2.047,854,1.901,855,1.901,856,2.813,857,2.577,858,3.348,859,2.226,861,3.92,863,2.813,864,2.226,865,1.673,866,2.226,867,2.813,868,3.294,869,1.901,870,3.147,871,3.803,872,3.803,873,3.803,874,3.803]],["title/classes/CreatePostDto-2.html",[0,0.094,74,1.914,838,1.99]],["body/classes/CreatePostDto-2.html",[0,0.163,2,0.958,3,0.021,4,0.025,5,0.025,8,0.115,9,0.937,13,0.444,14,0.005,15,0.87,16,1.593,17,4.351,18,4.659,20,0.36,22,2.774,24,0.385,25,2.027,26,3.006,28,4.715,29,3.938,31,3.006,32,1.457,33,3.759,34,1.298,35,3.006,36,2.027,37,0.044,38,2.48,44,0.331,48,2.027,49,1.326,51,1.783,52,0.003,53,0.003,57,0.135,107,0.687,191,2.26,237,1.894,258,1.657,415,1.565,510,2.283,714,4.119,814,2.028,820,2.941,822,2.712,824,2.988,830,3.843,838,2.457,840,2.77,842,3.964,843,3.116,845,4.108,848,2.792,849,4.311,850,2.204,851,1.84,852,1.883,853,2.027,854,1.883,855,1.883,856,2.792,857,2.558,858,3.328,859,2.204,861,3.897,863,2.792,864,2.204,865,1.657,866,2.204,867,2.792,868,3.27,869,1.883,875,3.116,876,3.766,877,3.766,878,3.766,879,3.766]],["title/classes/CreateUserCommand.html",[0,0.111,880,3.923]],["body/classes/CreateUserCommand.html",[0,0.119,2,1.459,3,0.032,4,0.038,5,0.038,8,0.176,9,1.257,10,2.608,13,0.432,14,0.005,15,0.979,20,0.432,37,0.038,44,0.504,49,1.34,52,0.004,53,0.004,57,0.158,58,4.296,106,0.899,107,0.706,110,1.537,237,2.212,357,4.23,358,3.68,880,5.513,881,9.184,882,5.737,883,5.737,884,5.737,885,5.737,886,5.737,887,5.737]],["title/classes/CreateUserDto.html",[0,0.111,436,3.329]],["body/classes/CreateUserDto.html",[0,0.165,2,1.323,3,0.029,4,0.034,5,0.034,8,0.159,9,1.178,13,0.388,14,0.005,15,0.911,16,1.72,17,4.477,18,4.577,20,0.388,24,0.407,29,3.801,32,2.013,33,2.487,34,1.795,37,0.052,38,2.563,44,0.699,49,1.329,51,2.243,52,0.004,53,0.004,57,0.146,237,2.141,256,1.637,357,3.358,358,3.563,423,2.203,436,4.965,441,3.5,534,3.686,825,4.841,826,4.841,840,3.828,845,5.168,848,3.512,851,2.543,858,3.976,888,4.664,889,5.205,890,5.205,891,5.205,892,5.455]],["title/classes/CreateUserDto-1.html",[0,0.094,70,1.466,436,2.823]],["body/classes/CreateUserDto-1.html",[0,0.165,2,1.323,3,0.029,4,0.034,5,0.034,8,0.159,9,1.178,13,0.388,14,0.005,15,0.911,16,1.72,17,4.477,18,4.577,20,0.388,24,0.407,29,3.801,32,2.013,33,2.487,34,1.795,37,0.052,38,2.563,44,0.699,49,1.329,51,2.243,52,0.004,53,0.004,57,0.146,237,2.141,256,1.637,276,3.674,277,3.674,357,3.358,358,3.563,423,2.203,436,4.965,441,3.5,534,3.686,840,3.828,845,5.168,848,3.512,851,2.543,858,3.976,892,5.455,893,4.664,894,5.205,895,5.205,896,5.205]],["title/classes/CreateUserHandler.html",[0,0.111,897,4.414]],["body/classes/CreateUserHandler.html",[0,0.084,2,1.035,3,0.023,4,0.027,5,0.027,8,0.125,10,1.079,13,0.373,14,0.005,15,0.678,20,0.373,24,0.506,37,0.027,44,0.672,52,0.003,53,0.003,57,0.139,58,3.798,60,0.794,63,0.922,68,1.033,78,2.321,88,2.631,90,1.861,93,1.021,106,1.198,107,0.94,110,1.213,165,2.738,195,2.542,198,2.288,230,2.065,237,1.424,251,1.3,256,1.281,296,2.072,357,2.827,358,2.37,364,2.314,400,3.369,428,1.691,880,5.623,897,4.895,898,8.121,899,4.071,900,6.966,901,5.915,902,5.915,903,5.915,904,4.071,905,9.498,906,4.071,907,5.915,908,4.071,909,5.3,910,5.915,911,4.071,912,5.915,913,5.915,914,4.684,915,4.071,916,4.071,917,3.369,918,3.648,919,4.35,920,4.071,921,4.071,922,3.648,923,4.887,924,4.071,925,3.161,926,4.071,927,4.35,928,4.071,929,4.071,930,4.071,931,4.071,932,4.071,933,4.071,934,4.071,935,3.648,936,5.915,937,4.071,938,4.071,939,4.071,940,4.071,941,4.071,942,3.161,943,4.071,944,4.071,945,5.915,946,4.071,947,4.071]],["title/modules/DatabaseModule.html",[148,2.216,672,3.923]],["body/modules/DatabaseModule.html",[0,0.109,3,0.029,4,0.035,5,0.035,13,0.258,14,0.005,20,0.346,24,0.517,37,0.035,44,0.464,49,0.966,52,0.004,53,0.004,56,1.565,57,0.138,60,0.708,63,0.938,64,0.639,68,1.238,82,2.999,93,1.324,106,0.827,107,0.649,116,4.1,148,3.328,150,2.701,154,4.588,160,4.151,162,4.932,176,2.917,230,1.342,233,1.941,299,3.881,596,3.881,672,5.891,676,4.728,684,3.414,758,3.881,760,4.427,948,5.277,949,7.673,950,7.177,951,5.277,952,7.177,953,5.277,954,7.091,955,5.277,956,8.01,957,4.728,958,4.097,959,2.468,960,2.522,961,5.277,962,8.01,963,5.277,964,5.277,965,5.277,966,5.277,967,5.277]],["title/interfaces/DbConfig.html",[312,1.25,968,3.329]],["body/interfaces/DbConfig.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.341,14,0.005,24,0.368,37,0.042,52,0.004,53,0.004,57,0.109,312,1.488,428,3.638,480,2.414,510,1.968,518,4.596,627,5.611,732,4.682,739,3.822,748,3.042,751,3.741,752,5.883,760,4.993,781,5.378,814,1.636,968,4.993,969,6.349,970,6.21,971,6.21,972,6.21,973,6.21,974,5.883,975,6.21,976,5.883,977,5.611,978,4.67,979,4.929]],["title/interfaces/DbConfig-1.html",[70,1.466,312,1.06,968,2.823]],["body/interfaces/DbConfig-1.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.341,14,0.005,24,0.368,37,0.042,52,0.004,53,0.004,57,0.109,312,1.488,428,3.638,480,2.414,510,1.968,518,4.596,627,5.611,732,4.682,739,3.822,748,3.042,751,3.741,752,5.883,760,4.993,781,5.378,814,1.636,968,4.993,970,6.21,971,6.21,972,6.21,973,6.21,974,5.883,975,6.21,976,5.883,977,5.611,978,4.67,979,4.929,980,6.349]],["title/interfaces/DbConfig-2.html",[74,1.914,312,1.06,968,2.823]],["body/interfaces/DbConfig-2.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.339,14,0.005,24,0.366,37,0.042,52,0.004,53,0.004,57,0.109,276,2.73,277,2.73,312,1.483,428,3.633,480,2.406,510,1.961,518,4.59,627,5.599,732,4.672,739,3.814,748,3.035,751,3.733,752,5.871,760,4.983,781,5.367,968,4.983,970,6.197,971,6.197,972,6.197,973,6.197,974,5.871,975,6.197,976,5.871,977,5.599,978,4.654,979,4.913,981,6.328]],["title/interfaces/DbConfig-3.html",[98,2.373,312,1.06,968,2.823]],["body/interfaces/DbConfig-3.html",[3,0.035,4,0.042,5,0.042,8,0.194,9,1.339,14,0.005,24,0.366,37,0.042,52,0.004,53,0.004,57,0.109,312,1.483,428,3.633,480,2.406,510,1.961,518,4.59,627,5.599,732,4.672,739,3.814,748,3.035,751,3.733,752,5.871,760,4.983,781,5.367,814,1.631,830,3.092,968,4.983,970,6.197,971,6.197,972,6.197,973,6.197,974,5.871,975,6.197,976,5.871,977,5.599,978,4.654,979,4.913,982,6.328]],["title/classes/DbConfigError.html",[0,0.111,959,2.494]],["body/classes/DbConfigError.html",[0,0.166,2,2.034,3,0.035,4,0.042,5,0.053,13,0.31,14,0.005,15,0.778,20,0.31,37,0.053,39,3.331,40,2.499,42,4.269,44,0.558,49,1.192,52,0.004,53,0.004,57,0.137,85,2.297,106,0.994,107,0.781,110,1.302,116,4.094,222,3.22,251,2.027,313,4.185,401,4.107,748,2.414,751,3.741,959,3.741,960,4.185,983,5.688,984,4.978,985,6.349,986,4.547,987,4.67]],["title/classes/DbConfigError-1.html",[0,0.094,70,1.466,959,2.115]],["body/classes/DbConfigError-1.html",[0,0.169,2,1.658,3,0.036,4,0.043,5,0.043,13,0.318,14,0.005,15,0.791,20,0.318,37,0.054,44,0.573,49,1.207,52,0.004,53,0.004,57,0.14,85,2.359,106,1.022,107,0.802,110,1.337,222,3.26,251,2.083,313,4.237,748,2.48,751,3.805,814,2.097,959,3.805,960,4.237,984,5.04,986,4.624,988,5.844,989,6.522]],["title/classes/DbConfigError-2.html",[0,0.094,74,1.914,959,2.115]],["body/classes/DbConfigError-2.html",[0,0.169,2,1.658,3,0.036,4,0.043,5,0.043,13,0.318,14,0.005,15,0.791,20,0.318,37,0.054,44,0.573,49,1.207,52,0.004,53,0.004,57,0.14,85,2.359,106,1.022,107,0.802,110,1.337,222,3.26,251,2.083,313,4.237,748,2.48,751,3.805,814,2.097,959,3.805,960,4.237,984,5.04,986,4.624,990,5.844,991,6.522]],["title/classes/DbConfigError-3.html",[0,0.094,98,2.373,959,2.115]],["body/classes/DbConfigError-3.html",[0,0.167,2,2.042,3,0.036,4,0.042,5,0.053,13,0.312,14,0.005,15,0.781,20,0.312,37,0.053,39,3.353,40,2.516,42,4.297,44,0.561,49,1.196,52,0.004,53,0.004,57,0.138,85,2.312,106,1.001,107,0.786,110,1.31,222,3.23,251,2.041,313,4.198,401,4.135,748,2.43,751,3.757,959,3.757,960,4.198,984,4.993,986,4.566,987,4.701,992,5.727,993,6.391]],["title/classes/DbConfigError-4.html",[0,0.094,112,2.926,959,2.115]],["body/classes/DbConfigError-4.html",[0,0.168,2,1.647,3,0.036,4,0.043,5,0.043,13,0.316,14,0.005,15,0.788,20,0.316,37,0.053,44,0.569,49,1.204,52,0.004,53,0.004,57,0.139,85,2.343,106,1.015,107,0.797,110,1.328,222,3.25,251,2.068,276,3.495,277,3.495,313,4.224,748,2.463,751,3.789,959,3.789,960,4.224,984,5.024,986,4.604,994,5.804,995,6.478]],["title/classes/DbConfigError-5.html",[0,0.094,114,3.041,959,2.115]],["body/classes/DbConfigError-5.html",[0,0.168,2,1.647,3,0.036,4,0.043,5,0.043,13,0.316,14,0.005,15,0.788,20,0.316,37,0.053,44,0.569,49,1.204,52,0.004,53,0.004,57,0.139,85,2.343,106,1.015,107,0.797,110,1.328,222,3.25,251,2.068,313,4.224,748,2.463,751,3.789,814,2.088,830,3.958,959,3.789,960,4.224,984,5.024,986,4.604,996,5.804,997,6.478]],["title/classes/DbError.html",[0,0.111,960,2.549]],["body/classes/DbError.html",[0,0.166,2,2.034,3,0.035,4,0.042,5,0.053,13,0.31,14,0.005,15,0.778,20,0.31,37,0.053,39,3.331,40,2.499,42,4.269,44,0.558,49,1.192,52,0.004,53,0.004,57,0.137,85,2.297,106,0.994,107,0.781,110,1.302,116,4.094,222,3.381,251,2.027,313,4.185,401,4.107,748,2.414,751,3.741,959,2.969,960,4.185,983,5.688,984,4.978,986,4.547,987,4.67,998,6.349]],["title/classes/DbError-1.html",[0,0.094,70,1.466,960,2.161]],["body/classes/DbError-1.html",[0,0.169,2,1.658,3,0.036,4,0.043,5,0.043,13,0.318,14,0.005,15,0.791,20,0.318,37,0.054,44,0.573,49,1.207,52,0.004,53,0.004,57,0.14,85,2.359,106,1.022,107,0.802,110,1.337,222,3.414,251,2.083,313,4.237,748,2.48,751,3.805,814,2.097,959,3.051,960,4.237,984,5.04,986,4.624,988,5.844,999,6.522]],["title/classes/DbError-2.html",[0,0.094,74,1.914,960,2.161]],["body/classes/DbError-2.html",[0,0.169,2,1.658,3,0.036,4,0.043,5,0.043,13,0.318,14,0.005,15,0.791,20,0.318,37,0.054,44,0.573,49,1.207,52,0.004,53,0.004,57,0.14,85,2.359,106,1.022,107,0.802,110,1.337,222,3.414,251,2.083,313,4.237,748,2.48,751,3.805,814,2.097,959,3.051,960,4.237,984,5.04,986,4.624,990,5.844,1000,6.522]],["title/classes/DbError-3.html",[0,0.094,98,2.373,960,2.161]],["body/classes/DbError-3.html",[0,0.167,2,2.042,3,0.036,4,0.042,5,0.053,13,0.312,14,0.005,15,0.781,20,0.312,37,0.053,39,3.353,40,2.516,42,4.297,44,0.561,49,1.196,52,0.004,53,0.004,57,0.138,85,2.312,106,1.001,107,0.786,110,1.31,222,3.389,251,2.041,313,4.198,401,4.135,748,2.43,751,3.757,959,2.989,960,4.198,984,4.993,986,4.566,987,4.701,992,5.727,1001,6.391]],["title/classes/DbError-4.html",[0,0.094,112,2.926,960,2.161]],["body/classes/DbError-4.html",[0,0.168,2,1.647,3,0.036,4,0.043,5,0.043,13,0.316,14,0.005,15,0.788,20,0.316,37,0.053,44,0.569,49,1.204,52,0.004,53,0.004,57,0.139,85,2.343,106,1.015,107,0.797,110,1.328,222,3.405,251,2.068,276,3.495,277,3.495,313,4.224,748,2.463,751,3.789,959,3.03,960,4.224,984,5.024,986,4.604,994,5.804,1002,6.478]],["title/classes/DbError-5.html",[0,0.094,114,3.041,960,2.161]],["body/classes/DbError-5.html",[0,0.168,2,1.647,3,0.036,4,0.043,5,0.043,13,0.316,14,0.005,15,0.788,20,0.316,37,0.053,44,0.569,49,1.204,52,0.004,53,0.004,57,0.139,85,2.343,106,1.015,107,0.797,110,1.328,222,3.405,251,2.068,313,4.224,748,2.463,751,3.789,814,2.088,830,3.958,959,3.03,960,4.224,984,5.024,986,4.604,996,5.804,1003,6.478]],["title/modules/DbModule.html",[148,2.216,1004,3.923]],["body/modules/DbModule.html",[0,0.102,3,0.027,4,0.032,5,0.032,13,0.377,14,0.005,20,0.377,24,0.481,37,0.032,38,1.478,44,0.593,49,0.669,52,0.003,53,0.003,56,1.457,57,0.143,60,0.659,63,1.021,64,0.595,68,1.348,82,2.791,88,2.502,106,1.058,107,0.83,148,3.206,150,2.513,160,3.953,166,3.812,167,2.643,174,4.4,176,2.714,230,1.248,518,2.455,684,3.176,714,3.376,758,3.611,814,2.246,820,1.836,949,8.069,950,4.4,952,6.915,959,2.297,968,6.024,978,4.967,1004,5.677,1005,4.91,1006,6.752,1007,4.91,1008,6.752,1009,4.91,1010,4.91,1011,7.808,1012,7.718,1013,4.91,1014,4.91,1015,4.91,1016,4.91,1017,4.91,1018,4.4,1019,4.4,1020,4.91,1021,4.91,1022,4.91]],["title/guards/DoesUserExist.html",[264,4.414,1023,4.414]],["body/guards/DoesUserExist.html",[0,0.107,3,0.029,4,0.034,5,0.034,8,0.159,10,1.372,13,0.342,14,0.005,20,0.387,24,0.459,37,0.034,38,1.558,44,0.697,52,0.003,53,0.003,57,0.146,60,0.94,63,0.926,64,0.627,67,2.038,68,1.223,71,3.974,78,2.017,90,1.628,93,1.298,106,1.242,107,0.975,110,1.061,177,0.913,191,2.376,198,2.708,230,1.78,233,1.904,237,1.247,251,1.653,264,5.793,289,4.697,296,1.813,372,4.284,373,5.961,376,4.911,395,2.942,422,5.435,1024,4.019,1025,5.177,1026,7.346,1027,7,1028,5.177,1029,4.284,1030,5.177,1031,4.529,1032,5.333,1033,7,1034,5.177,1035,5.177,1036,3.481,1037,5.177,1038,4.284,1039,5.177,1040,7,1041,5.177,1042,5.177,1043,3.126]],["title/modules/DomainModule.html",[148,2.216,1044,4.141]],["body/modules/DomainModule.html",[0,0.096,3,0.026,4,0.031,5,0.031,13,0.365,14,0.005,24,0.552,37,0.049,52,0.003,53,0.003,56,1.925,57,0.08,64,0.562,70,1.503,114,3.117,148,2.696,150,2.373,151,3.798,156,3.798,157,2.714,158,2.714,160,3.798,166,3.599,167,2.495,169,4.197,176,2.562,230,1.65,518,3.244,548,3.599,552,3.599,553,3.836,684,2.999,740,3.117,814,1.195,987,3.41,1004,6.278,1044,7.405,1045,4.154,1046,4.154,1047,6.506,1048,6.506,1049,4.636,1050,5.033,1051,4.154,1052,4.636,1053,3.836,1054,3.836,1055,4.636,1056,3.836,1057,6.488,1058,4.636,1059,4.636,1060,4.636,1061,4.636,1062,6.488,1063,6.488,1064,7.486,1065,8.109,1066,5.814,1067,6.488,1068,6.488,1069,6.488,1070,4.636,1071,7.486,1072,4.636,1073,4.636,1074,4.636,1075,4.636,1076,3.599,1077,4.636,1078,4.636,1079,4.636,1080,4.636]],["title/injectables/ErrorsInterceptor.html",[177,0.695,1081,4.779]],["body/injectables/ErrorsInterceptor.html",[0,0.126,3,0.034,4,0.04,5,0.04,6,3.978,8,0.186,13,0.296,14,0.005,20,0.296,24,0.496,37,0.04,40,3.559,44,0.533,52,0.004,53,0.004,60,1.043,63,0.803,64,0.735,68,1.059,85,2.194,106,0.95,107,0.746,177,1.013,178,1.7,200,2.568,289,4.997,291,2.568,296,2.125,1031,3.924,1032,5.765,1036,4.079,1081,6.963,1082,6.066,1083,5.715,1084,5.715,1085,6.65,1086,6.066,1087,5.715,1088,6.066,1089,4.462,1090,4.255,1091,4.709,1092,5.435,1093,6.066,1094,6.066,1095,6.066,1096,6.066]],["title/injectables/FilesAzureService.html",[177,0.695,1097,4.414]],["body/injectables/FilesAzureService.html",[0,0.099,3,0.027,4,0.031,5,0.031,8,0.146,9,1.111,13,0.323,14,0.005,15,0.868,20,0.401,24,0.44,37,0.031,44,0.419,49,1.036,52,0.003,53,0.003,57,0.148,60,0.889,63,0.876,64,0.578,68,1.434,78,2.27,88,2.687,90,1.502,93,1.198,106,0.748,107,0.587,110,1.559,177,0.864,178,1.338,198,2.562,222,2.436,251,1.525,285,2.444,825,4.904,826,5.075,914,6.003,1097,5.481,1098,4.775,1099,7.605,1100,7.605,1101,8.213,1102,6.623,1103,4.775,1104,7.359,1105,6.797,1106,8.213,1107,4.775,1108,5.935,1109,4.775,1110,6.623,1111,5.935,1112,4.775,1113,8.213,1114,4.775,1115,4.775,1116,4.775,1117,4.775,1118,4.775,1119,4.775,1120,4.775,1121,4.775]],["title/injectables/FilesS3Service.html",[177,0.695,1122,4.414]],["body/injectables/FilesS3Service.html",[0,0.109,3,0.029,4,0.034,5,0.034,8,0.16,13,0.344,14,0.005,15,0.893,20,0.389,24,0.408,37,0.034,44,0.619,49,1.25,52,0.004,53,0.004,57,0.147,60,0.947,63,0.933,64,0.634,68,1.232,78,2.334,90,2.218,93,1.769,106,1.105,107,0.867,110,1.635,177,0.92,178,1.466,198,2.728,230,1.793,251,2.252,257,2.746,825,5.493,826,4.851,914,5.363,1122,5.836,1123,5.234,1124,7.052,1125,5.187,1126,5.234,1127,7.052,1128,5.234,1129,5.739,1130,7.052,1131,6.626,1132,5.234,1133,5.836,1134,5.234,1135,5.234,1136,5.234,1137,7.052,1138,7.052,1139,5.234]],["title/injectables/FirebaseAuthService.html",[177,0.695,208,3.221]],["body/injectables/FirebaseAuthService.html",[0,0.082,3,0.022,4,0.026,5,0.026,8,0.121,10,1.045,13,0.368,14,0.005,15,0.927,20,0.368,24,0.501,37,0.026,44,0.662,49,0.787,52,0.003,53,0.003,57,0.138,60,0.776,63,0.905,64,0.478,68,1.195,78,2.039,88,2.522,90,2.152,93,1.45,106,1.18,107,0.926,108,2.896,110,1.185,116,4.104,177,0.754,178,1.105,189,5.311,191,1.339,198,1.526,201,2.653,208,3.491,210,2.902,211,2.902,230,2.13,231,4.488,233,2.126,235,1.928,236,5.898,237,1.814,239,2.382,242,1.77,251,1.26,256,1.818,325,3.031,328,3.265,337,2.123,395,2.242,398,3.887,472,2.653,596,2.902,598,3.063,691,5.848,706,3.535,731,3.063,935,3.535,977,2.768,1129,2.653,1140,3.535,1141,5.78,1142,5.179,1143,2.902,1144,6.367,1145,6.841,1146,3.945,1147,3.535,1148,3.945,1149,5.78,1150,3.945,1151,5.179,1152,3.945,1153,3.535,1154,3.945,1155,3.535,1156,3.535,1157,3.535,1158,3.535,1159,3.535,1160,3.535,1161,3.535,1162,3.535,1163,3.945,1164,3.535,1165,3.945,1166,3.945,1167,3.945,1168,3.535,1169,3.535,1170,3.535,1171,3.945,1172,3.945,1173,3.945,1174,3.265]],["title/injectables/FirebaseAuthService-1.html",[70,1.466,177,0.59,208,2.731]],["body/injectables/FirebaseAuthService-1.html",[0,0.101,3,0.027,4,0.032,5,0.032,8,0.149,13,0.375,14,0.005,15,0.895,20,0.375,24,0.48,37,0.032,44,0.675,49,0.915,52,0.003,53,0.003,57,0.142,60,0.902,63,0.889,64,0.59,68,0.851,78,1.708,88,2.494,90,1.533,93,1.222,106,1.204,107,0.945,110,1.377,132,4.048,133,3.795,177,0.876,178,1.365,189,5.968,191,1.654,198,1.885,201,3.276,208,4.056,210,3.584,211,3.584,230,2.106,231,5.215,233,1.792,235,2.381,236,4.94,237,1.617,239,4.056,242,2.187,325,3.25,328,4.032,337,2.622,398,4.516,472,3.276,977,3.418,1140,4.366,1142,6.018,1143,3.584,1147,4.366,1151,6.018,1155,4.366,1156,4.366,1157,4.366,1158,4.366,1159,6.018,1160,4.366,1161,4.366,1162,4.366,1168,4.366,1169,4.366,1170,4.366,1175,4.872,1176,4.872,1177,4.872,1178,4.872]],["title/classes/GetCatByIdParam.html",[0,0.111,50,3.923]],["body/classes/GetCatByIdParam.html",[0,0.183,1,6.866,2,2.006,3,0.028,4,0.034,5,0.052,6,3.557,7,4.238,8,0.157,9,1.165,10,2.515,11,4.238,12,4.238,13,0.385,14,0.005,15,0.86,16,1.108,17,4.458,18,4.637,20,0.25,22,2.154,24,0.457,25,2.756,26,3.74,27,5.751,28,3.74,29,4.226,30,5.751,31,3.74,32,1.981,33,2.447,34,1.766,35,3.74,36,2.756,37,0.052,38,2.808,39,3.646,40,2.735,41,5.751,42,4.673,43,3.767,44,0.45,45,3.976,46,3.976,47,4.238,48,2.756,49,0.697,50,5.111,51,2.519,52,0.003,53,0.003,1179,5.121,1180,5.121]],["title/controllers/HealthController.html",[54,1.138,1181,3.221]],["body/controllers/HealthController.html",[0,0.125,3,0.033,4,0.04,5,0.04,8,0.184,10,1.592,14,0.005,16,1.3,20,0.293,24,0.494,34,2.072,37,0.04,49,1.162,52,0.004,53,0.004,54,1.282,56,1.782,57,0.133,60,1.037,63,0.795,64,0.728,68,1.049,78,1.528,88,2.569,93,1.507,110,1.232,118,2.365,126,4.04,205,3.152,325,2.794,814,1.991,1181,4.664,1182,6.009,1183,4.419,1184,6.538,1185,4.972,1186,6.009,1187,5.681,1188,5.681,1189,5.681,1190,4.419,1191,4.419,1192,4.419,1193,4.215,1194,4.419,1195,4.972,1196,4.419,1197,4.419]],["title/controllers/HealthController-1.html",[54,0.965,70,1.466,1181,2.731]],["body/controllers/HealthController-1.html",[0,0.125,3,0.033,4,0.04,5,0.04,8,0.184,10,1.592,14,0.005,16,1.3,20,0.293,24,0.494,34,2.072,37,0.04,49,1.162,52,0.004,53,0.004,54,1.282,56,1.782,57,0.133,60,1.037,63,0.795,64,0.728,68,1.049,78,1.528,88,2.569,93,1.507,110,1.232,118,2.365,126,4.04,205,3.152,325,2.794,825,4.39,826,4.39,1181,4.664,1183,4.419,1184,6.32,1187,5.681,1188,5.681,1189,5.681,1190,4.419,1191,4.419,1192,4.419,1193,4.215,1194,4.419,1196,4.419,1197,4.419,1198,6.009,1199,5.384,1200,6.009]],["title/controllers/HealthController-2.html",[54,0.965,74,1.914,1181,2.731]],["body/controllers/HealthController-2.html",[0,0.125,3,0.033,4,0.04,5,0.04,8,0.184,10,1.592,14,0.005,16,1.3,20,0.293,24,0.494,34,2.072,37,0.04,49,1.162,52,0.004,53,0.004,54,1.282,56,1.782,57,0.133,60,1.037,63,0.795,64,0.728,68,1.049,78,1.528,88,2.569,93,1.507,110,1.232,118,2.365,126,4.04,205,3.152,325,2.794,814,1.991,1181,4.664,1183,4.419,1184,6.538,1185,4.972,1187,5.681,1188,5.681,1189,5.681,1190,4.419,1191,4.419,1192,4.419,1193,4.215,1194,4.419,1195,4.972,1196,4.419,1197,4.419,1201,6.009,1202,6.009]],["title/controllers/HealthController-3.html",[54,0.965,98,2.373,1181,2.731]],["body/controllers/HealthController-3.html",[0,0.125,3,0.033,4,0.04,5,0.04,8,0.184,10,1.592,14,0.005,16,1.3,20,0.293,24,0.494,34,2.072,37,0.04,49,1.162,52,0.004,53,0.004,54,1.282,56,1.782,57,0.133,60,1.037,63,0.795,64,0.728,68,1.049,78,1.528,88,2.569,93,1.507,110,1.232,118,2.365,126,4.04,205,3.152,276,3.332,277,3.332,325,2.794,1181,4.664,1183,4.419,1184,6.32,1187,5.681,1188,5.681,1189,5.681,1190,4.419,1191,4.419,1192,4.419,1193,4.215,1194,4.419,1196,4.419,1197,4.419,1199,5.384,1203,6.009,1204,6.009]],["title/controllers/HealthController-4.html",[54,0.965,112,2.926,1181,2.731]],["body/controllers/HealthController-4.html",[0,0.124,3,0.033,4,0.039,5,0.039,8,0.183,10,1.582,14,0.005,16,1.291,20,0.291,24,0.493,34,2.059,37,0.039,49,1.159,52,0.004,53,0.004,54,1.274,56,1.771,57,0.132,60,1.032,63,0.79,64,0.723,68,1.043,78,1.518,88,2.561,93,1.498,110,1.224,118,2.35,126,4.015,205,3.132,325,2.783,814,1.983,830,3.758,1181,4.645,1183,4.392,1184,6.525,1185,4.941,1187,5.658,1188,5.658,1189,5.658,1190,4.392,1191,4.392,1192,4.392,1193,4.189,1194,4.392,1195,4.941,1196,4.392,1197,4.392,1205,5.971,1206,5.971]],["title/classes/HttpExceptionFilter.html",[0,0.111,1207,2.73]],["body/classes/HttpExceptionFilter.html",[0,0.122,2,1.499,3,0.033,4,0.039,5,0.039,8,0.181,13,0.288,14,0.005,20,0.288,24,0.442,37,0.039,44,0.518,52,0.004,53,0.004,57,0.131,60,1.024,63,0.78,64,0.714,93,1.479,106,0.924,107,0.725,139,3.815,169,3.815,191,2.59,207,2.818,219,3.965,230,2.274,242,3.796,285,4.33,291,3.786,296,2.673,551,2.45,739,4.043,814,1.967,1207,3.906,1208,7.631,1209,4.578,1210,5.935,1211,5.353,1212,6.275,1213,4.578,1214,4.137,1215,4.337,1216,4.137,1217,4.137,1218,4.137,1219,4.137,1220,4.137,1221,4.578,1222,4.578,1223,3.965,1224,4.137,1225,4.137]],["title/classes/HttpExceptionFilter-1.html",[0,0.094,70,1.466,1207,2.315]],["body/classes/HttpExceptionFilter-1.html",[0,0.122,2,1.499,3,0.033,4,0.039,5,0.039,8,0.181,13,0.288,14,0.005,20,0.288,24,0.442,37,0.039,44,0.518,52,0.004,53,0.004,57,0.131,60,1.024,63,0.78,64,0.714,93,1.479,106,0.924,107,0.725,139,3.815,169,3.815,191,2.59,207,2.818,219,3.965,230,2.274,242,3.796,285,4.33,291,3.786,296,2.673,551,2.45,739,4.043,814,1.967,1207,3.906,1209,4.578,1210,5.935,1211,5.353,1212,6.275,1213,4.578,1214,4.137,1215,4.337,1216,4.137,1217,4.137,1218,4.137,1219,4.137,1220,4.137,1221,4.578,1222,4.578,1223,3.965,1224,4.137,1225,4.137,1226,7.631]],["title/classes/HttpExceptionFilter-2.html",[0,0.094,74,1.914,1207,2.315]],["body/classes/HttpExceptionFilter-2.html",[0,0.122,2,1.49,3,0.033,4,0.039,5,0.039,8,0.18,13,0.286,14,0.005,20,0.286,24,0.44,37,0.039,44,0.515,52,0.004,53,0.004,57,0.13,60,1.02,63,0.775,64,0.71,93,1.47,106,0.918,107,0.721,139,3.799,169,3.791,191,2.58,207,2.801,219,3.941,230,2.269,242,3.785,276,3.279,277,3.279,285,4.318,291,3.778,296,2.662,551,2.435,739,4.031,1207,3.891,1209,4.55,1210,5.917,1211,5.332,1212,6.261,1213,4.55,1214,4.111,1215,4.311,1216,4.111,1217,4.111,1218,4.111,1219,4.111,1220,4.111,1221,4.55,1222,4.55,1223,3.941,1224,4.111,1225,4.111,1227,7.6]],["title/classes/HttpExceptionFilter-3.html",[0,0.094,98,2.373,1207,2.315]],["body/classes/HttpExceptionFilter-3.html",[0,0.122,2,1.49,3,0.033,4,0.039,5,0.039,8,0.18,13,0.286,14,0.005,20,0.286,24,0.44,37,0.039,44,0.515,52,0.004,53,0.004,57,0.13,60,1.02,63,0.775,64,0.71,93,1.47,106,0.918,107,0.721,139,3.799,169,3.791,191,2.58,207,2.801,219,3.941,230,2.269,242,3.785,285,4.318,291,3.778,296,2.662,551,2.435,739,4.031,814,1.959,830,3.714,1207,3.891,1209,4.55,1210,5.917,1211,5.332,1212,6.261,1213,4.55,1214,4.111,1215,4.311,1216,4.111,1217,4.111,1218,4.111,1219,4.111,1220,4.111,1221,4.55,1222,4.55,1223,3.941,1224,4.111,1225,4.111,1228,7.6]],["title/classes/HttpExceptionFilter-4.html",[0,0.094,112,2.926,1207,2.315]],["body/classes/HttpExceptionFilter-4.html",[0,0.126,2,1.542,3,0.034,4,0.04,5,0.04,6,3.978,8,0.186,13,0.296,14,0.005,20,0.296,24,0.351,37,0.04,44,0.533,52,0.004,53,0.004,60,1.043,63,0.803,64,0.735,93,1.521,106,0.95,107,0.746,169,3.924,191,2.059,219,5.225,230,2.299,242,3.848,285,3.105,291,3.827,296,2.722,551,2.52,739,4.097,1207,3.978,1210,6.015,1211,5.451,1212,6.342,1214,4.255,1215,4.462,1216,4.255,1217,4.255,1218,4.255,1219,4.255,1220,4.255,1223,4.079,1224,4.255,1225,4.255,1229,6.066,1230,6.066,1231,6.066]],["title/classes/HttpExceptionFilter-5.html",[0,0.094,114,3.041,1207,2.315]],["body/classes/HttpExceptionFilter-5.html",[0,0.116,2,1.425,3,0.031,4,0.037,5,0.037,8,0.172,13,0.274,14,0.005,20,0.274,24,0.324,37,0.037,44,0.492,52,0.004,53,0.004,57,0.127,60,0.991,63,0.741,64,0.679,85,2.027,93,1.405,106,0.878,107,0.689,139,4.125,169,3.624,191,1.902,200,2.371,222,2.06,230,2.317,242,3.936,251,1.789,285,2.868,291,3.124,296,2.585,397,2.868,551,2.328,559,4.636,736,3.767,739,3.944,1207,3.778,1210,5.789,1211,5.177,1212,6.153,1214,5.177,1216,3.93,1217,3.93,1218,3.93,1219,3.93,1220,3.93,1223,3.767,1224,3.93,1225,3.93,1232,5.603,1233,5.603,1234,5.02,1235,6.612,1236,5.603,1237,4.35,1238,5.603,1239,5.603,1240,5.603,1241,5.603,1242,5.603]],["title/interfaces/IDatabaseConfig.html",[312,1.25,1243,4.414]],["body/interfaces/IDatabaseConfig.html",[3,0.035,4,0.042,5,0.042,8,0.195,9,1.344,13,0.428,14,0.005,15,0.956,22,1.974,37,0.053,52,0.004,53,0.004,57,0.109,71,2.979,312,1.879,357,3.044,358,2.552,480,2.422,730,3.621,739,3.044,741,5.388,742,6.457,744,6.457,751,2.979,1243,6.633,1244,5.707,1245,8.361,1246,5.707,1247,5.707]],["title/interfaces/IDatabaseConfigAttributes.html",[312,1.25,1245,4.414]],["body/interfaces/IDatabaseConfigAttributes.html",[3,0.031,4,0.036,5,0.036,8,0.169,9,1.226,13,0.464,14,0.005,15,1.005,22,2.539,37,0.048,52,0.004,53,0.004,57,0.095,71,2.582,107,1.244,312,1.713,357,4.167,358,3.494,480,2.1,730,4.957,739,4.167,741,3.232,742,3.873,744,3.873,751,4.079,1243,4.569,1244,4.947,1245,7.506,1246,7.814,1247,7.814]],["title/classes/IMutation.html",[0,0.111,361,3.741]],["body/classes/IMutation.html",[0,0.19,2,1.331,3,0.029,4,0.034,5,0.034,8,0.16,13,0.344,14,0.005,15,0.989,20,0.344,37,0.06,44,0.619,52,0.004,53,0.004,57,0.137,58,3.73,60,0.947,63,0.933,106,1.105,107,0.867,198,3.447,237,2.055,246,5.836,247,5.543,256,1.646,354,5.595,355,3.849,357,4.079,358,3.57,359,5.595,360,7.108,361,4.947,362,4.947,363,5.187,364,2.975,365,3.671,1248,5.234,1249,5.234,1250,4.331]],["title/interfaces/IPagination.html",[312,1.25,1251,3.329]],["body/interfaces/IPagination.html",[0,0.053,3,0.014,4,0.017,5,0.017,8,0.079,9,0.695,10,1.099,13,0.202,14,0.005,15,0.508,22,2.182,24,0.446,37,0.027,39,2.738,40,2.054,49,1.05,51,1.914,52,0.002,53,0.002,57,0.044,64,0.311,68,1.391,70,1.692,78,1.961,82,1.458,88,2.119,90,2.682,93,1.503,108,1.086,110,0.526,167,1.381,177,0.541,198,0.992,200,1.086,230,2.368,233,2.204,235,1.253,237,0.998,242,1.151,258,2.529,291,1.086,312,0.601,325,1.5,337,2.232,395,2.966,397,2.123,415,1.723,423,1.086,426,1.601,427,2.427,428,1.066,444,2.682,480,0.975,571,2.175,720,3.508,814,0.661,820,0.959,822,2.659,824,2.099,838,1.824,852,1.282,854,1.282,855,1.282,856,4.089,857,2.745,862,2.588,863,3.703,865,2.637,867,3.982,869,1.282,942,1.992,1043,1.549,1053,2.123,1054,2.123,1056,2.123,1091,1.992,1251,3.258,1252,2.299,1253,1.992,1254,3.715,1255,2.299,1256,2.299,1257,2.299,1258,3.661,1259,2.299,1260,1.502,1261,1.8,1262,1.418,1263,1.8,1264,2.299,1265,1.8,1266,1.992,1267,2.123,1268,1.992,1269,2.299,1270,1.8,1271,1.725,1272,2.909,1273,3.661,1274,2.788,1275,1.725,1276,1.8,1277,1.8,1278,1.8,1279,1.8,1280,1.8,1281,2.299,1282,1.8,1283,3.715,1284,2.299,1285,2.299,1286,2.299,1287,1.8,1288,2.909,1289,1.8,1290,1.8,1291,1.8,1292,2.299,1293,2.299,1294,2.299,1295,2.299,1296,1.8,1297,3.661,1298,1.8,1299,1.8,1300,1.8,1301,2.909,1302,1.8,1303,1.8,1304,1.8,1305,2.909,1306,2.909,1307,3.661,1308,3.661,1309,1.8,1310,4.514,1311,4.204,1312,1.8,1313,1.8,1314,1.8,1315,1.8,1316,5.587,1317,4.938,1318,1.8,1319,2.909,1320,1.8,1321,1.8,1322,1.8,1323,3.742,1324,1.8,1325,1.8,1326,1.8,1327,3.661,1328,2.299,1329,2.299,1330,2.299,1331,2.299,1332,2.299,1333,2.299,1334,1.8,1335,1.8,1336,1.8]],["title/interfaces/IPagination-1.html",[70,1.466,312,1.06,1251,2.823]],["body/interfaces/IPagination-1.html",[0,0.06,3,0.016,4,0.019,5,0.019,8,0.088,9,0.763,10,0.764,13,0.222,14,0.005,15,0.549,22,2.297,24,0.404,37,0.03,39,2.959,40,2.22,49,1.009,51,2.045,52,0.002,53,0.002,57,0.05,64,0.349,68,1.355,70,1.828,78,1.885,88,1.698,90,2.53,93,1.607,108,1.22,167,1.552,177,0.594,198,1.115,200,1.22,230,2.384,233,2.356,235,1.409,237,1.096,242,1.294,258,2.565,291,1.22,312,0.676,325,1.647,337,2.45,395,3.206,397,1.476,408,3.348,415,1.891,423,1.22,426,1.8,427,2.665,428,1.198,444,2.945,480,1.096,571,2.388,720,3.75,814,0.743,820,1.078,822,2.676,824,2.244,838,2.003,852,1.441,854,1.441,855,1.441,856,4.238,857,2.934,863,3.88,865,2.818,867,4.139,869,1.441,1043,1.741,1251,3.521,1260,1.688,1261,2.023,1262,1.594,1263,2.023,1265,2.023,1270,2.023,1271,1.939,1272,2.023,1273,3.957,1274,3.061,1275,1.939,1276,2.023,1277,2.023,1278,2.023,1279,2.023,1280,2.023,1282,2.023,1287,2.023,1288,3.193,1289,2.023,1290,2.023,1291,2.023,1296,2.023,1297,3.957,1298,2.023,1299,2.023,1300,2.023,1301,3.193,1302,2.023,1303,2.023,1304,2.023,1305,3.193,1306,3.193,1307,3.957,1308,3.957,1309,2.023,1310,4.709,1311,4.494,1312,2.023,1313,2.023,1314,2.023,1315,2.023,1316,5.808,1317,5.2,1318,2.023,1319,3.193,1320,2.023,1321,2.023,1322,2.023,1323,3.999,1324,2.023,1325,2.023,1326,2.023,1327,3.957,1334,2.023,1335,2.023,1336,2.023,1337,2.584,1338,2.239,1339,2.239,1340,2.239]],["title/interfaces/IPagination-2.html",[74,1.914,312,1.06,1251,2.823]],["body/interfaces/IPagination-2.html",[0,0.06,3,0.016,4,0.019,5,0.019,8,0.088,9,0.763,10,0.763,13,0.222,14,0.005,15,0.548,22,2.296,24,0.403,37,0.03,39,2.956,40,2.218,49,1.009,51,2.044,52,0.002,53,0.002,57,0.049,64,0.349,68,1.355,70,1.827,78,1.883,88,1.696,90,2.529,93,1.605,108,1.219,167,1.549,177,0.593,198,1.114,200,1.219,230,2.383,233,2.354,235,1.407,237,1.095,242,1.292,258,2.564,291,1.219,312,0.675,325,1.645,337,2.447,395,3.203,397,1.474,408,3.344,415,1.889,423,1.219,426,1.797,427,2.662,428,1.196,444,2.941,480,1.095,571,2.385,720,3.747,814,0.742,820,1.076,822,2.674,824,2.242,830,1.407,838,2,852,1.439,854,1.439,855,1.439,856,4.236,857,2.932,863,3.877,865,2.816,867,4.137,869,1.439,1043,1.739,1251,3.518,1260,1.685,1261,2.02,1262,1.591,1263,2.02,1265,2.02,1270,2.02,1271,1.936,1272,2.02,1273,3.953,1274,3.057,1275,1.936,1276,2.02,1277,2.02,1278,2.02,1279,2.02,1280,2.02,1282,2.02,1287,2.02,1288,3.19,1289,2.02,1290,2.02,1291,2.02,1296,2.02,1297,3.953,1298,2.02,1299,2.02,1300,2.02,1301,3.19,1302,2.02,1303,2.02,1304,2.02,1305,3.19,1306,3.19,1307,3.953,1308,3.953,1309,2.02,1310,4.706,1311,4.49,1312,2.02,1313,2.02,1314,2.02,1315,2.02,1316,5.805,1317,5.197,1318,2.02,1319,3.19,1320,2.02,1321,2.02,1322,2.02,1323,3.996,1324,2.02,1325,2.02,1326,2.02,1327,3.953,1334,2.02,1335,2.02,1336,2.02,1338,2.235,1339,2.235,1340,2.235,1341,2.58]],["title/classes/IQuery.html",[0,0.111,365,3.741]],["body/classes/IQuery.html",[0,0.196,2,1.481,3,0.032,4,0.038,5,0.038,8,0.178,14,0.005,15,0.991,20,0.284,37,0.062,52,0.004,53,0.004,57,0.13,58,3.541,60,1.016,63,0.771,198,3.444,237,2.144,247,4.572,256,1.832,354,5.311,355,4.284,357,4.019,358,3.369,359,5.311,360,7.084,361,4.086,362,4.086,363,4.284,364,3.311,365,5.311,1342,5.825]],["title/injectables/JwtStrategy.html",[177,0.695,342,4.141]],["body/injectables/JwtStrategy.html",[0,0.113,3,0.03,4,0.036,5,0.036,8,0.167,10,1.446,13,0.354,14,0.005,20,0.354,24,0.503,37,0.036,44,0.637,52,0.004,53,0.004,57,0.14,60,0.974,63,0.722,64,0.661,67,2.148,68,0.953,71,3.81,78,2.071,90,1.717,93,1.369,106,1.136,107,0.892,110,1.119,177,0.946,178,1.529,201,3.67,213,3.407,230,1.388,233,2.007,251,1.743,256,2.563,261,4.015,313,2.608,342,5.631,353,4.891,372,4.517,373,6.09,376,5.088,393,4.891,395,3.102,418,6.002,714,2.729,1184,3.829,1343,5.458,1344,5.458,1345,7.253,1346,5.458,1347,6.499,1348,5.458,1349,4.891,1350,4.891,1351,5.458,1352,4.891,1353,4.891,1354,4.891,1355,5.458,1356,5.458,1357,5.458,1358,5.458,1359,5.458,1360,5.458,1361,5.458,1362,5.458,1363,5.458,1364,5.458]],["title/injectables/LocalStrategy.html",[177,0.695,343,4.141]],["body/injectables/LocalStrategy.html",[0,0.114,3,0.031,4,0.036,5,0.036,8,0.169,10,1.463,13,0.357,14,0.005,15,0.907,20,0.357,24,0.505,37,0.036,44,0.642,52,0.004,53,0.004,57,0.141,60,0.981,63,0.731,64,0.669,67,2.173,68,0.964,71,3.832,78,2.083,90,1.737,93,1.385,106,1.145,107,0.899,110,1.132,177,0.953,178,1.547,198,2.827,201,3.713,215,5.298,230,1.404,233,2.03,256,2.743,261,4.061,262,4.569,313,2.639,343,5.674,357,2.639,358,3.494,418,6.048,974,4.061,1349,4.947,1350,4.947,1352,4.947,1353,4.947,1354,4.947,1365,5.521,1366,5.521,1367,5.521,1368,7.309,1369,5.521,1370,5.521,1371,5.521,1372,5.521]],["title/injectables/Logger.html",[177,0.695,325,1.929]],["body/injectables/Logger.html",[0,0.043,3,0.035,4,0.014,5,0.014,8,0.064,9,0.587,13,0.392,14,0.005,15,0.933,20,0.392,24,0.369,37,0.014,44,0.688,49,1.292,52,0.002,53,0.002,57,0.14,60,0.47,63,1.009,64,0.253,67,0.823,68,0.79,85,3.684,88,1.361,106,1.228,107,0.964,110,0.429,116,4.189,162,3.345,177,0.457,178,0.586,222,1.288,230,1.345,296,0.732,325,2.132,390,1.623,445,4.465,510,2.364,551,3.332,728,4.082,733,5.052,734,5.533,735,2.315,745,2.187,746,2.187,763,2.457,764,2.355,958,1.623,1043,1.262,1373,1.873,1374,2.899,1375,3.742,1376,2.719,1377,2.719,1378,1.623,1379,3.139,1380,2.899,1381,1.873,1382,7.261,1383,2.899,1384,2.899,1385,1.873,1386,3.742,1387,2.899,1388,1.873,1389,3.742,1390,2.899,1391,1.873,1392,4.876,1393,2.899,1394,1.873,1395,2.719,1396,2.899,1397,1.873,1398,2.899,1399,4.134,1400,1.873,1401,3.742,1402,1.73,1403,2.899,1404,1.873,1405,2.899,1406,2.899,1407,1.873,1408,2.899,1409,2.899,1410,1.873,1411,3.742,1412,2.899,1413,2.899,1414,2.457,1415,1.73,1416,1.73,1417,2.355,1418,1.623,1419,2.899,1420,2.899,1421,2.899,1422,1.73,1423,1.73,1424,1.73,1425,3.742,1426,1.73,1427,1.73,1428,1.73,1429,1.73,1430,1.73,1431,2.899,1432,1.73,1433,1.73,1434,1.73,1435,1.73,1436,2.355,1437,1.73,1438,1.73,1439,1.73,1440,5.879,1441,2.899,1442,1.73,1443,1.73,1444,1.73,1445,1.73,1446,1.73,1447,1.73,1448,1.73,1449,1.73]],["title/injectables/Logger-1.html",[70,1.466,177,0.59,325,1.636]],["body/injectables/Logger-1.html",[0,0.043,3,0.035,4,0.014,5,0.014,8,0.063,9,0.581,13,0.39,14,0.005,15,0.932,20,0.39,24,0.366,37,0.014,44,0.685,49,1.289,52,0.002,53,0.002,57,0.14,60,0.465,63,1.004,64,0.25,67,0.811,68,0.782,85,3.68,88,1.347,106,1.222,107,0.959,110,0.423,132,3.981,133,3.732,162,3.321,177,0.451,178,0.577,222,1.273,230,1.333,296,0.722,325,2.115,390,1.6,445,4.441,510,2.352,551,3.317,728,4.059,733,5.046,734,5.515,735,2.291,745,2.161,746,2.161,763,2.428,764,2.327,958,1.6,1043,1.244,1373,1.846,1374,2.864,1375,3.704,1376,2.687,1377,2.687,1378,1.6,1379,3.102,1380,2.864,1381,1.846,1382,7.237,1383,2.864,1384,2.864,1385,1.846,1386,3.704,1387,2.864,1388,1.846,1389,3.704,1390,2.864,1391,1.846,1392,4.837,1393,2.864,1394,1.846,1395,2.687,1396,2.864,1397,1.846,1398,2.864,1399,4.101,1400,1.846,1401,3.704,1402,1.705,1403,2.864,1404,1.846,1405,2.864,1406,2.864,1407,1.846,1408,2.864,1409,2.864,1410,1.846,1411,3.704,1412,2.864,1413,2.864,1414,2.428,1415,1.705,1416,1.705,1417,2.327,1418,1.6,1419,2.864,1420,2.864,1421,2.864,1422,1.705,1423,1.705,1424,1.705,1425,3.704,1426,1.705,1427,1.705,1428,1.705,1429,1.705,1430,1.705,1431,2.864,1432,1.705,1433,1.705,1434,1.705,1435,1.705,1436,2.327,1437,1.705,1438,1.705,1439,1.705,1440,5.843,1441,2.864,1442,1.705,1443,1.705,1444,1.705,1445,1.705,1446,1.705,1447,1.705,1448,1.705,1449,1.705]],["title/injectables/Logger-2.html",[74,1.914,177,0.59,325,1.636]],["body/injectables/Logger-2.html",[0,0.044,3,0.036,4,0.014,5,0.014,8,0.065,9,0.595,13,0.393,14,0.005,15,0.935,20,0.393,24,0.372,37,0.014,44,0.692,49,1.295,52,0.002,53,0.002,57,0.141,60,0.476,63,1.014,64,0.257,67,0.835,68,0.798,85,3.688,88,1.375,106,1.233,107,0.968,110,0.435,162,3.369,177,0.462,178,0.594,222,1.304,230,1.357,296,0.743,325,2.149,390,1.646,445,4.488,510,2.376,551,3.347,728,4.105,733,5.058,734,5.55,735,2.339,745,2.213,746,2.213,763,2.487,764,2.384,958,1.646,1043,1.28,1374,2.934,1375,3.781,1376,2.752,1377,2.752,1378,1.646,1380,2.934,1382,7.285,1383,2.934,1384,2.934,1386,3.781,1387,2.934,1389,3.781,1390,2.934,1392,4.916,1393,2.934,1395,2.752,1396,2.934,1398,2.934,1399,4.167,1401,3.781,1402,1.755,1403,2.934,1405,2.934,1406,2.934,1408,2.934,1409,2.934,1411,3.781,1412,2.934,1413,2.934,1414,2.487,1415,1.755,1416,1.755,1417,2.384,1418,1.646,1419,2.934,1420,2.934,1421,2.934,1422,1.755,1423,1.755,1424,1.755,1425,3.781,1426,1.755,1427,1.755,1428,1.755,1429,1.755,1430,1.755,1431,2.934,1432,1.755,1433,1.755,1434,1.755,1435,1.755,1436,2.384,1437,1.755,1438,1.755,1439,1.755,1440,5.915,1441,2.934,1442,1.755,1443,1.755,1444,1.755,1445,1.755,1446,1.755,1447,1.755,1448,1.755,1449,1.755,1450,2.12,1451,3.545,1452,2.12,1453,2.12,1454,2.12,1455,2.12,1456,2.12,1457,2.12,1458,2.12,1459,2.12,1460,2.12,1461,2.12]],["title/injectables/LoggerInterceptor.html",[177,0.695,1462,3.122]],["body/injectables/LoggerInterceptor.html",[0,0.11,3,0.03,4,0.035,5,0.035,8,0.163,13,0.26,14,0.005,15,0.518,20,0.26,24,0.466,37,0.035,40,3.166,44,0.467,52,0.004,53,0.004,57,0.122,60,0.957,63,0.704,64,0.645,68,0.929,89,3.322,106,0.834,107,0.654,108,2.252,177,0.93,178,1.491,230,1.813,233,1.957,256,2.243,279,2.66,289,4.75,296,1.864,325,2.91,337,3.838,733,2.66,814,1.838,1031,3.442,1032,5.408,1036,3.578,1083,5.245,1084,5.245,1085,6.32,1087,5.245,1089,3.914,1090,3.733,1417,3.578,1462,4.175,1463,5.321,1464,5.321,1465,4.131,1466,5.537,1467,4.131,1468,4.795,1469,3.914,1470,4.795,1471,4.131,1472,4.131,1473,4.131,1474,3.914,1475,4.131,1476,4.131,1477,4.131,1478,3.442,1479,4.131,1480,4.131,1481,4.131,1482,4.131,1483,4.131,1484,4.131,1485,3.914,1486,4.131,1487,4.131,1488,4.131]],["title/injectables/LoggerInterceptor-1.html",[70,1.466,177,0.59,1462,2.648]],["body/injectables/LoggerInterceptor-1.html",[0,0.11,3,0.03,4,0.035,5,0.035,8,0.163,13,0.26,14,0.005,15,0.518,20,0.26,24,0.466,37,0.035,40,3.166,44,0.467,52,0.004,53,0.004,57,0.122,60,0.957,63,0.704,64,0.645,68,0.929,89,3.322,106,0.834,107,0.654,108,2.252,177,0.93,178,1.491,230,1.813,233,1.957,256,2.243,279,2.66,289,4.75,296,1.864,325,2.91,337,3.838,733,2.66,814,1.838,1031,3.442,1032,5.408,1036,3.578,1083,5.245,1084,5.245,1085,6.32,1087,5.245,1089,3.914,1090,3.733,1417,3.578,1462,4.175,1465,4.131,1466,5.537,1467,4.131,1468,4.795,1469,3.914,1470,4.795,1471,4.131,1472,4.131,1473,4.131,1474,3.914,1475,4.131,1476,4.131,1477,4.131,1478,3.442,1479,4.131,1480,4.131,1481,4.131,1482,4.131,1483,4.131,1484,4.131,1485,3.914,1486,4.131,1487,4.131,1488,4.131,1489,5.321,1490,5.321]],["title/injectables/LoggerInterceptor-2.html",[74,1.914,177,0.59,1462,2.648]],["body/injectables/LoggerInterceptor-2.html",[0,0.11,3,0.029,4,0.035,5,0.035,8,0.162,13,0.258,14,0.005,15,0.515,20,0.258,24,0.464,37,0.035,40,3.157,44,0.465,52,0.004,53,0.004,57,0.122,60,0.954,63,0.7,64,0.641,68,0.924,89,3.303,106,0.829,107,0.651,108,2.24,177,0.926,178,1.483,230,1.806,233,1.946,256,2.235,276,3.065,277,3.065,279,2.645,289,4.739,296,1.854,325,2.902,337,3.824,733,2.645,1031,3.423,1032,5.393,1036,3.558,1083,5.226,1084,5.226,1085,6.306,1087,5.226,1089,3.892,1090,3.712,1417,3.558,1462,4.159,1465,4.108,1466,5.516,1467,4.108,1468,4.777,1469,3.892,1470,4.777,1471,4.108,1472,4.108,1473,4.108,1474,3.892,1475,4.108,1476,4.108,1477,4.108,1478,3.423,1479,4.108,1480,4.108,1481,4.108,1482,4.108,1483,4.108,1484,4.108,1485,3.892,1486,4.108,1487,4.108,1488,4.108,1491,5.292,1492,5.292]],["title/injectables/LoggerInterceptor-3.html",[98,2.373,177,0.59,1462,2.648]],["body/injectables/LoggerInterceptor-3.html",[0,0.11,3,0.029,4,0.035,5,0.035,8,0.162,13,0.258,14,0.005,15,0.515,20,0.258,24,0.464,37,0.035,40,3.157,44,0.465,52,0.004,53,0.004,57,0.122,60,0.954,63,0.7,64,0.641,68,0.924,89,3.303,106,0.829,107,0.651,108,2.24,177,0.926,178,1.483,230,1.806,233,1.946,256,2.235,279,2.645,289,4.739,296,1.854,325,2.902,337,3.824,733,2.645,814,1.831,830,3.471,1031,3.423,1032,5.393,1036,3.558,1083,5.226,1084,5.226,1085,6.306,1087,5.226,1089,3.892,1090,3.712,1417,3.558,1462,4.159,1465,4.108,1466,5.516,1467,4.108,1468,4.777,1469,3.892,1470,4.777,1471,4.108,1472,4.108,1473,4.108,1474,3.892,1475,4.108,1476,4.108,1477,4.108,1478,3.423,1479,4.108,1480,4.108,1481,4.108,1482,4.108,1483,4.108,1484,4.108,1485,3.892,1486,4.108,1487,4.108,1488,4.108,1493,5.292,1494,5.292]],["title/injectables/LoggerMiddleware.html",[177,0.695,1495,3.329]],["body/injectables/LoggerMiddleware.html",[0,0.064,3,0.017,4,0.02,5,0.02,8,0.095,13,0.326,14,0.005,15,0.703,20,0.326,22,2.371,24,0.386,37,0.02,40,2.628,44,0.586,49,0.984,52,0.002,53,0.002,57,0.124,60,0.648,63,0.783,64,0.377,67,1.224,68,1.441,88,2.303,89,1.941,106,1.046,107,0.821,110,0.637,116,3.7,133,1.424,139,1.554,177,0.63,178,0.871,191,2.94,197,2.308,207,1.486,230,2.03,232,2.287,256,2.1,279,2.414,283,3.015,285,4.516,290,3.015,296,1.089,315,5.071,325,2.888,364,1.767,397,1.591,398,2.09,401,2.011,415,1.292,551,2.006,616,5.152,720,3.908,733,1.554,735,3.417,1129,2.09,1143,2.287,1237,2.414,1399,2.181,1414,3.388,1436,2.09,1468,2.09,1470,3.247,1478,2.011,1495,3.015,1496,2.786,1497,3.996,1498,3.996,1499,2.786,1500,3.996,1501,4.899,1502,2.786,1503,3.996,1504,2.786,1505,2.786,1506,2.287,1507,3.996,1508,2.573,1509,2.573,1510,2.573,1511,5.524,1512,5.524,1513,5.524,1514,5.524,1515,5.524,1516,5.524,1517,5.524,1518,4.899,1519,4.899,1520,2.573,1521,2.573,1522,4.899,1523,3.996,1524,2.573,1525,2.573,1526,2.573,1527,2.573,1528,5.524,1529,2.573,1530,2.573,1531,5.524,1532,2.573,1533,1.941,1534,3.552,1535,3.996,1536,2.573,1537,2.573,1538,2.573,1539,4.899,1540,2.573,1541,2.573,1542,2.573,1543,2.573,1544,2.573,1545,2.573,1546,2.573,1547,2.573,1548,2.573,1549,5.524,1550,3.996,1551,2.573,1552,2.573,1553,2.573,1554,2.573,1555,2.573,1556,2.573,1557,2.573,1558,2.573,1559,2.573]],["title/injectables/LoggerMiddleware-1.html",[70,1.466,177,0.59,1495,2.823]],["body/injectables/LoggerMiddleware-1.html",[0,0.064,3,0.017,4,0.02,5,0.02,8,0.094,13,0.324,14,0.005,15,0.7,20,0.324,22,2.363,24,0.385,37,0.02,40,2.616,44,0.584,49,0.98,52,0.002,53,0.002,57,0.124,60,0.644,63,0.779,64,0.374,67,1.214,68,1.437,88,2.295,89,1.925,106,1.041,107,0.817,110,0.632,132,3.518,133,3.492,139,1.542,177,0.626,178,0.864,191,2.934,197,2.293,207,1.474,230,2.024,232,2.268,256,2.091,279,2.399,283,2.996,285,4.506,290,2.996,296,1.08,315,5.051,325,2.879,364,1.753,397,1.579,398,2.074,401,1.995,415,1.281,551,1.994,616,5.138,720,3.891,733,1.542,735,3.402,1129,2.074,1143,2.268,1237,2.394,1399,2.163,1414,3.366,1436,2.074,1468,2.074,1470,3.226,1478,1.995,1495,2.996,1496,2.763,1497,3.971,1498,3.971,1499,2.763,1500,3.971,1501,4.874,1502,2.763,1503,3.971,1504,2.763,1505,2.763,1506,2.268,1507,3.971,1508,2.552,1509,2.552,1510,2.552,1511,5.5,1512,5.5,1513,5.5,1514,5.5,1515,5.5,1516,5.5,1517,5.5,1518,4.874,1519,4.874,1520,2.552,1521,2.552,1522,4.874,1523,3.971,1524,2.552,1525,2.552,1526,2.552,1527,2.552,1528,5.5,1529,2.552,1530,2.552,1531,5.5,1532,2.552,1533,1.925,1534,3.529,1535,3.971,1536,2.552,1537,2.552,1538,2.552,1539,4.874,1540,2.552,1541,2.552,1542,2.552,1543,2.552,1544,2.552,1545,2.552,1546,2.552,1547,2.552,1548,2.552,1549,5.5,1550,3.971,1551,2.552,1552,2.552,1553,2.552,1554,2.552,1555,2.552,1556,2.552,1557,2.552,1558,2.552,1559,2.552]],["title/injectables/LoggerMiddleware-2.html",[74,1.914,177,0.59,1495,2.823]],["body/injectables/LoggerMiddleware-2.html",[0,0.065,3,0.017,4,0.021,5,0.021,8,0.096,13,0.327,14,0.005,15,0.706,20,0.327,22,2.379,24,0.388,37,0.021,40,2.639,44,0.589,49,0.988,52,0.002,53,0.002,57,0.125,60,0.652,63,0.787,64,0.38,67,1.234,68,1.445,88,2.31,89,1.957,106,1.05,107,0.824,110,0.643,133,1.436,139,1.567,177,0.634,178,0.878,191,2.947,197,2.322,207,1.498,230,2.036,232,2.306,256,2.109,279,2.429,283,3.034,285,4.525,290,3.034,296,1.098,315,5.09,325,2.897,364,1.782,397,1.605,398,2.108,401,2.028,415,1.302,551,2.019,616,5.166,720,3.925,733,1.567,735,3.432,1129,2.108,1143,2.306,1237,2.434,1399,2.199,1414,3.409,1436,2.108,1468,2.108,1470,3.268,1478,2.028,1495,3.034,1497,4.021,1498,4.021,1500,4.021,1501,4.925,1503,4.021,1506,2.306,1507,4.021,1508,2.594,1509,2.594,1510,2.594,1511,5.548,1512,5.548,1513,5.548,1514,5.548,1515,5.548,1516,5.548,1517,5.548,1518,4.925,1519,4.925,1520,2.594,1521,2.594,1522,4.925,1523,4.021,1524,2.594,1525,2.594,1526,2.594,1527,2.594,1528,5.548,1529,2.594,1530,2.594,1531,5.548,1532,2.594,1533,1.957,1534,3.574,1535,4.021,1536,2.594,1537,2.594,1538,2.594,1539,4.925,1540,2.594,1541,2.594,1542,2.594,1543,2.594,1544,2.594,1545,2.594,1546,2.594,1547,2.594,1548,2.594,1549,5.548,1550,4.021,1551,2.594,1552,2.594,1553,2.594,1554,2.594,1555,2.594,1556,2.594,1557,2.594,1558,2.594,1559,2.594,1560,3.135,1561,3.135,1562,3.135,1563,3.135,1564,3.135]],["title/injectables/LoggerMiddleware-3.html",[98,2.373,177,0.59,1495,2.823]],["body/injectables/LoggerMiddleware-3.html",[0,0.135,3,0.036,4,0.043,5,0.043,6,4.164,8,0.2,13,0.318,14,0.005,20,0.318,24,0.378,37,0.043,40,3.654,44,0.573,52,0.004,53,0.004,60,1.092,63,0.863,64,0.79,106,1.022,107,0.802,177,1.061,178,1.828,197,3.117,279,4.067,283,5.079,290,5.079,296,2.285,551,3.683,616,5.535,1495,5.079,1506,4.797,1565,6.522,1566,6.522,1567,6.522]],["title/modules/LoggerModule.html",[148,2.216,673,3.923]],["body/modules/LoggerModule.html",[0,0.114,3,0.031,4,0.036,5,0.036,13,0.27,14,0.005,20,0.27,24,0.505,37,0.036,44,0.485,49,0.995,52,0.004,53,0.004,56,1.638,57,0.125,60,0.741,63,0.731,64,0.669,106,0.865,107,0.679,116,3.741,148,3.037,150,2.826,151,4.278,154,6.03,156,4.278,157,3.232,158,3.232,160,4.278,176,4.04,296,1.934,325,3.642,546,4.569,547,6.048,548,6.77,550,6.048,551,2.294,552,5.674,673,7.185,684,4.728,957,4.947,1495,3.447,1568,4.947,1569,4.947,1570,4.947,1571,5.521,1572,5.521,1573,5.521,1574,5.521,1575,5.521,1576,5.521]],["title/classes/Message.html",[0,0.111,85,1.929]],["body/classes/Message.html",[0,0.14,2,1.717,3,0.038,4,0.045,5,0.045,8,0.207,9,1.394,13,0.33,14,0.005,15,0.809,20,0.406,37,0.045,44,0.593,52,0.004,53,0.004,57,0.155,75,6.318,76,6.055,85,3.007,106,1.058,107,0.83,110,1.385,571,5.062,1577,6.051,1578,7.448,1579,7.448,1580,6.051]],["title/classes/Message-1.html",[0,0.094,70,1.466,85,1.636]],["body/classes/Message-1.html",[0,0.14,2,1.717,3,0.038,4,0.045,5,0.045,8,0.207,9,1.394,13,0.33,14,0.005,15,0.809,20,0.406,37,0.045,44,0.593,52,0.004,53,0.004,57,0.155,76,6.055,85,3.007,106,1.058,107,0.83,110,1.385,113,6.318,571,5.062,1577,6.051,1578,7.448,1579,7.448,1580,6.051]],["title/entities/Post.html",[258,1.582,516,2.549]],["body/entities/Post.html",[0,0.119,3,0.022,4,0.026,5,0.026,8,0.175,9,0.961,13,0.472,14,0.005,15,0.861,16,1.953,20,0.441,22,1.775,24,0.332,32,1.507,37,0.026,49,1.381,51,2.169,52,0.003,53,0.003,57,0.158,195,4.24,237,1.636,258,2.015,397,3.477,423,3.65,428,1.619,516,2.737,518,1.948,520,4.102,521,4.102,524,4.674,525,2.433,527,4.24,532,2.433,534,3.005,535,5.285,536,3.576,540,3.576,571,3.563,814,2.366,820,2.54,822,2.582,824,2.379,1533,5.523,1581,3.897,1582,5.621,1583,3.897,1584,6.476,1585,7.321,1586,7.136,1587,3.897,1588,3.897,1589,5.507,1590,6.196,1591,3.897,1592,3.897,1593,3.897,1594,3.225,1595,3.897,1596,3.897,1597,3.897,1598,2.62,1599,3.225,1600,3.225]],["title/entities/Post-1.html",[70,1.466,258,1.342,516,2.161]],["body/entities/Post-1.html",[0,0.119,3,0.022,4,0.026,5,0.026,8,0.175,9,0.961,13,0.472,14,0.005,15,0.861,16,1.953,20,0.441,22,1.775,24,0.332,32,1.507,37,0.026,49,1.381,51,2.169,52,0.003,53,0.003,57,0.158,195,4.24,237,1.636,258,2.015,397,3.477,423,3.65,428,1.619,516,2.737,518,1.948,520,4.102,521,4.102,524,4.674,525,2.433,527,4.24,532,2.433,534,3.005,535,5.285,536,3.576,540,3.576,571,3.563,814,2.366,820,2.54,822,2.582,824,2.379,1533,5.523,1582,5.621,1584,6.476,1585,7.321,1586,7.136,1589,5.507,1590,6.196,1594,3.225,1598,2.62,1599,3.225,1600,3.225,1601,3.897,1602,3.897,1603,3.897,1604,3.897,1605,3.897,1606,3.897,1607,3.897,1608,3.897,1609,3.897,1610,3.897]],["title/entities/Post-2.html",[74,1.914,258,1.342,516,2.161]],["body/entities/Post-2.html",[0,0.114,3,0.02,4,0.024,5,0.024,8,0.112,9,0.919,13,0.442,14,0.005,15,0.794,16,1.957,20,0.442,22,1.699,24,0.473,32,1.42,37,0.024,38,1.65,49,1.382,51,2.094,52,0.003,53,0.003,57,0.158,256,2.847,258,1.946,276,3.963,277,3.963,423,1.554,428,1.525,516,2.619,517,7.488,518,1.836,520,3.961,521,3.961,522,2.851,524,4.541,525,2.292,527,4.094,529,3.29,532,2.292,534,2.876,535,5.09,536,3.422,537,4.255,538,5.092,539,4.911,540,3.422,541,5.934,571,3.441,574,3.038,576,4.536,577,4.536,578,4.536,820,2.452,822,2.261,824,2.297,857,3.874,1611,3.672,1612,5.427,1613,5.481,1614,3.672,1615,4.536,1616,5.481,1617,3.672,1618,3.672,1619,3.672,1620,5.481,1621,3.672,1622,3.672,1623,3.672,1624,3.672,1625,3.672,1626,5.481,1627,3.672]],["title/entities/Post-3.html",[98,2.373,258,1.342,516,2.161]],["body/entities/Post-3.html",[0,0.117,3,0.021,4,0.025,5,0.025,8,0.173,9,0.946,13,0.47,14,0.005,15,0.856,16,1.942,20,0.438,22,1.749,24,0.327,32,1.477,37,0.025,49,1.378,51,2.143,52,0.003,53,0.003,57,0.157,195,4.19,237,1.616,258,1.991,397,3.436,423,3.627,428,1.586,516,2.697,518,1.909,520,4.054,521,4.054,524,4.629,525,2.384,527,4.19,532,2.384,534,2.961,535,5.258,536,3.523,540,3.523,571,3.522,814,2.355,820,2.51,822,2.557,824,2.351,830,4.464,1533,5.491,1582,5.555,1584,6.43,1585,7.279,1586,7.09,1589,5.454,1590,6.136,1594,3.16,1598,2.568,1599,3.16,1600,3.16,1628,3.819,1629,3.819,1630,3.819,1631,3.819,1632,3.819,1633,3.819,1634,3.819,1635,3.819,1636,3.819,1637,3.819]],["title/controllers/PostController.html",[54,1.138,1050,3.586]],["body/controllers/PostController.html",[0,0.087,3,0.023,4,0.028,5,0.028,8,0.129,10,1.112,13,0.379,14,0.005,16,1.677,20,0.379,24,0.449,37,0.028,38,1.82,44,0.681,49,1.301,52,0.003,53,0.003,54,0.896,56,1.245,57,0.141,60,0.812,63,1.026,64,0.508,68,1.354,78,2.429,88,1.263,90,2.439,93,1.053,106,1.215,107,0.954,110,0.861,118,1.652,119,2.259,125,2.32,251,2.476,257,2.202,258,2.102,444,3.911,445,2.457,446,3.651,447,3.539,451,2.534,452,2.386,498,2.715,814,2.119,838,3.411,860,5.214,862,4.841,865,3.411,1050,4.065,1260,2.457,1262,3.917,1310,2.457,1462,3.539,1638,4.197,1639,5.003,1640,5.417,1641,5.417,1642,5.003,1643,3.473,1644,5.003,1645,4.197,1646,4.197,1647,6.046,1648,4.197,1649,4.197,1650,4.197,1651,4.694,1652,4.197,1653,6.417,1654,3.473,1655,4.197,1656,4.197,1657,4.197,1658,3.087,1659,3.473,1660,3.473,1661,3.473,1662,3.473,1663,3.258,1664,4.197,1665,4.197,1666,3.473,1667,4.197,1668,4.197,1669,6.046,1670,3.473,1671,3.473,1672,4.197,1673,4.197,1674,4.197]],["title/controllers/PostController-1.html",[54,0.965,70,1.466,1050,3.041]],["body/controllers/PostController-1.html",[0,0.105,3,0.028,4,0.033,5,0.033,8,0.155,10,1.343,13,0.337,14,0.005,16,1.492,20,0.337,24,0.488,37,0.033,38,2.077,44,0.606,49,1.238,51,1.618,52,0.003,53,0.003,54,1.081,56,1.503,57,0.135,60,0.926,63,0.913,64,0.614,68,1.205,78,2.311,88,1.525,90,2.17,93,1.271,106,1.081,107,0.848,110,1.039,118,1.994,119,2.727,125,2.801,197,2.421,251,2.203,257,2.658,258,2.327,259,3.407,446,4.166,447,4.039,451,3.06,452,2.88,499,3.934,814,2.022,838,3.705,865,3.705,1050,4.639,1260,2.966,1262,4.336,1310,2.966,1462,4.039,1639,5.709,1642,5.709,1643,4.193,1644,5.709,1653,5.709,1654,4.193,1658,3.727,1659,4.193,1660,4.193,1661,4.193,1662,4.193,1663,3.934,1666,5.709,1670,4.193,1671,4.193,1675,5.067,1676,5.067,1677,5.067,1678,4.54]],["title/controllers/PostController-2.html",[54,0.965,74,1.914,1050,3.041]],["body/controllers/PostController-2.html",[0,0.104,3,0.028,4,0.033,5,0.033,8,0.154,10,1.332,13,0.335,14,0.005,16,1.484,20,0.335,24,0.486,37,0.033,38,2.065,44,0.603,49,1.235,51,1.605,52,0.003,53,0.003,54,1.073,56,1.491,57,0.134,60,0.921,63,0.908,64,0.609,68,1.198,78,2.306,88,1.513,90,2.159,93,1.261,106,1.075,107,0.844,110,1.031,118,1.979,119,2.705,125,2.778,197,2.402,251,2.191,257,2.637,258,2.318,259,3.38,446,4.144,447,4.017,451,3.036,452,2.857,499,3.902,814,2.014,830,3.817,838,3.693,865,3.693,1050,4.614,1260,2.942,1262,4.318,1310,2.942,1462,4.017,1639,5.678,1642,5.678,1643,4.16,1644,5.678,1653,5.678,1654,4.16,1658,3.697,1659,4.16,1660,4.16,1661,4.16,1662,4.16,1663,3.902,1666,5.678,1670,4.16,1671,4.16,1678,4.504,1679,5.027,1680,5.027,1681,5.027]],["title/classes/PostDto.html",[0,0.111,1682,3.586]],["body/classes/PostDto.html",[0,0.168,2,1.642,3,0.036,4,0.043,5,0.043,8,0.198,9,1.356,10,2.575,13,0.395,14,0.005,15,0.9,16,1.748,20,0.395,24,0.374,32,2.497,37,0.043,52,0.004,53,0.004,57,0.152,71,4.128,257,4.63,534,4.852,822,3.043,851,3.154,858,3.227,1682,5.435,1683,6.456,1684,6.456,1685,6.456,1686,6.456]],["title/injectables/PostService.html",[177,0.695,1262,2.948]],["body/injectables/PostService.html",[0,0.04,3,0.011,4,0.013,5,0.013,8,0.059,9,0.551,10,1.334,13,0.372,14,0.005,15,0.697,16,0.419,20,0.382,22,1.017,24,0.398,37,0.022,39,2.243,40,1.683,44,0.67,49,1.236,51,1.956,52,0.002,53,0.002,57,0.137,60,0.441,63,0.98,64,0.234,68,1.251,70,1.386,78,2.307,82,1.1,88,2.23,90,2.46,93,1.414,106,1.195,107,0.938,108,0.819,110,0.673,167,1.042,177,0.428,178,0.542,198,1.27,200,0.819,230,2.236,233,1.852,235,0.946,237,0.79,242,0.868,251,2.085,258,2.32,291,0.819,312,0.454,325,1.822,337,1.767,368,1.982,395,2.43,397,1.68,415,1.364,423,1.39,424,1.07,426,1.208,427,2.948,428,0.804,444,3.258,445,1.133,551,0.804,571,1.722,720,2.948,814,2.06,820,0.724,822,2.555,824,1.764,838,2.215,852,0.967,854,0.967,855,0.967,856,3.265,857,2.307,862,3.144,863,3.265,865,3.26,867,3.063,869,0.967,942,1.502,1043,1.169,1053,1.601,1054,1.601,1056,1.601,1091,1.502,1251,2.049,1252,1.734,1253,1.502,1254,4.512,1255,1.734,1256,1.734,1257,1.734,1258,4.581,1259,1.734,1260,1.133,1261,1.358,1262,1.814,1263,2.303,1264,1.734,1265,2.303,1266,1.502,1267,3.538,1268,3.319,1269,3.83,1270,2.303,1271,1.301,1272,2.303,1273,2.999,1274,2.207,1275,2.207,1276,1.358,1277,2.303,1278,2.303,1279,1.358,1280,1.358,1281,1.734,1282,1.358,1283,2.941,1284,1.734,1285,1.734,1286,1.734,1287,2.303,1288,2.303,1289,1.358,1290,1.358,1291,1.358,1292,2.941,1293,2.941,1294,1.734,1295,1.734,1296,1.358,1297,2.999,1298,1.358,1299,1.358,1300,2.303,1301,2.303,1302,1.358,1303,1.358,1304,1.358,1305,2.303,1306,2.303,1307,2.999,1308,2.999,1309,1.358,1310,4.022,1311,3.533,1312,1.358,1313,1.358,1314,1.358,1315,1.358,1316,5.023,1317,4.298,1318,1.358,1319,2.303,1320,1.358,1321,1.358,1322,1.358,1323,3.144,1324,1.358,1325,1.358,1326,1.358,1327,2.999,1328,2.941,1329,1.734,1330,2.941,1331,1.734,1332,1.734,1333,1.734,1334,2.303,1335,1.358,1336,1.358,1347,1.734,1640,2.941,1641,2.941,1651,2.549,1682,1.301,1687,2.717,1688,2.549,1689,2.549,1690,2.717,1691,3.283,1692,2.717,1693,1.601,1694,3.283,1695,1.935,1696,1.935,1697,1.935,1698,1.601,1699,1.935,1700,1.935,1701,1.935,1702,1.935,1703,1.935,1704,1.935,1705,1.935]],["title/injectables/PostService-1.html",[70,1.466,177,0.59,1262,2.5]],["body/injectables/PostService-1.html",[0,0.048,3,0.013,4,0.015,5,0.015,8,0.07,9,0.635,10,1.281,13,0.361,14,0.005,15,0.745,20,0.374,22,1.174,24,0.359,37,0.025,39,2.536,40,1.903,44,0.649,49,1.22,51,1.982,52,0.002,53,0.002,57,0.135,60,0.508,63,0.935,64,0.278,68,1.234,70,1.567,78,2.279,88,2.127,90,2.323,93,1.557,106,1.157,107,0.908,108,0.972,110,0.471,167,1.236,177,0.494,178,0.643,198,1.465,200,0.972,230,2.279,233,2.063,235,1.122,237,0.912,242,1.031,251,1.982,258,2.398,291,0.972,312,0.538,325,2.029,337,2.039,368,2.288,395,2.748,397,1.176,408,2.786,415,1.574,423,1.603,424,1.269,426,1.434,427,3.284,428,0.954,444,3.629,571,1.987,720,3.284,814,2.033,820,0.859,822,2.639,824,1.965,838,2.468,852,1.148,854,1.148,855,1.148,856,3.533,857,2.569,863,3.533,865,3.469,867,3.34,869,1.148,1043,1.387,1251,2.365,1260,1.344,1261,1.611,1262,2.094,1263,2.657,1265,2.657,1270,2.657,1271,1.544,1272,1.611,1273,3.392,1274,2.547,1275,2.547,1276,1.611,1277,2.657,1278,2.657,1279,1.611,1280,1.611,1282,1.611,1287,2.657,1288,2.657,1289,1.611,1290,1.611,1291,1.611,1296,1.611,1297,3.392,1298,1.611,1299,1.611,1300,2.657,1301,2.657,1302,1.611,1303,1.611,1304,1.611,1305,2.657,1306,2.657,1307,3.392,1308,3.392,1309,1.611,1310,4.324,1311,3.935,1312,1.611,1313,1.611,1314,1.611,1315,1.611,1316,5.37,1317,4.687,1318,1.611,1319,2.657,1320,1.611,1321,1.611,1322,1.611,1323,3.502,1324,1.611,1325,1.611,1326,1.611,1327,3.392,1334,2.657,1335,1.611,1336,1.611,1337,2.058,1338,1.783,1339,1.783,1340,1.783,1651,2.941,1682,1.544,1687,3.135,1688,2.941,1689,2.941,1690,3.135,1692,3.135,1693,1.9,1698,1.9,1706,3.788,1707,2.297,1708,2.297,1709,2.297,1710,2.297,1711,2.297,1712,2.297,1713,2.297]],["title/injectables/PostService-2.html",[74,1.914,177,0.59,1262,2.5]],["body/injectables/PostService-2.html",[0,0.047,3,0.013,4,0.015,5,0.015,8,0.07,9,0.629,10,1.27,13,0.359,14,0.005,15,0.741,20,0.372,22,1.163,24,0.357,37,0.025,39,2.515,40,1.887,44,0.646,49,1.217,51,1.969,52,0.002,53,0.002,57,0.135,60,0.503,63,0.93,64,0.275,68,1.228,70,1.554,78,2.273,88,2.116,90,2.312,93,1.547,106,1.151,107,0.904,108,0.961,110,0.465,167,1.221,177,0.489,178,0.636,198,1.451,200,0.961,230,2.273,233,2.048,235,1.109,237,0.903,242,1.018,251,1.969,258,2.389,291,0.961,312,0.532,325,2.015,337,2.019,368,2.265,395,2.725,397,1.162,408,2.759,415,1.558,423,1.588,424,1.254,426,1.417,427,3.26,428,0.943,444,3.603,571,1.968,720,3.26,814,2.024,820,0.848,822,2.628,824,1.951,830,3.837,838,2.45,852,1.134,854,1.134,855,1.134,856,3.514,857,2.551,863,3.514,865,3.455,867,3.321,869,1.134,1043,1.37,1251,2.342,1260,1.328,1261,1.592,1262,2.073,1263,2.631,1265,2.631,1270,2.631,1271,1.526,1272,1.592,1273,3.363,1274,2.522,1275,2.522,1276,1.592,1277,2.631,1278,2.631,1279,1.592,1280,1.592,1282,1.592,1287,2.631,1288,2.631,1289,1.592,1290,1.592,1291,1.592,1296,1.592,1297,3.363,1298,1.592,1299,1.592,1300,2.631,1301,2.631,1302,1.592,1303,1.592,1304,1.592,1305,2.631,1306,2.631,1307,3.363,1308,3.363,1309,1.592,1310,4.303,1311,3.907,1312,1.592,1313,1.592,1314,1.592,1315,1.592,1316,5.347,1317,4.66,1318,1.592,1319,2.631,1320,1.592,1321,1.592,1322,1.592,1323,3.477,1324,1.592,1325,1.592,1326,1.592,1327,3.363,1334,2.631,1335,1.592,1336,1.592,1338,1.762,1339,1.762,1340,1.762,1341,2.033,1651,2.912,1682,1.526,1687,3.104,1688,2.912,1689,2.912,1690,3.104,1692,3.104,1693,1.878,1698,1.878,1714,3.751,1715,2.269,1716,2.269,1717,2.269,1718,2.269,1719,2.269,1720,2.269,1721,2.269]],["title/classes/PostTag.html",[0,0.111,842,2.87]],["body/classes/PostTag.html",[0,0.179,2,0.997,3,0.022,4,0.026,5,0.026,8,0.12,9,0.965,13,0.422,14,0.005,15,0.862,16,0.848,17,4.235,18,4.652,20,0.191,22,2.889,24,0.395,25,2.11,26,3.097,28,4.948,29,4.129,31,3.097,32,1.517,33,3.995,34,1.352,35,3.097,36,2.11,37,0.053,38,2.516,44,0.505,48,2.11,49,1.296,51,2.398,52,0.003,53,0.003,57,0.099,107,0.708,191,2.314,237,1.386,258,2.228,415,1.629,510,2.479,714,4.319,814,1.483,820,2.152,822,1.984,824,2.631,838,1.725,839,2.884,842,4.042,848,2.877,849,4.682,850,2.295,851,1.916,852,1.96,853,2.11,854,1.96,855,1.96,856,2.877,857,3.663,858,3.408,859,2.295,860,2.636,861,4.396,862,2.448,863,3.754,864,3.368,865,1.725,866,2.295,867,2.877,868,3.368,869,1.96,1722,3.245,1723,3.921]],["title/classes/PostTag-1.html",[0,0.094,70,1.466,842,2.434]],["body/classes/PostTag-1.html",[0,0.171,2,1.077,3,0.024,4,0.028,5,0.028,8,0.13,9,1.02,13,0.419,14,0.005,15,0.86,16,0.916,17,4.227,18,4.628,20,0.207,22,2.857,24,0.412,25,2.279,26,3.275,28,4.871,29,4.103,31,3.275,32,1.638,33,3.941,34,1.46,35,3.275,36,2.279,37,0.047,38,2.584,44,0.534,48,2.279,49,1.29,51,1.943,52,0.003,53,0.003,57,0.104,107,0.748,191,2.417,237,1.465,258,2.113,415,1.759,510,2.413,714,4.123,814,1.568,820,2.275,822,2.098,824,2.727,838,1.863,842,4.19,848,3.042,849,4.558,850,2.479,851,2.069,852,2.117,853,2.279,854,2.117,855,2.117,856,3.042,857,3.777,858,3.56,859,2.479,861,4.169,863,3.042,864,2.479,865,1.863,866,2.479,867,3.042,868,3.562,869,2.117,870,3.504,1722,3.504,1724,4.234]],["title/classes/PostTag-2.html",[0,0.094,74,1.914,842,2.434]],["body/classes/PostTag-2.html",[0,0.171,2,1.072,3,0.023,4,0.028,5,0.028,8,0.129,9,1.017,13,0.419,14,0.005,15,0.859,16,0.912,17,4.222,18,4.623,20,0.206,22,2.854,24,0.411,25,2.269,26,3.264,28,4.866,29,4.097,31,3.264,32,1.631,33,3.934,34,1.453,35,3.264,36,2.269,37,0.047,38,2.58,44,0.533,48,2.269,49,1.288,51,1.937,52,0.003,53,0.003,57,0.104,107,0.746,191,2.411,237,1.46,258,2.108,415,1.751,510,2.408,714,4.116,814,1.563,820,2.268,822,2.091,824,2.722,830,2.964,838,1.854,842,4.182,848,3.032,849,4.548,850,2.468,851,2.06,852,2.107,853,2.269,854,2.107,855,2.107,856,3.032,857,3.771,858,3.552,859,2.468,861,4.159,863,3.032,864,2.468,865,1.854,866,2.468,867,3.032,868,3.55,869,2.107,875,3.488,1722,3.488,1725,4.215]],["title/controllers/PostsController.html",[54,1.138,1726,4.414]],["body/controllers/PostsController.html",[0,0.067,3,0.018,4,0.021,5,0.021,8,0.099,10,0.859,13,0.333,14,0.005,16,1.593,20,0.36,22,2.804,24,0.427,37,0.021,44,0.599,51,2.671,52,0.002,53,0.002,54,0.692,56,0.961,57,0.134,60,0.669,63,0.975,64,0.393,67,1.276,68,1.499,71,3.639,78,2.378,85,1.172,90,2.318,93,1.712,106,1.069,107,0.839,118,1.276,191,2.316,197,4.101,198,3.01,222,1.192,230,1.545,233,2.51,251,1.592,257,2.616,258,2.942,259,2.179,260,2.904,261,2.384,368,3.67,394,2.904,395,4.422,445,1.897,492,2.682,493,2.682,498,3.226,500,2.682,562,5.648,612,4.468,720,2.919,764,2.179,1193,4.788,1260,1.897,1262,1.791,1323,3.113,1663,2.516,1682,5.45,1726,4.127,1727,3.241,1728,4.468,1729,4.468,1730,4.468,1731,2.904,1732,3.241,1733,3.241,1734,3.241,1735,2.904,1736,4.987,1737,3.241,1738,3.241,1739,3.241,1740,3.241,1741,2.904,1742,3.241,1743,3.241,1744,3.241,1745,3.668,1746,2.904,1747,3.241,1748,2.904,1749,3.241,1750,3.241,1751,3.241,1752,3.241,1753,6.078,1754,2.904,1755,2.904,1756,6.078,1757,6.078,1758,6.078,1759,3.241,1760,3.241,1761,6.078,1762,3.241,1763,3.241,1764,6.078,1765,6.078,1766,4.468,1767,4.468,1768,3.241,1769,4.987,1770,3.241,1771,3.241,1772,6.078,1773,3.241,1774,3.241]],["title/modules/PostsModule.html",[148,2.216,1775,4.141]],["body/modules/PostsModule.html",[0,0.134,3,0.036,4,0.043,5,0.043,14,0.005,24,0.536,37,0.043,52,0.004,53,0.004,56,2.403,57,0.111,64,0.785,71,3.03,148,3.365,150,3.316,151,4.742,156,4.742,157,3.792,158,3.792,176,4.478,1726,7.314,1745,7.153,1746,5.804,1775,7.55,1776,5.804,1777,5.804,1778,6.478,1779,6.478,1780,8.101,1781,6.478]],["title/injectables/PostsService.html",[177,0.695,1745,3.923]],["body/injectables/PostsService.html",[0,0.082,3,0.022,4,0.026,5,0.026,8,0.121,10,1.048,13,0.193,14,0.005,20,0.409,24,0.465,37,0.026,38,1.19,44,0.705,51,2.677,52,0.003,53,0.003,57,0.149,60,0.777,63,1.062,64,0.479,68,1.402,71,4.051,78,2.463,82,2.247,88,1.19,90,2.524,106,1.257,107,0.987,108,3.191,110,0.811,177,0.755,178,1.108,198,3.244,230,1.005,251,1.848,256,2.155,258,2.237,358,2.319,364,5.368,368,3.496,498,3.745,562,6.239,691,4.494,1260,2.314,1534,2.908,1682,5.07,1728,5.187,1730,5.187,1731,5.187,1735,5.187,1741,5.187,1745,4.258,1748,3.542,1766,5.187,1767,5.187,1782,3.953,1783,3.953,1784,3.953,1785,5.789,1786,3.953,1787,5.789,1788,3.953,1789,3.953,1790,3.953,1791,3.953,1792,3.953,1793,3.953,1794,3.542,1795,3.953,1796,3.953,1797,3.953,1798,5.789,1799,5.789,1800,5.789,1801,3.953,1802,3.953,1803,3.953,1804,3.953]],["title/controllers/ProductController.html",[54,1.138,1805,4.779]],["body/controllers/ProductController.html",[0,0.111,3,0.03,4,0.035,5,0.035,8,0.163,14,0.005,16,1.545,20,0.349,24,0.498,34,1.84,37,0.047,38,2.15,49,1.257,52,0.004,53,0.004,54,1.139,56,1.583,57,0.138,60,0.959,63,0.945,64,0.646,68,1.248,78,2.347,110,1.094,118,2.1,119,2.872,125,2.949,132,3.936,133,3.689,197,2.55,198,3.328,205,2.799,239,3.222,256,2.247,258,1.583,259,3.588,446,3.222,447,4.182,451,3.222,452,3.033,461,7.708,462,7.708,467,3.588,468,4.781,469,3.925,470,4.781,471,4.143,472,4.804,473,4.781,474,4.416,475,4.416,646,6.402,1805,6.402,1806,4.781,1807,5.336,1808,5.336,1809,5.336,1810,5.336,1811,5.336,1812,5.336]],["title/modules/RedisCacheModule.html",[148,2.216,1047,3.923]],["body/modules/RedisCacheModule.html",[0,0.106,3,0.029,4,0.034,5,0.034,10,1.361,14,0.005,20,0.251,24,0.49,37,0.034,49,0.948,52,0.003,53,0.003,57,0.12,60,0.689,63,0.679,64,0.622,68,0.897,82,2.919,88,1.546,93,1.288,110,1.053,148,2.892,150,2.629,151,4.075,156,4.075,157,3.006,158,3.006,160,3.006,176,2.838,230,1.306,296,1.799,325,2.519,684,4.504,730,2.919,739,2.454,740,3.453,758,3.777,814,1.795,1047,7.368,1051,4.601,1144,7.224,1153,4.601,1253,3.987,1266,3.987,1268,6.872,1813,4.601,1814,4.601,1815,4.601,1816,5.135,1817,7.931,1818,5.135,1819,6.238,1820,6.962,1821,5.135,1822,5.135,1823,5.135,1824,5.135,1825,5.135,1826,5.135,1827,5.135,1828,5.135,1829,5.135,1830,5.135]],["title/injectables/RedisCacheService.html",[177,0.695,1144,3.923]],["body/injectables/RedisCacheService.html",[0,0.105,3,0.028,4,0.033,5,0.033,8,0.155,13,0.411,14,0.005,15,0.884,20,0.411,24,0.399,37,0.033,44,0.739,49,1.306,52,0.003,53,0.003,57,0.151,60,0.924,63,1.036,64,0.612,68,0.883,78,2.439,82,2.872,88,1.521,90,2.464,106,1.318,107,1.034,110,1.412,177,0.898,178,1.416,251,1.613,424,4.65,814,2.269,1129,5.268,1144,5.065,1253,3.923,1266,3.923,1267,5.699,1268,6.834,1589,5.762,1819,4.528,1831,5.053,1832,6.887,1833,6.887,1834,5.053,1835,5.053,1836,6.887,1837,5.053,1838,6.887,1839,5.053,1840,6.887,1841,5.053,1842,5.053,1843,5.053,1844,5.053]],["title/interfaces/RedisConfig.html",[312,1.25,738,3.45]],["body/interfaces/RedisConfig.html",[3,0.042,4,0.038,5,0.038,8,0.178,9,1.27,13,0.411,14,0.005,15,0.96,22,2.86,37,0.05,44,0.512,52,0.004,53,0.004,57,0.1,108,2.466,116,2.982,218,4.726,222,2.142,279,2.912,312,1.774,480,2.215,510,1.805,725,3.41,726,4.522,727,3.636,728,3.22,729,4.284,730,5.377,731,4.522,732,3.41,733,2.912,734,3.636,735,2.982,736,3.917,737,4.284,738,5.44,739,4.255,740,5.987,741,3.41,742,4.086,743,4.522,744,4.086,745,3.636,746,3.636,748,2.215,749,4.522]],["title/interfaces/RedisConfig-1.html",[70,1.466,312,1.06,738,2.926]],["body/interfaces/RedisConfig-1.html",[3,0.042,4,0.039,5,0.039,8,0.18,9,1.277,13,0.412,14,0.005,15,0.952,22,2.869,37,0.05,44,0.516,52,0.004,53,0.004,57,0.101,108,2.488,132,2.872,133,2.693,218,4.754,222,2.162,279,2.939,312,1.785,480,2.236,510,1.822,725,3.441,726,4.564,727,3.67,728,3.25,730,5.39,732,3.441,733,2.939,734,3.67,735,3.009,736,3.953,737,4.324,738,4.926,739,4.27,740,6.008,741,3.441,742,4.124,743,4.564,744,4.124,745,3.67,746,3.67,748,2.236,749,4.564]],["title/interfaces/RequestModel.html",[309,4.414,312,1.25]],["body/interfaces/RequestModel.html",[0,0.112,3,0.03,4,0.036,5,0.036,8,0.166,9,1.21,10,1.434,13,0.264,14,0.005,24,0.501,37,0.048,40,2.839,49,0.737,52,0.004,53,0.004,57,0.093,64,0.656,67,2.13,78,1.376,85,2.609,90,1.702,93,1.809,132,2.644,133,2.479,177,0.94,191,2.753,200,2.291,207,2.586,208,4.355,209,3.98,213,3.378,230,1.834,233,2.652,235,2.644,256,2.915,275,3.168,283,3.378,285,3.692,286,5.305,288,3.98,289,2.991,290,4.502,291,3.434,292,3.98,296,1.896,297,5.305,298,3.98,299,3.98,300,4.202,303,4.478,304,4.202,305,4.849,308,4.849,309,6.713,310,4.202,312,1.268,313,3.447,314,4.849,315,3.796,316,4.849,317,4.478,318,4.849,319,4.849,480,2.058]],["title/guards/RolesGuard.html",[467,3.586,1023,4.414]],["body/guards/RolesGuard.html",[0,0.115,3,0.031,4,0.037,5,0.037,8,0.171,10,1.476,13,0.359,14,0.005,20,0.359,24,0.426,37,0.037,38,1.676,44,0.646,52,0.004,53,0.004,57,0.141,60,0.987,63,0.737,64,0.675,67,2.192,68,1.284,106,1.151,107,0.904,110,1.142,132,4.02,133,3.769,177,0.959,191,1.891,230,2.225,256,2.312,289,4.837,296,1.951,422,5.707,467,4.943,469,5.407,1024,4.324,1026,7.241,1029,6.083,1031,3.603,1038,4.609,1174,4.609,1845,5.57,1846,4.991,1847,8.372,1848,5.57,1849,5.57,1850,4.991,1851,4.991,1852,4.991,1853,5.57,1854,4.991,1855,6.587,1856,4.991]],["title/guards/RolesGuard-1.html",[70,1.466,467,3.041,1023,3.743]],["body/guards/RolesGuard-1.html",[0,0.116,3,0.031,4,0.037,5,0.037,8,0.171,10,1.48,13,0.36,14,0.005,20,0.36,24,0.426,37,0.037,38,1.681,44,0.647,52,0.004,53,0.004,57,0.141,60,0.989,63,0.739,64,0.677,67,2.199,68,1.286,106,1.154,107,0.906,110,1.145,177,0.96,191,1.896,230,2.227,256,2.317,289,4.842,296,1.957,317,4.623,422,5.718,467,4.952,469,5.417,1024,4.337,1026,7.25,1029,6.095,1031,3.614,1038,4.623,1174,6.095,1846,5.005,1847,8.379,1850,5.005,1851,5.005,1852,5.005,1854,5.005,1855,6.6,1856,6.6,1857,5.586,1858,5.586,1859,5.586]],["title/classes/SearchElasticDto.html",[0,0.111,862,3.329]],["body/classes/SearchElasticDto.html",[0,0.18,2,1.005,3,0.022,4,0.026,5,0.026,8,0.121,9,0.971,13,0.423,14,0.005,15,0.864,16,0.855,17,4.245,18,4.659,20,0.193,22,2.894,24,0.397,25,2.128,26,3.116,28,4.957,29,4.14,31,3.116,32,1.529,33,4.007,34,1.363,35,3.116,36,2.128,37,0.053,38,2.524,44,0.347,48,2.128,49,1.298,51,2.407,52,0.003,53,0.003,57,0.099,191,2.325,237,1.394,258,2.032,415,1.642,510,2.487,714,4.33,814,1.492,820,2.165,822,1.996,824,2.641,838,1.739,839,2.908,842,3.686,848,2.894,849,4.698,850,2.314,851,1.932,852,1.976,853,2.128,854,1.976,855,1.976,856,2.894,857,2.651,858,3.424,859,2.314,860,2.658,861,4.414,862,3.614,863,4.33,864,3.389,865,1.739,866,2.314,867,2.894,868,3.389,869,1.976,1860,3.069,1861,3.953]],["title/modules/SearchModule.html",[148,2.216,1048,3.923]],["body/modules/SearchModule.html",[0,0.11,3,0.029,4,0.035,5,0.035,10,1.402,14,0.005,20,0.258,24,0.496,37,0.035,49,0.967,52,0.004,53,0.004,57,0.122,60,0.71,63,0.7,64,0.641,67,2.083,78,2.039,82,3.008,90,1.665,148,2.952,150,2.709,151,4.159,154,6.085,156,4.159,157,3.098,158,3.098,160,4.695,162,4.498,163,4.108,176,3.927,296,1.854,415,2.198,684,4.596,758,3.892,814,1.831,1048,7.124,1258,7.056,1817,8.013,1862,4.741,1863,5.292,1864,4.741,1865,4.741,1866,5.292,1867,5.292,1868,7.105,1869,4.741,1870,5.292,1871,5.292,1872,5.292,1873,5.292,1874,5.292,1875,5.292,1876,5.292,1877,5.292]],["title/classes/SearchParamsDto.html",[0,0.111,860,3.586]],["body/classes/SearchParamsDto.html",[0,0.179,2,0.999,3,0.022,4,0.026,5,0.026,8,0.12,9,0.966,13,0.422,14,0.005,15,0.841,16,0.85,17,4.238,18,4.654,20,0.192,22,2.923,24,0.395,25,2.114,26,3.102,28,4.95,29,4.132,31,3.102,32,1.52,33,3.998,34,1.355,35,3.102,36,2.114,37,0.053,38,2.518,44,0.345,48,2.114,49,1.297,51,2.76,52,0.003,53,0.003,57,0.099,107,0.709,191,2.316,237,1.388,258,2.23,415,1.632,510,2.481,714,4.322,814,1.485,820,2.155,822,1.987,824,2.633,838,1.728,839,2.89,842,3.673,848,2.881,849,4.686,850,2.3,851,1.92,852,1.964,853,2.114,854,1.964,855,1.964,856,2.881,857,2.639,858,3.412,859,2.3,860,3.875,861,4.4,862,2.453,863,3.758,864,3.373,865,1.728,866,2.3,867,2.881,868,3.373,869,1.964,1878,3.05,1879,3.929]],["title/classes/SearchPostDto.html",[0,0.111,865,2.346]],["body/classes/SearchPostDto.html",[0,0.171,2,0.861,3,0.019,4,0.022,5,0.022,8,0.104,9,0.865,13,0.44,14,0.005,15,0.845,16,1.625,17,4.367,18,4.677,20,0.367,22,2.967,24,0.361,25,1.822,26,2.775,28,4.771,29,3.933,31,2.775,32,1.309,33,3.782,34,1.167,35,2.775,36,1.822,37,0.05,38,2.382,44,0.297,48,1.822,49,1.319,51,2.229,52,0.003,53,0.003,57,0.136,107,1.043,191,2.687,237,1.241,258,1.852,415,1.406,510,2.329,714,4.114,814,2.04,820,1.928,822,1.777,824,2.883,838,1.489,839,2.49,842,3.36,848,2.577,849,4.398,850,1.981,851,1.654,852,1.692,853,1.822,854,1.692,855,1.692,856,3.49,857,2.361,858,3.121,859,1.981,860,2.276,861,4.086,862,2.113,863,4.114,864,3.018,865,2.268,866,1.981,867,3.756,868,4.086,869,3.121,1860,2.628,1878,4.002,1880,3.385,1881,3.385,1882,3.385,1883,2.801,1884,3.385,1885,2.801,1886,2.801,1887,3.385]],["title/classes/SearchPostDto-1.html",[0,0.094,70,1.466,865,1.99]],["body/classes/SearchPostDto-1.html",[0,0.16,2,0.919,3,0.02,4,0.024,5,0.024,8,0.111,9,0.909,13,0.44,14,0.005,15,0.842,16,1.672,17,4.374,18,4.663,20,0.377,22,2.958,24,0.376,25,1.946,26,2.916,28,4.659,29,3.879,31,2.916,32,1.399,33,3.695,34,1.247,35,2.916,36,1.946,37,0.043,38,2.443,44,0.318,48,1.946,49,1.318,51,1.73,52,0.003,53,0.003,57,0.139,107,1.064,191,2.755,237,1.305,258,1.608,415,1.502,510,2.237,714,3.865,814,2.092,820,2.026,822,1.868,824,2.948,838,1.591,842,3.498,848,2.709,849,4.226,850,2.117,851,1.767,852,1.808,853,1.946,854,1.808,855,1.808,856,3.609,857,2.482,858,3.249,859,2.117,861,3.804,863,3.865,864,2.117,865,2.384,866,2.117,867,3.865,868,4.226,869,3.249,870,2.992,1860,2.807,1878,4.207,1883,2.992,1885,2.992,1886,2.992,1888,3.616,1889,3.616,1890,3.616,1891,3.616,1892,3.616]],["title/classes/SearchPostDto-2.html",[0,0.094,74,1.914,865,1.99]],["body/classes/SearchPostDto-2.html",[0,0.16,2,0.909,3,0.02,4,0.024,5,0.024,8,0.11,9,0.901,13,0.439,14,0.005,15,0.839,16,1.664,17,4.363,18,4.653,20,0.376,22,2.952,24,0.374,25,1.924,26,2.892,28,4.643,29,3.863,31,2.892,32,1.383,33,3.677,34,1.233,35,2.892,36,1.924,37,0.043,38,2.433,44,0.314,48,1.924,49,1.315,51,1.716,52,0.003,53,0.003,57,0.139,107,1.061,191,2.743,237,1.294,258,1.594,415,1.485,510,2.225,714,3.847,814,2.083,820,2.009,822,1.853,824,2.937,830,3.949,838,1.573,842,3.474,848,2.686,849,4.202,850,2.093,851,1.747,852,1.787,853,1.924,854,1.787,855,1.787,856,3.588,857,2.461,858,3.227,859,2.093,861,3.779,863,3.847,864,2.093,865,2.364,866,2.093,867,3.847,868,4.202,869,3.227,875,2.959,1860,2.776,1878,4.172,1883,2.959,1885,2.959,1886,2.959,1893,3.575,1894,3.575,1895,3.575,1896,3.575,1897,3.575]],["title/injectables/SearchService.html",[177,0.695,1258,3.741]],["body/injectables/SearchService.html",[0,0.074,3,0.02,4,0.024,5,0.024,8,0.247,9,0.9,10,1.422,13,0.456,14,0.005,20,0.35,22,1.998,24,0.373,37,0.024,39,2.815,40,2.112,44,0.566,49,1.201,51,1.139,52,0.003,53,0.003,57,0.132,60,0.72,63,0.853,64,0.432,67,1.405,68,0.623,70,1.157,78,2.243,88,1.074,90,1.688,106,1.01,107,0.793,110,0.732,162,4.396,163,2.771,177,0.7,178,1,230,1.364,237,0.859,251,1.139,257,3.383,258,1.592,337,2.888,398,2.399,571,4.034,814,1.982,822,1.23,824,1.25,853,1.921,857,1.634,1258,3.764,1310,2.089,1506,2.625,1729,4.808,1754,3.198,1755,3.198,1869,3.198,1898,3.569,1899,7.171,1900,5.366,1901,3.569,1902,7.171,1903,3.569,1904,5.366,1905,3.569,1906,5.366,1907,3.569,1908,5.366,1909,3.569,1910,5.366,1911,3.569,1912,3.569,1913,6.448,1914,3.569,1915,3.569,1916,3.569,1917,3.569,1918,3.569,1919,3.569,1920,7.171,1921,8.622,1922,7.171,1923,7.171,1924,3.569,1925,3.569,1926,5.366,1927,5.366,1928,3.569,1929,3.569,1930,3.569,1931,3.569,1932,3.569,1933,3.569,1934,3.569,1935,3.569,1936,3.569,1937,3.569,1938,3.569,1939,3.569]],["title/classes/SignUp.html",[0,0.111,247,3.221]],["body/classes/SignUp.html",[0,0.15,2,1.376,3,0.03,4,0.036,5,0.036,8,0.166,9,1.21,10,1.434,13,0.396,14,0.005,15,0.902,20,0.396,24,0.501,37,0.048,49,0.737,52,0.004,53,0.004,54,1.155,57,0.149,58,4.046,64,0.656,67,2.13,68,0.945,78,1.376,90,1.702,93,1.357,165,3.639,191,1.837,198,2.093,207,2.586,235,2.644,237,1.953,242,2.429,247,4.899,257,2.839,258,1.605,272,4.478,331,4.478,357,3.877,358,3.25,445,3.168,498,3.501,880,3.98,917,4.478,1250,4.478,1940,4.849,1941,5.412,1942,5.412,1943,5.412,1944,7.268,1945,4.849,1946,4.849,1947,3.796,1948,4.849,1949,4.849,1950,4.849,1951,4.849,1952,4.849,1953,6.713,1954,4.849,1955,4.849,1956,4.849]],["title/classes/Signup.html",[0,0.111,247,3.221]],["body/classes/Signup.html",[0,0.193,2,1.392,3,0.03,4,0.036,5,0.048,8,0.168,9,1.219,13,0.398,14,0.005,15,0.991,20,0.398,37,0.061,52,0.004,53,0.004,57,0.149,58,4.065,198,3.156,237,2.239,247,4.927,256,1.722,354,5.098,355,4.026,357,4.323,358,3.624,359,5.098,360,6.653,361,3.84,362,3.84,363,4.026,364,3.111,365,3.84,510,1.697,1957,5.474,1958,5.474,1959,5.474,1960,5.474,1961,5.474,1962,5.474]],["title/classes/SignupResponse.html",[0,0.111,359,3.741]],["body/classes/SignupResponse.html",[0,0.195,2,1.45,3,0.032,4,0.038,5,0.038,8,0.175,9,1.252,13,0.364,14,0.005,15,0.992,20,0.364,37,0.062,52,0.004,53,0.004,57,0.143,58,3.893,198,3.22,237,2.265,247,4.509,256,1.794,354,5.238,355,4.195,357,4.381,358,3.335,359,5.84,360,6.742,361,4.001,362,4.001,363,4.195,364,3.242,365,4.001,1963,5.703,1964,5.703]],["title/interfaces/SwaggerConfig.html",[312,1.25,821,2.346]],["body/interfaces/SwaggerConfig.html",[3,0.036,4,0.043,5,0.043,8,0.198,9,1.359,13,0.452,14,0.005,15,0.996,37,0.043,52,0.004,53,0.004,57,0.111,116,3.316,143,3.912,312,1.518,480,2.463,510,2.955,748,2.463,816,4.044,817,3.912,818,4.044,819,4.044,821,3.564,822,3.193,823,4.984,824,3.244,1965,5.804]],["title/interfaces/SwaggerConfig-1.html",[70,1.466,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-1.html",[3,0.036,4,0.043,5,0.043,8,0.198,9,1.356,13,0.452,14,0.005,15,0.995,37,0.043,52,0.004,53,0.004,57,0.111,132,3.154,133,2.957,143,3.899,312,1.513,480,2.455,510,2.952,748,2.455,816,4.03,817,3.899,818,4.03,819,4.03,821,3.556,822,3.189,823,4.978,824,3.24,1965,5.785]],["title/interfaces/SwaggerConfig-2.html",[74,1.914,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-2.html",[3,0.035,4,0.041,5,0.041,8,0.19,9,1.322,13,0.459,14,0.005,15,1.002,37,0.052,44,0.545,52,0.004,53,0.004,57,0.107,237,1.494,312,1.848,480,2.359,510,2.826,813,5.189,814,1.599,815,5.559,820,2.32,821,3.468,822,3.143,823,4.906,824,3.193]],["title/interfaces/SwaggerConfig-3.html",[98,2.373,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-3.html",[3,0.034,4,0.041,5,0.041,8,0.189,9,1.319,13,0.459,14,0.005,15,1.001,37,0.052,44,0.543,52,0.004,53,0.004,57,0.106,237,1.489,312,1.844,480,2.352,510,2.822,813,5.185,820,2.312,821,3.461,822,3.139,823,4.901,824,3.19,825,3.515,826,3.515,827,5.541]],["title/interfaces/SwaggerConfig-4.html",[112,2.926,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-4.html",[3,0.035,4,0.041,5,0.041,8,0.19,9,1.322,13,0.459,14,0.005,15,1.002,37,0.052,44,0.545,52,0.004,53,0.004,57,0.107,237,1.494,312,1.848,480,2.359,510,2.826,813,5.189,814,1.599,820,2.32,821,3.468,822,3.143,823,4.906,824,3.193,828,5.559]],["title/interfaces/SwaggerConfig-5.html",[114,3.041,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-5.html",[3,0.036,4,0.043,5,0.043,8,0.199,9,1.361,13,0.453,14,0.005,15,0.996,37,0.043,52,0.004,53,0.004,57,0.112,143,3.925,312,1.524,480,2.472,510,2.958,748,2.472,816,4.058,817,3.925,818,4.058,819,4.058,821,3.571,822,3.197,823,4.99,824,3.248,1966,6.5]],["title/interfaces/SwaggerConfig-6.html",[115,4.052,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-6.html",[3,0.034,4,0.041,5,0.041,8,0.189,9,1.319,13,0.459,14,0.005,15,1.001,37,0.052,44,0.543,52,0.004,53,0.004,57,0.106,237,1.489,276,2.668,277,2.668,312,1.844,480,2.352,510,2.822,813,5.185,820,2.312,821,3.461,822,3.139,823,4.901,824,3.19,829,5.541]],["title/interfaces/SwaggerConfig-7.html",[131,4.052,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-7.html",[3,0.034,4,0.041,5,0.041,8,0.189,9,1.319,13,0.459,14,0.005,15,1.001,37,0.052,44,0.543,52,0.004,53,0.004,57,0.106,237,1.489,312,1.844,480,2.352,510,2.822,813,5.185,814,1.594,820,2.312,821,3.461,822,3.139,823,4.901,824,3.19,830,3.021,831,5.541]],["title/interfaces/SwaggerConfig-8.html",[134,4.052,312,1.06,821,1.99]],["body/interfaces/SwaggerConfig-8.html",[3,0.036,4,0.043,5,0.043,6,3.327,8,0.199,9,1.361,13,0.453,14,0.005,15,0.996,37,0.043,52,0.004,53,0.004,143,3.925,312,1.524,480,2.472,510,2.958,748,2.472,816,4.058,817,3.925,818,4.058,819,4.058,821,3.571,822,3.197,823,4.99,824,3.248,1967,6.5]],["title/entities/Tag.html",[516,2.549,857,2.443]],["body/entities/Tag.html",[0,0.14,3,0.027,4,0.032,5,0.032,8,0.15,9,1.128,13,0.425,14,0.005,15,0.655,16,1.881,20,0.425,22,2.085,24,0.446,32,1.89,37,0.032,38,2.025,49,1.362,51,2.458,52,0.003,53,0.003,57,0.154,258,2.86,276,3.879,277,3.879,423,2.068,428,2.029,516,3.216,518,2.442,520,4.648,521,4.648,522,3.793,524,5.178,525,3.05,527,4.805,532,3.05,534,3.53,535,4.855,536,4.201,537,5.224,540,4.201,571,4.038,574,4.042,576,5.568,577,5.568,578,5.568,857,3.525,1968,4.885,1969,4.885,1970,4.885,1971,6.729,1972,4.885,1973,4.885,1974,4.885]],["title/controllers/TestController.html",[54,1.138,1975,3.45]],["body/controllers/TestController.html",[0,0.114,3,0.031,4,0.036,5,0.036,8,0.168,14,0.005,16,1.575,20,0.355,24,0.473,34,1.893,37,0.036,49,1.267,52,0.004,53,0.004,54,1.172,56,1.629,57,0.14,60,0.977,63,0.963,64,0.665,93,2.049,110,1.126,118,2.161,139,3.64,200,2.324,205,2.88,222,2.678,233,2.678,291,3.458,501,5.355,551,3.025,616,4.545,735,2.81,741,5.447,765,4.896,814,2.106,1207,3.727,1975,4.71,1976,5.49,1977,4.543,1978,6.755,1979,4.543,1980,5.49,1981,4.262,1982,4.262,1983,5.49,1984,4.262,1985,4.543,1986,5.653,1987,5.653,1988,5.653,1989,5.653,1990,5.653]],["title/controllers/TestController-1.html",[54,0.965,70,1.466,1975,2.926]],["body/controllers/TestController-1.html",[0,0.114,3,0.031,4,0.036,5,0.036,8,0.168,14,0.005,16,1.575,20,0.355,24,0.473,34,1.893,37,0.036,49,1.267,52,0.004,53,0.004,54,1.172,56,1.629,57,0.14,60,0.977,63,0.963,64,0.665,93,2.049,110,1.126,118,2.161,139,3.64,200,2.324,205,2.88,222,2.678,233,2.678,291,3.458,501,5.355,551,3.025,616,4.545,735,2.81,741,5.447,765,4.896,814,2.106,1207,3.727,1975,4.71,1977,4.543,1978,6.755,1979,4.543,1981,4.262,1982,4.262,1984,4.262,1985,4.543,1986,5.653,1987,5.653,1988,5.653,1989,5.653,1990,5.653,1991,5.49,1992,5.49,1993,5.49]],["title/controllers/TestController-2.html",[54,0.965,74,1.914,1975,2.926]],["body/controllers/TestController-2.html",[0,0.113,3,0.03,4,0.036,5,0.036,8,0.167,14,0.005,16,1.566,20,0.353,24,0.471,34,1.877,37,0.036,49,1.264,52,0.004,53,0.004,54,1.162,56,1.615,57,0.14,60,0.972,63,0.958,64,0.659,93,2.04,110,1.116,118,2.142,139,3.619,200,2.304,205,2.855,222,2.662,233,2.662,276,3.51,277,3.51,291,3.443,501,5.325,551,3.008,616,4.519,735,2.786,741,5.546,765,4.868,1207,3.706,1975,4.683,1978,6.732,1981,4.225,1982,4.225,1984,4.225,1986,5.621,1987,4.225,1988,5.621,1989,5.621,1990,5.621,1994,5.443,1995,5.443,1996,5.443,1997,5.443,1998,5.443,1999,5.443]],["title/controllers/TestController-3.html",[54,0.965,98,2.373,1975,2.926]],["body/controllers/TestController-3.html",[0,0.113,3,0.03,4,0.036,5,0.036,8,0.167,14,0.005,16,1.566,20,0.353,24,0.471,34,1.877,37,0.036,49,1.264,52,0.004,53,0.004,54,1.162,56,1.615,57,0.14,60,0.972,63,0.958,64,0.659,93,2.04,110,1.116,118,2.142,139,3.619,200,2.304,205,2.855,222,2.662,233,2.662,291,3.443,501,5.325,551,3.008,616,4.519,735,2.786,741,5.434,765,4.868,814,2.097,830,3.975,1207,3.706,1975,4.683,1977,4.504,1978,6.732,1979,4.504,1981,4.225,1982,4.225,1984,4.225,1985,4.504,1986,5.621,1987,5.621,1988,5.621,1989,5.621,1990,5.621,2000,5.443,2001,5.443,2002,5.443]],["title/injectables/TestService.html",[177,0.695,2003,4.414]],["body/injectables/TestService.html",[0,0.115,3,0.031,4,0.036,5,0.036,8,0.17,9,1.228,10,2.174,13,0.27,14,0.005,15,0.849,20,0.401,24,0.526,37,0.036,44,0.486,49,1.117,52,0.004,53,0.004,57,0.15,60,0.983,63,0.733,64,0.671,68,0.967,88,2.47,93,1.837,106,0.867,107,0.681,110,1.682,167,2.98,177,0.955,178,1.552,200,2.344,230,1.408,237,1.763,256,1.742,276,3.767,277,3.767,291,2.344,325,3.158,392,4.582,423,3.1,424,3.061,426,3.457,427,3.242,428,2.301,436,3.457,448,4.073,2003,6.06,2004,5.537,2005,7.323,2006,7.323,2007,7.323,2008,5.537,2009,7.323,2010,4.962,2011,4.962]],["title/injectables/TypeOrmConfigService.html",[170,4.414,177,0.695]],["body/injectables/TypeOrmConfigService.html",[0,0.115,3,0.031,4,0.037,5,0.037,8,0.171,13,0.359,14,0.005,20,0.359,24,0.476,37,0.037,38,2.213,44,0.489,52,0.004,53,0.004,57,0.141,58,3.849,60,0.987,63,0.737,64,0.675,67,2.192,68,0.973,106,0.872,107,0.685,110,1.142,162,4.902,163,4.324,167,2.998,170,6.083,177,0.959,178,1.561,222,2.048,296,1.951,357,2.662,358,2.231,518,2.784,714,2.784,730,3.166,739,2.662,751,2.605,1011,7.373,1018,4.991,1019,4.991,1310,3.26,1378,4.324,2012,5.57,2013,8.751,2014,5.57,2015,5.57,2016,7.351,2017,5.57,2018,5.57,2019,5.57,2020,5.57,2021,5.57,2022,5.57,2023,7.351,2024,5.57,2025,5.57,2026,5.57,2027,5.57,2028,5.57,2029,5.57,2030,5.57,2031,5.57,2032,5.57,2033,5.57]],["title/injectables/UploadAzureService.html",[177,0.695,2034,4.779]],["body/injectables/UploadAzureService.html",[0,0.099,3,0.027,4,0.032,5,0.054,8,0.147,10,1.268,13,0.372,14,0.005,15,0.891,20,0.372,24,0.476,37,0.032,44,0.669,49,1.037,52,0.003,53,0.003,57,0.141,60,0.891,63,0.878,64,0.58,68,1.159,78,1.936,88,1.441,90,1.506,106,1.193,107,0.936,110,1.36,177,0.865,178,1.341,230,2.272,251,1.528,825,4.674,826,4.674,909,7.738,914,5.12,922,4.289,1097,6.804,1104,5.945,1105,6.302,1108,4.289,1125,3.521,1133,5.491,2034,5.945,2035,4.787,2036,5.945,2037,6.635,2038,4.289,2039,4.787,2040,5.945,2041,5.945,2042,4.787,2043,6.635,2044,4.787,2045,7.615,2046,4.289,2047,4.787,2048,4.289,2049,4.289,2050,3.961,2051,4.787,2052,4.787,2053,4.787,2054,4.787,2055,4.787,2056,4.787,2057,4.787,2058,4.787,2059,4.787,2060,4.787,2061,4.787,2062,4.787,2063,4.787,2064,4.787]],["title/controllers/UploadController.html",[54,1.138,2065,4.779]],["body/controllers/UploadController.html",[0,0.091,3,0.024,4,0.029,5,0.057,8,0.134,13,0.305,14,0.005,16,1.35,20,0.305,24,0.503,34,1.514,37,0.029,38,1.879,44,0.548,49,1.183,52,0.003,53,0.003,54,0.937,56,1.302,57,0.125,60,0.838,63,0.826,64,0.532,68,1.09,78,2.21,93,1.101,106,0.978,107,0.768,108,2.643,118,1.728,119,2.363,125,2.427,207,2.098,230,1.848,251,1.994,257,2.303,258,1.302,285,4.052,446,3.771,447,3.655,451,2.651,452,2.495,825,4.131,826,4.131,1111,5.595,1125,5.345,1131,4.848,1658,5.345,2050,5.167,2065,5.595,2066,4.39,2067,6.244,2068,4.39,2069,6.244,2070,6.244,2071,6.244,2072,4.39,2073,4.39,2074,6.244,2075,4.39,2076,7.092,2077,3.934,2078,3.934,2079,3.934,2080,3.934,2081,3.934,2082,6.511,2083,3.934,2084,6.511,2085,3.934,2086,4.39,2087,5.595,2088,5.595,2089,6.244,2090,6.244,2091,6.244,2092,5.595,2093,4.39,2094,6.244,2095,6.244,2096,4.39,2097,4.39,2098,4.39,2099,4.39]],["title/controllers/UploadProcessController.html",[54,1.138,2100,4.779]],["body/controllers/UploadProcessController.html",[0,0.089,3,0.024,4,0.028,5,0.062,8,0.131,9,0.718,13,0.35,14,0.005,15,0.597,16,1.327,20,0.299,24,0.48,34,1.476,37,0.04,38,1.846,44,0.376,49,1.174,52,0.003,53,0.003,54,0.914,56,1.27,57,0.123,60,0.823,63,0.812,64,0.519,68,1.071,78,2.191,93,1.538,96,2.673,106,0.671,107,0.527,108,1.812,118,1.685,119,2.304,125,2.367,197,3.425,199,3.004,207,2.046,217,2.879,230,1.56,233,1.575,251,1.958,258,2.126,330,3.836,432,6.476,446,3.704,447,3.59,451,2.586,452,2.434,825,4.448,826,4.448,914,2.879,1105,5.076,1125,5.271,1131,4.762,1436,2.879,1589,3.149,1658,4.511,2048,3.836,2049,3.836,2050,3.543,2076,3.836,2077,5.496,2078,3.836,2079,3.836,2080,3.836,2081,3.836,2082,3.836,2083,3.836,2084,5.496,2085,3.836,2087,5.496,2088,3.836,2092,3.836,2100,5.496,2101,4.282,2102,4.282,2103,4.282,2104,7.167,2105,4.282,2106,4.282,2107,4.282,2108,6.134,2109,4.282,2110,6.134,2111,6.134,2112,6.134,2113,4.282,2114,4.282,2115,4.282,2116,4.282,2117,4.282,2118,4.282,2119,4.282,2120,3.836,2121,4.282,2122,4.282,2123,6.134]],["title/injectables/UploadService.html",[177,0.695,2124,4.779]],["body/injectables/UploadService.html",[0,0.122,3,0.033,4,0.039,5,0.039,8,0.18,10,1.553,13,0.371,14,0.005,15,0.82,20,0.371,24,0.488,37,0.039,44,0.668,52,0.004,53,0.004,57,0.145,60,1.02,63,0.775,64,0.71,68,1.024,78,2.145,88,1.764,90,1.844,106,1.191,107,0.935,110,1.558,177,0.991,178,1.642,251,1.871,825,4.794,826,4.794,914,5.671,1122,7.385,1125,4.311,1131,6.929,1133,4.85,2036,6.81,2038,5.251,2040,6.81,2041,6.81,2046,5.251,2124,6.81,2125,5.861,2126,5.861,2127,5.861,2128,5.861,2129,5.861]],["title/entities/User.html",[256,1.678,516,2.549]],["body/entities/User.html",[0,0.128,3,0.024,4,0.028,5,0.028,8,0.132,9,1.035,13,0.434,14,0.005,15,0.764,16,1.925,20,0.434,22,1.913,24,0.455,32,1.671,37,0.028,49,1.373,51,2.3,52,0.003,53,0.003,57,0.156,107,0.759,237,1.734,256,2.266,258,2.64,276,3.926,277,3.926,358,2.886,423,1.829,428,1.795,516,2.95,518,2.16,520,4.35,521,4.35,524,4.906,525,2.697,527,4.496,532,2.697,534,3.779,535,4.866,536,3.854,538,5.592,540,3.854,541,6.243,853,2.325,1076,3.354,1323,4.496,1533,2.697,1598,2.905,1612,5.961,1615,5.109,2130,3.871,2131,5.531,2132,3.871,2133,3.871,2134,5.531,2135,3.871,2136,3.871,2137,3.871,2138,3.871,2139,3.871,2140,5.531,2141,3.871,2142,3.871,2143,3.871,2144,5.531]],["title/classes/User-1.html",[0,0.094,70,1.466,256,1.423]],["body/classes/User-1.html",[0,0.108,2,1.323,3,0.029,4,0.034,5,0.034,6,2.664,8,0.159,9,1.178,13,0.465,14,0.005,15,0.927,16,1.842,20,0.416,24,0.301,37,0.034,38,2.115,44,0.699,52,0.004,53,0.004,57,0.153,71,4.286,195,5.552,237,1.915,256,2.21,313,3.358,358,3.187,535,5.206,691,6.175,714,4.762,1584,6.612,1598,4.724,2145,5.205,2146,6.582,2147,9.526,2148,5.205,2149,7.026,2150,5.205,2151,5.205,2152,5.205,2153,6.296,2154,5.205,2155,7.954,2156,5.205,2157,4.307,2158,4.307]],["title/classes/User-2.html",[0,0.094,74,1.914,256,1.423]],["body/classes/User-2.html",[0,0.128,2,1.099,3,0.024,4,0.028,5,0.028,8,0.132,9,1.035,13,0.434,14,0.005,15,0.764,16,1.925,20,0.434,22,1.913,24,0.455,32,1.671,37,0.028,49,1.373,51,2.3,52,0.003,53,0.003,57,0.156,107,0.759,237,1.734,256,2.266,258,2.64,276,3.926,277,3.926,358,2.886,423,1.829,428,1.795,516,2.95,520,4.35,521,4.35,524,4.906,525,2.697,527,4.496,532,2.697,534,3.779,535,4.866,536,3.854,538,5.592,540,3.854,541,6.243,853,2.325,1076,3.354,1323,4.496,1533,2.697,1598,2.905,1612,5.961,1615,5.109,2130,3.871,2131,5.531,2132,3.871,2133,3.871,2134,5.531,2135,3.871,2136,3.871,2137,3.871,2138,3.871,2139,3.871,2140,5.531,2141,3.871,2142,3.871,2143,3.871,2144,5.531]],["title/controllers/UserController.html",[54,1.138,1947,3.741]],["body/controllers/UserController.html",[0,0.15,3,0.03,4,0.036,5,0.036,8,0.166,10,1.434,13,0.264,14,0.005,15,0.789,16,1.17,20,0.264,24,0.501,37,0.048,44,0.475,49,1.105,52,0.004,53,0.004,54,1.155,56,1.605,57,0.124,58,3.373,60,0.968,63,0.716,64,0.656,67,2.13,68,0.945,78,2.062,90,1.702,93,1.357,106,0.848,107,0.665,118,2.13,165,3.639,191,1.837,198,2.093,207,2.586,235,2.644,237,1.303,242,2.429,247,5.597,251,1.728,257,2.839,258,1.605,272,5.968,331,4.478,357,2.586,358,2.168,362,3.796,445,3.168,498,3.501,880,3.98,917,4.478,1250,5.968,1940,4.849,1944,7.268,1945,4.849,1946,4.849,1947,5.059,1948,4.849,1949,4.849,1950,4.849,1951,4.849,1952,4.849,1953,6.713,1954,4.849,1955,4.849,1956,4.849,2159,5.412,2160,5.412]],["title/controllers/UserController-1.html",[54,0.965,70,1.466,1947,3.173]],["body/controllers/UserController-1.html",[0,0.101,3,0.027,4,0.032,5,0.032,8,0.148,13,0.237,14,0.005,16,1.048,20,0.237,24,0.532,34,1.671,37,0.032,38,1.459,44,0.426,49,1.044,52,0.003,53,0.003,54,1.035,56,1.438,57,0.115,60,0.898,63,0.641,64,0.587,67,1.908,68,0.847,78,1.949,90,2.105,93,1.216,106,0.759,107,0.596,118,1.908,119,2.609,125,2.68,132,3.746,133,3.066,139,2.423,191,2.806,195,3.026,197,3.664,198,2.589,199,3.401,200,2.052,201,3.26,202,3.566,203,3.764,204,4.923,205,2.543,206,4.012,207,2.317,208,4.042,209,3.566,210,3.566,211,3.566,215,2.755,217,3.26,218,3.026,222,1.783,227,4.012,228,4.012,230,1.702,233,1.783,235,2.369,236,4.923,237,1.612,239,4.042,242,2.175,243,4.012,253,6.299,257,3.511,258,1.438,358,2.682,432,5.539,448,3.566,472,4.5,1947,4.695,2161,4.848,2162,4.848,2163,4.848,2164,4.848,2165,4.848,2166,4.848,2167,4.848,2168,5.997,2169,4.848,2170,4.848]],["title/classes/UserCreatedEvent.html",[0,0.111,923,3.741]],["body/classes/UserCreatedEvent.html",[0,0.137,2,1.681,3,0.037,4,0.044,5,0.044,8,0.203,9,1.376,10,2.364,13,0.401,14,0.005,15,0.907,20,0.401,37,0.044,44,0.581,49,1.215,52,0.004,53,0.004,57,0.153,58,4.173,106,1.036,107,0.813,110,1.682,364,5.302,923,5.756,2171,8.921,2172,6.613,2173,6.613,2174,6.613,2175,6.613]],["title/classes/UserCreatedHandler.html",[0,0.111,2176,4.779]],["body/classes/UserCreatedHandler.html",[0,0.133,2,1.636,3,0.036,4,0.042,5,0.042,8,0.197,13,0.314,14,0.005,20,0.314,24,0.467,37,0.042,44,0.565,52,0.004,53,0.004,57,0.138,58,3.773,60,1.083,63,0.851,106,1.008,107,0.791,165,4.326,296,2.825,551,2.673,923,6.481,925,4.995,942,4.995,1091,6.262,2176,7.228,2177,8.066,2178,6.434,2179,8.811,2180,8.066,2181,6.434,2182,6.434,2183,6.434,2184,6.434,2185,6.434,2186,6.434]],["title/classes/UserDTO.html",[0,0.111,253,3.586]],["body/classes/UserDTO.html",[0,0.15,2,1.388,3,0.03,4,0.036,5,0.036,8,0.167,9,1.216,13,0.424,14,0.005,15,0.937,16,1.877,17,4.148,20,0.424,24,0.42,29,4.318,32,2.111,33,4.318,34,1.882,37,0.036,52,0.004,53,0.004,57,0.155,132,4.415,133,4.139,237,2.09,239,5.242,253,4.877,358,3.478,510,2.691,848,3.626,851,2.667,858,3.626,2168,7.778,2187,5.458,2188,5.458,2189,5.458,2190,5.458,2191,5.458,2192,5.458,2193,5.458,2194,5.458,2195,5.458,2196,5.458]],["title/classes/UserDto.html",[0,0.111,253,3.586]],["body/classes/UserDto.html",[0,0.149,2,1.364,3,0.03,4,0.035,5,0.035,8,0.164,9,1.203,10,2.641,13,0.421,14,0.005,15,0.899,16,1.865,20,0.421,24,0.311,32,2.076,37,0.035,44,0.71,52,0.004,53,0.004,57,0.154,71,4.203,85,2.594,237,1.945,253,4.822,358,3.236,471,4.166,534,4.85,848,3.585,851,2.622,2146,7.938,2157,7.135,2158,7.135,2197,4.808,2198,5.366,2199,5.366,2200,5.366,2201,5.366,2202,5.366,2203,5.366,2204,5.366,2205,5.366,2206,5.366,2207,5.366]],["title/classes/UserParam.html",[0,0.111,441,3.586]],["body/classes/UserParam.html",[0,0.173,2,1.463,3,0.032,4,0.038,5,0.038,8,0.176,9,1.26,13,0.281,14,0.005,15,0.894,16,1.245,17,4.393,18,4.492,20,0.281,24,0.435,29,3.995,32,2.226,33,2.75,34,1.984,37,0.055,38,2.667,44,0.506,49,1.284,51,2.935,52,0.004,53,0.004,57,0.129,237,1.808,256,2.363,357,2.75,358,3.009,423,2.436,436,4.689,441,5.05,534,3.94,825,4.269,826,4.269,848,3.755,851,2.812,858,4.18,888,5.156,892,5.831,2208,5.156,2209,5.755]],["title/classes/UserParam-1.html",[0,0.094,70,1.466,441,3.041]],["body/classes/UserParam-1.html",[0,0.173,2,1.463,3,0.032,4,0.038,5,0.038,8,0.176,9,1.26,13,0.281,14,0.005,15,0.894,16,1.245,17,4.393,18,4.492,20,0.281,24,0.435,29,3.995,32,2.226,33,2.75,34,1.984,37,0.055,38,2.667,44,0.506,49,1.284,51,2.935,52,0.004,53,0.004,57,0.129,237,1.808,256,2.363,276,3.24,277,3.24,357,2.75,358,3.009,423,2.436,436,4.689,441,5.05,534,3.94,848,3.755,851,2.812,858,4.18,892,5.831,893,5.156,2208,5.156,2210,5.755]],["title/classes/UserRepository.html",[0,0.111,919,3.923]],["body/classes/UserRepository.html",[0,0.15,2,1.834,3,0.04,4,0.048,5,0.048,14,0.005,24,0.501,37,0.048,52,0.004,53,0.004,57,0.124,58,3.374,313,4.135,427,5.425,428,2.997,919,6.364,927,5.305,2211,7.213,2212,7.213,2213,7.213,2214,7.213]],["title/injectables/UserService.html",[177,0.695,376,3.741]],["body/injectables/UserService.html",[0,0.07,3,0.019,4,0.022,5,0.022,8,0.103,9,0.863,10,1.848,13,0.366,14,0.005,15,0.845,20,0.402,24,0.458,37,0.022,44,0.659,49,1.284,51,1.644,52,0.003,53,0.003,57,0.146,60,0.691,63,0.993,64,0.409,68,1.381,78,2.322,88,2.26,90,2.488,93,1.883,106,1.176,107,0.923,110,1.056,167,1.819,177,0.671,178,0.947,195,2.109,200,1.43,222,1.243,230,2.091,233,2.294,235,1.651,237,1.808,242,1.516,251,2.227,256,2.873,276,3.658,277,3.658,291,1.43,325,2.523,358,1.354,376,3.612,392,2.796,395,2.926,400,4.26,415,1.404,423,2.179,424,1.868,426,2.109,427,4.083,428,1.404,436,4.354,438,4.613,448,2.485,498,2.186,927,2.485,1235,3.028,1271,2.272,1274,3.462,1275,3.462,1688,3.997,1689,3.997,2003,6.806,2010,3.028,2011,3.028,2215,3.379,2216,6.974,2217,5.148,2218,5.148,2219,3.379,2220,5.148,2221,5.148,2222,3.379,2223,5.148,2224,3.379,2225,3.379,2226,5.148,2227,3.379,2228,5.148,2229,3.379,2230,5.148,2231,3.379,2232,3.379,2233,3.379,2234,3.379,2235,3.379,2236,3.379,2237,5.148,2238,3.379,2239,5.148,2240,3.379,2241,3.379,2242,3.379,2243,3.379,2244,3.379,2245,3.379,2246,3.379]],["title/entities/Users.html",[516,2.549,927,3.923]],["body/entities/Users.html",[0,0.108,3,0.029,4,0.034,5,0.034,8,0.159,9,1.178,13,0.416,14,0.005,15,0.891,16,1.842,20,0.416,24,0.301,37,0.034,38,2.115,44,0.837,52,0.004,53,0.004,57,0.153,58,4.159,217,3.5,237,2.141,357,4.25,358,3.563,364,5.055,428,2.162,516,2.487,518,2.602,535,3.047,914,4.724,927,5.168,1076,5.455,1164,6.296,1533,5.947,2247,5.205,2248,7.954,2249,7.026,2250,5.205,2251,7.026,2252,5.205,2253,5.205,2254,6.296,2255,5.205,2256,5.205,2257,5.205,2258,5.205,2259,5.205,2260,7.954]],["title/modules/UsersModule.html",[148,2.216,155,3.741]],["body/modules/UsersModule.html",[0,0.116,3,0.031,4,0.037,5,0.037,14,0.005,24,0.56,37,0.058,52,0.004,53,0.004,56,2.185,57,0.096,58,2.613,64,0.677,148,3.06,150,2.86,151,4.312,155,6.56,156,4.312,157,3.27,158,3.27,160,3.27,164,6.6,165,3.756,166,4.337,167,3.006,176,4.071,230,2.095,897,6.095,919,5.417,923,5.167,925,4.337,1947,5.781,2261,5.005,2262,5.005,2263,7.26,2264,5.586,2265,5.586,2266,5.586,2267,5.586,2268,5.005,2269,5.586,2270,5.586,2271,7.365,2272,7.365,2273,7.365,2274,5.586]],["title/injectables/UsersSagas.html",[177,0.695,2263,4.141]],["body/injectables/UsersSagas.html",[0,0.118,3,0.032,4,0.038,5,0.038,8,0.175,9,1.252,14,0.005,16,1.233,20,0.364,24,0.531,37,0.038,52,0.004,53,0.004,57,0.143,58,3.893,64,0.691,68,1.304,110,1.707,165,3.835,177,0.974,178,1.598,218,3.56,237,1.373,397,2.919,423,2.414,424,3.152,918,5.11,923,4.001,925,4.428,1032,5.597,1036,3.835,1090,4.001,1092,5.11,1485,4.195,2263,5.797,2268,5.11,2275,5.703,2276,8.324,2277,5.703,2278,8.832,2279,5.703,2280,5.703,2281,5.703,2282,5.703,2283,5.703,2284,7.466,2285,5.703,2286,5.703,2287,5.703,2288,5.703,2289,5.703]],["title/injectables/UsersService.html",[177,0.695,373,3.741]],["body/injectables/UsersService.html",[0,0.102,3,0.027,4,0.032,5,0.032,8,0.151,10,1.304,13,0.377,14,0.005,15,0.752,20,0.406,22,2.395,24,0.482,37,0.032,44,0.731,51,2.16,52,0.003,53,0.003,57,0.15,60,0.908,63,1.022,64,0.596,68,1.35,71,4.08,78,2.426,82,2.798,88,1.482,90,2.431,106,1.303,107,1.023,110,1.009,177,0.882,178,1.379,198,3.486,237,1.629,253,5.595,256,2.431,368,4.085,373,4.745,381,6.061,448,3.621,919,4.975,1534,3.621,1794,4.411,2290,4.923,2291,6.764,2292,6.764,2293,4.923,2294,4.923,2295,4.923,2296,6.764,2297,4.923,2298,6.764,2299,4.923,2300,4.923,2301,4.923,2302,4.923,2303,4.923,2304,6.764]],["title/injectables/ValidateInputPipe.html",[177,0.695,2305,4.779]],["body/injectables/ValidateInputPipe.html",[0,0.116,3,0.031,4,0.037,5,0.037,8,0.172,13,0.274,14,0.005,20,0.361,24,0.325,37,0.037,44,0.649,49,1.125,52,0.004,53,0.004,57,0.142,60,0.992,63,0.978,64,0.681,68,1.291,71,3.865,78,2.101,88,2.487,90,1.768,93,1.409,106,1.158,107,0.909,177,0.964,178,1.574,199,5.187,233,2.066,235,2.745,242,2.522,251,1.794,313,3.533,424,3.106,447,4.838,452,4.203,1234,5.035,1953,4.65,2305,6.625,2306,5.619,2307,7.394,2308,7.394,2309,5.619,2310,6.625,2311,7.868,2312,7.868,2313,5.619,2314,5.619,2315,5.619,2316,7.394,2317,5.619,2318,5.619,2319,5.619]],["title/injectables/ValidateObjectId.html",[177,0.695,638,4.414]],["body/injectables/ValidateObjectId.html",[0,0.128,3,0.034,4,0.041,5,0.041,8,0.189,13,0.302,14,0.005,15,0.842,20,0.302,24,0.455,37,0.041,44,0.543,51,1.975,52,0.004,53,0.004,57,0.135,60,1.056,63,0.818,64,0.749,68,1.08,78,2.2,93,1.551,106,0.969,107,0.76,177,1.026,178,1.733,199,4.338,230,1.572,233,2.274,251,1.975,296,2.166,424,4.348,452,4.472,598,6.107,638,6.51,2120,5.541,2310,7.049,2311,7.752,2312,8.159,2320,6.184,2321,6.184,2322,7.867,2323,7.867,2324,6.184]],["title/miscellaneous/enumerations.html",[2325,3.173,2326,5.714]],["body/miscellaneous/enumerations.html",[3,0.049,8,0.139,14,0.005,52,0.003,53,0.003,57,0.169,71,2.989,85,2.676,116,3.271,132,4.292,133,4.023,222,3.23,239,5.305,256,2.527,424,5.693,460,4.065,472,5.906,603,4.065,728,4.855,733,3.699,735,4.496,745,5.484,746,5.484,1376,6.82,1377,6.82,1395,5.744,1806,4.065,2146,5.288,2157,5.288,2158,5.288,2197,4.065,2325,3.182,2326,4.065,2327,4.536,2328,5.726,2329,4.065,2330,4.536,2331,4.536,2332,4.536,2333,5.726,2334,7.398,2335,4.065]],["title/miscellaneous/functions.html",[2325,3.173,2336,5.714]],["body/miscellaneous/functions.html",[6,2.136,8,0.079,13,0.39,14,0.005,38,1.579,44,0.751,52,0.002,53,0.002,57,0.176,58,1.952,63,1.13,71,1.952,75,4.224,76,2.806,99,3.07,106,1.338,107,1.051,113,4.224,116,3.616,132,3.452,133,3.236,276,2.598,277,2.598,424,4.415,510,2.648,597,8.23,714,2.623,728,2.9,733,3.532,734,4.41,741,3.072,749,6.201,766,7.131,814,2.202,817,4.823,825,3.423,826,3.423,830,2.942,976,5.874,1418,5.485,2325,1.814,2328,3.74,2329,2.317,2333,3.74,2335,2.317,2336,2.317,2337,9.993,2338,4.174,2339,2.586,2340,2.586,2341,2.586,2342,2.586,2343,2.586,2344,2.586,2345,2.586,2346,6.022,2347,9.186,2348,4.174,2349,2.586,2350,2.586,2351,2.586,2352,2.586,2353,2.586,2354,2.586,2355,2.586,2356,4.174,2357,2.586,2358,2.586,2359,2.586,2360,2.586,2361,2.586,2362,2.586,2363,2.586,2364,4.174,2365,4.174,2366,4.174,2367,7.987,2368,9.186,2369,7.987,2370,9.186,2371,7.987,2372,2.586,2373,2.586,2374,2.586,2375,2.586,2376,2.586,2377,2.586,2378,2.586,2379,5.247,2380,5.247,2381,5.247]],["title/index.html",[8,0.139,2382,4.523,2383,4.523]],["body/index.html",[6,3.624,14,0.005,52,0.004,53,0.004,427,4.144,510,2.194,727,4.419,736,4.76,830,3.459,1066,6.343,2384,8.555,2385,7.079,2386,7.079,2387,7.079,2388,7.079,2389,7.079,2390,8.555,2391,7.079,2392,7.079,2393,7.079,2394,7.079,2395,7.079,2396,7.079,2397,7.079,2398,7.079,2399,7.079,2400,7.079,2401,7.079,2402,8.555,2403,8.555,2404,7.079,2405,6.343]],["title/modules.html",[150,3.656]],["body/modules.html",[14,0.003,52,0.003,53,0.003,149,7.654,150,2.263,154,4.719,155,4.402,338,3.432,542,3.432,668,3.432,672,5.365,673,5.365,1004,5.84,1044,6.51,1047,3.251,1048,3.251,1474,7.595,1775,3.432,2406,10.327,2407,10.327,2408,10.44,2409,9.443,2410,9.443]],["title/overview.html",[2411,6.4]],["body/overview.html",[2,0.805,14,0.005,52,0.002,53,0.002,56,0.939,65,4.018,98,1.661,141,2.837,149,8.076,150,1.621,151,2.867,152,2.837,153,2.837,154,5.733,155,6.108,156,2.867,157,1.853,158,1.853,178,0.887,208,5.258,215,3.404,325,3.297,338,6.881,339,2.837,341,2.837,342,4.65,343,4.65,373,5.638,480,1.204,505,4.405,518,1.583,542,5.659,543,2.837,544,2.837,640,4.405,668,6.616,669,2.837,671,2.837,672,5.669,673,7.13,1004,5.669,1024,2.458,1044,7.445,1045,2.837,1046,2.837,1047,6.519,1048,6.107,1144,5.911,1258,5.638,1568,2.837,1569,2.837,1570,2.837,1745,4.405,1775,5.659,1776,2.837,1777,2.837,1813,2.837,1814,2.837,1815,2.837,1862,2.837,1864,2.837,1865,2.837,2261,2.837,2262,2.837,2263,4.65,2411,2.837,2412,3.166,2413,3.166,2414,3.166,2415,3.166,2416,3.166,2417,3.166,2418,3.166,2419,3.166]],["title/miscellaneous/typealiases.html",[2325,3.173,2420,6.377]],["body/miscellaneous/typealiases.html",[8,0.238,13,0.379,14,0.005,52,0.005,53,0.005,57,0.155,584,6.964,599,8.101,2325,5.452,2421,7.772,2422,7.772]],["title/classes/user1616304930711.html",[0,0.111,2423,4.779]],["body/classes/user1616304930711.html",[0,0.104,2,1.278,3,0.028,4,0.033,5,0.033,8,0.239,13,0.335,14,0.005,20,0.335,24,0.291,37,0.033,44,0.603,49,1.235,51,1.605,52,0.003,53,0.003,57,0.134,60,0.921,63,0.908,78,2.306,90,2.458,106,1.075,107,0.844,198,3.247,237,1.21,256,2.159,276,3.371,277,3.371,296,2.404,358,2.014,368,4.718,397,4.297,423,2.904,428,2.088,520,3.036,521,3.036,1129,3.38,1223,4.614,1469,5.047,1478,4.439,1598,5.253,2153,6.148,2254,4.504,2405,6.148,2423,6.148,2424,7.813,2425,5.027,2426,7.813,2427,6.862,2428,6.862,2429,9.583,2430,5.027,2431,6.862,2432,5.027,2433,6.862,2434,5.027,2435,6.862,2436,6.862,2437,6.862,2438,6.862,2439,5.027,2440,5.027,2441,5.027,2442,5.027,2443,5.027,2444,5.027,2445,5.027]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"classes/user1616304930711.html":{}}}],["0",{"_index":720,"title":{},"body":{"injectables/CompanyService.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{}}}],["0700",{"_index":1525,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["1",{"_index":70,"title":{"controllers/AppController-1.html":{},"injectables/AppService-1.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthService-1.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService-1.html":{},"interfaces/Contact-1.html":{},"classes/CreatePostDto-1.html":{},"classes/CreateUserDto-1.html":{},"interfaces/DbConfig-1.html":{},"classes/DbConfigError-1.html":{},"classes/DbError-1.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController-1.html":{},"classes/HttpExceptionFilter-1.html":{},"interfaces/IPagination-1.html":{},"injectables/Logger-1.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerMiddleware-1.html":{},"classes/Message-1.html":{},"entities/Post-1.html":{},"controllers/PostController-1.html":{},"injectables/PostService-1.html":{},"classes/PostTag-1.html":{},"interfaces/RedisConfig-1.html":{},"guards/RolesGuard-1.html":{},"classes/SearchPostDto-1.html":{},"interfaces/SwaggerConfig-1.html":{},"controllers/TestController-1.html":{},"classes/User-1.html":{},"controllers/UserController-1.html":{},"classes/UserParam-1.html":{}},"body":{"modules/DomainModule.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/SearchService.html":{}}}],["10",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/UserService.html":{}}}],["10/oct/2000:13:55:36",{"_index":1524,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["100",{"_index":1076,"title":{},"body":{"modules/DomainModule.html":{},"entities/User.html":{},"classes/User-2.html":{},"entities/Users.html":{}}}],["100)@isnotempty",{"_index":2138,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["1000",{"_index":1828,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["120",{"_index":2251,"title":{},"body":{"entities/Users.html":{}}}],["145",{"_index":2249,"title":{},"body":{"entities/Users.html":{}}}],["15",{"_index":1304,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["16",{"_index":1164,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"entities/Users.html":{}}}],["2",{"_index":74,"title":{"controllers/AppController-2.html":{},"injectables/AppService-2.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware-2.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact-2.html":{},"classes/CreatePostDto-2.html":{},"interfaces/DbConfig-2.html":{},"classes/DbConfigError-2.html":{},"classes/DbError-2.html":{},"controllers/HealthController-2.html":{},"classes/HttpExceptionFilter-2.html":{},"interfaces/IPagination-2.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerMiddleware-2.html":{},"entities/Post-2.html":{},"controllers/PostController-2.html":{},"injectables/PostService-2.html":{},"classes/PostTag-2.html":{},"classes/SearchPostDto-2.html":{},"interfaces/SwaggerConfig-2.html":{},"controllers/TestController-2.html":{},"classes/User-2.html":{}},"body":{}}],["20",{"_index":853,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["20)@isnotempty",{"_index":2135,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["200",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/UserController-1.html":{}}}],["255",{"_index":1586,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{}}}],["255})@isnotempty",{"_index":1594,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{}}}],["256",{"_index":1923,"title":{},"body":{"injectables/SearchService.html":{}}}],["3",{"_index":98,"title":{"controllers/AppController-3.html":{},"injectables/AppService-3.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/Contact-3.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError-3.html":{},"classes/DbError-3.html":{},"controllers/HealthController-3.html":{},"classes/HttpExceptionFilter-3.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware-3.html":{},"entities/Post-3.html":{},"interfaces/SwaggerConfig-3.html":{},"controllers/TestController-3.html":{}},"body":{"overview.html":{}}}],["30",{"_index":2419,"title":{},"body":{"overview.html":{}}}],["35",{"_index":2416,"title":{},"body":{"overview.html":{}}}],["3600",{"_index":1827,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["4",{"_index":112,"title":{"controllers/AppController-4.html":{},"injectables/AppService-4.html":{},"interfaces/Contact-4.html":{},"classes/DbConfigError-4.html":{},"classes/DbError-4.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter-4.html":{},"interfaces/SwaggerConfig-4.html":{}},"body":{}}],["400",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["401",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["403",{"_index":1990,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["404",{"_index":1755,"title":{},"body":{"controllers/PostsController.html":{},"injectables/SearchService.html":{}}}],["41",{"_index":2415,"title":{},"body":{"overview.html":{}}}],["5",{"_index":114,"title":{"controllers/AppController-5.html":{},"injectables/AppService-5.html":{},"classes/DbConfigError-5.html":{},"classes/DbError-5.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/SwaggerConfig-5.html":{}},"body":{"modules/DomainModule.html":{}}}],["50",{"_index":2417,"title":{},"body":{"overview.html":{}}}],["6",{"_index":115,"title":{"controllers/AppController-6.html":{},"interfaces/SwaggerConfig-6.html":{}},"body":{}}],["60",{"_index":1826,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["60000",{"_index":1876,"title":{},"body":{"modules/SearchModule.html":{}}}],["62",{"_index":2418,"title":{},"body":{"overview.html":{}}}],["7",{"_index":131,"title":{"controllers/AppController-7.html":{},"interfaces/SwaggerConfig-7.html":{}},"body":{}}],["8",{"_index":134,"title":{"controllers/AppController-8.html":{},"interfaces/SwaggerConfig-8.html":{}},"body":{}}],["9",{"_index":141,"title":{"controllers/AppController-9.html":{}},"body":{"overview.html":{}}}],["_",{"_index":310,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["__dirname",{"_index":2023,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["abstract",{"_index":360,"title":{},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{}}}],["access",{"_index":765,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["active",{"_index":713,"title":{},"body":{"injectables/CompanyService.html":{}}}],["actually",{"_index":1359,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["addavatar",{"_index":2036,"title":{},"body":{"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{}}}],["addavatar(imagebuffer",{"_index":2041,"title":{},"body":{"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{}}}],["address",{"_index":1,"title":{"classes/Address.html":{}},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["admin",{"_index":472,"title":{},"body":{"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/ProductController.html":{},"controllers/UserController-1.html":{},"miscellaneous/enumerations.html":{}}}],["admin.auth().createuser",{"_index":2169,"title":{},"body":{"controllers/UserController-1.html":{}}}],["admin.auth().setcustomuserclaims(uid",{"_index":2170,"title":{},"body":{"controllers/UserController-1.html":{}}}],["admin.auth().verifyidtoken(tokenstring",{"_index":1161,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["admin.auth.decodedidtoken",{"_index":1160,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["affected",{"_index":1765,"title":{},"body":{"controllers/PostsController.html":{}}}],["age",{"_index":45,"title":{},"body":{"classes/Address.html":{},"interfaces/Cat.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["agent",{"_index":1468,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["agent}i",{"_index":1519,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["aliases",{"_index":2421,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all_entities",{"_index":1062,"title":{},"body":{"modules/DomainModule.html":{}}}],["all_services",{"_index":1071,"title":{},"body":{"modules/DomainModule.html":{}}}],["allowed",{"_index":2122,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["allowedfiles",{"_index":2056,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["allownull",{"_index":2147,"title":{},"body":{"classes/User-1.html":{}}}],["already",{"_index":1043,"title":{},"body":{"guards/DoesUserExist.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["analysis",{"_index":1925,"title":{},"body":{"injectables/SearchService.html":{}}}],["analyzer",{"_index":1931,"title":{},"body":{"injectables/SearchService.html":{}}}],["angular",{"_index":2398,"title":{},"body":{"index.html":{}}}],["apache_pb.gif",{"_index":1526,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["api",{"_index":143,"title":{},"body":{"controllers/AppController-9.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["api/v1",{"_index":119,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/BlogController.html":{},"modules/CatsModule.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/ProductController.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{}}}],["api/v1/company",{"_index":604,"title":{},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{}}}],["api/v1/health",{"_index":1183,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["api/v1/test",{"_index":1977,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-3.html":{}}}],["api/v1/users",{"_index":431,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibadrequestresponse",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/UserController-1.html":{}}}],["apibearerauth",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/CatController.html":{},"controllers/UserController-1.html":{}}}],["apibearerauth('access",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["apibody",{"_index":2108,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["apiconsumes",{"_index":2081,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["apiconsumes('multipart/form",{"_index":2088,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["apiinternalservererrorresponse",{"_index":502,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{}}}],["apiokresponse",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/UserController-1.html":{}}}],["apioperation",{"_index":503,"title":{},"body":{"controllers/CatController.html":{}}}],["apiproperty",{"_index":33,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/UserDTO.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["apiproperty({description",{"_index":17,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/UserDTO.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["apiproperty({description:\"address",{"_index":47,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["apis/.../main.ts",{"_index":2343,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apis/.../user.dto.ts",{"_index":2327,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apis/src/app.controller.ts",{"_index":72,"title":{},"body":{"controllers/AppController-1.html":{}}}],["apis/src/app.controller.ts:10",{"_index":73,"title":{},"body":{"controllers/AppController-1.html":{}}}],["apis/src/app.service.ts",{"_index":181,"title":{},"body":{"injectables/AppService-1.html":{}}}],["apis/src/app.service.ts:5",{"_index":182,"title":{},"body":{"injectables/AppService-1.html":{}}}],["apis/src/core/database/interfaces/dbconfig.interface.ts",{"_index":1244,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{}}}],["apis/src/core/guards/doesuserexist.guard.ts",{"_index":1025,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["apis/src/core/guards/doesuserexist.guard.ts:10",{"_index":1030,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["apis/src/core/guards/doesuserexist.guard.ts:17",{"_index":1034,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["apis/src/core/guards/doesuserexist.guard.ts:7",{"_index":1028,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["apis/src/core/pipes/validate.pipe.ts",{"_index":2306,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["apis/src/core/pipes/validate.pipe.ts:15",{"_index":2309,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["apis/src/core/pipes/validate.pipe.ts:5",{"_index":2313,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["apis/src/main.ts",{"_index":2361,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apis/src/modules/auth/auth.controller.ts",{"_index":245,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["apis/src/modules/auth/auth.controller.ts:14",{"_index":250,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["apis/src/modules/auth/auth.controller.ts:20",{"_index":255,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["apis/src/modules/auth/auth.module.ts",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{}}}],["apis/src/modules/auth/auth.service.ts",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/auth.service.ts:13",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/auth.service.ts:32",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/auth.service.ts:37",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/auth.service.ts:54",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/auth.service.ts:59",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/auth.service.ts:64",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/auth.service.ts:7",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["apis/src/modules/auth/jwt.strategy.ts",{"_index":1343,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apis/src/modules/auth/jwt.strategy.ts:17",{"_index":1346,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apis/src/modules/auth/jwt.strategy.ts:8",{"_index":1344,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apis/src/modules/auth/local.strategy.ts",{"_index":1365,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apis/src/modules/auth/local.strategy.ts:12",{"_index":1369,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apis/src/modules/auth/local.strategy.ts:7",{"_index":1367,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["apis/src/modules/posts/dto/post.dto.ts",{"_index":1683,"title":{},"body":{"classes/PostDto.html":{}}}],["apis/src/modules/posts/dto/post.dto.ts:10",{"_index":1684,"title":{},"body":{"classes/PostDto.html":{}}}],["apis/src/modules/posts/dto/post.dto.ts:7",{"_index":1686,"title":{},"body":{"classes/PostDto.html":{}}}],["apis/src/modules/posts/posts.controller.ts",{"_index":1727,"title":{},"body":{"controllers/PostsController.html":{}}}],["apis/src/modules/posts/posts.controller.ts:13",{"_index":1734,"title":{},"body":{"controllers/PostsController.html":{}}}],["apis/src/modules/posts/posts.controller.ts:19",{"_index":1737,"title":{},"body":{"controllers/PostsController.html":{}}}],["apis/src/modules/posts/posts.controller.ts:34",{"_index":1733,"title":{},"body":{"controllers/PostsController.html":{}}}],["apis/src/modules/posts/posts.controller.ts:41",{"_index":1743,"title":{},"body":{"controllers/PostsController.html":{}}}],["apis/src/modules/posts/posts.controller.ts:56",{"_index":1740,"title":{},"body":{"controllers/PostsController.html":{}}}],["apis/src/modules/posts/posts.module.ts",{"_index":1778,"title":{},"body":{"modules/PostsModule.html":{}}}],["apis/src/modules/posts/posts.service.ts",{"_index":1782,"title":{},"body":{"injectables/PostsService.html":{}}}],["apis/src/modules/posts/posts.service.ts:12",{"_index":1786,"title":{},"body":{"injectables/PostsService.html":{}}}],["apis/src/modules/posts/posts.service.ts:16",{"_index":1789,"title":{},"body":{"injectables/PostsService.html":{}}}],["apis/src/modules/posts/posts.service.ts:22",{"_index":1790,"title":{},"body":{"injectables/PostsService.html":{}}}],["apis/src/modules/posts/posts.service.ts:29",{"_index":1788,"title":{},"body":{"injectables/PostsService.html":{}}}],["apis/src/modules/posts/posts.service.ts:33",{"_index":1791,"title":{},"body":{"injectables/PostsService.html":{}}}],["apis/src/modules/posts/posts.service.ts:9",{"_index":1784,"title":{},"body":{"injectables/PostsService.html":{}}}],["apis/src/modules/users/dto/user.dto.ts",{"_index":2197,"title":{},"body":{"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["apis/src/modules/users/dto/user.dto.ts:11",{"_index":2202,"title":{},"body":{"classes/UserDto.html":{}}}],["apis/src/modules/users/dto/user.dto.ts:15",{"_index":2199,"title":{},"body":{"classes/UserDto.html":{}}}],["apis/src/modules/users/dto/user.dto.ts:19",{"_index":2204,"title":{},"body":{"classes/UserDto.html":{}}}],["apis/src/modules/users/dto/user.dto.ts:25",{"_index":2201,"title":{},"body":{"classes/UserDto.html":{}}}],["apis/src/modules/users/user.entity.ts",{"_index":2145,"title":{},"body":{"classes/User-1.html":{}}}],["apis/src/modules/users/user.entity.ts:15",{"_index":2148,"title":{},"body":{"classes/User-1.html":{}}}],["apis/src/modules/users/user.entity.ts:20",{"_index":2152,"title":{},"body":{"classes/User-1.html":{}}}],["apis/src/modules/users/user.entity.ts:26",{"_index":2150,"title":{},"body":{"classes/User-1.html":{}}}],["apis/src/modules/users/user.entity.ts:9",{"_index":2151,"title":{},"body":{"classes/User-1.html":{}}}],["apis/src/modules/users/users.service.ts",{"_index":2290,"title":{},"body":{"injectables/UsersService.html":{}}}],["apis/src/modules/users/users.service.ts:11",{"_index":2295,"title":{},"body":{"injectables/UsersService.html":{}}}],["apis/src/modules/users/users.service.ts:15",{"_index":2297,"title":{},"body":{"injectables/UsersService.html":{}}}],["apis/src/modules/users/users.service.ts:19",{"_index":2299,"title":{},"body":{"injectables/UsersService.html":{}}}],["apis/src/modules/users/users.service.ts:8",{"_index":2294,"title":{},"body":{"injectables/UsersService.html":{}}}],["apitags",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"controllers/ProductController.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UserController-1.html":{}}}],["apitags('auth",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["apitags('cat",{"_index":509,"title":{},"body":{"controllers/CatController.html":{}}}],["apitags('cat')@get('')@apioperation({description",{"_index":495,"title":{},"body":{"controllers/CatController.html":{}}}],["apitags('cat')@post('')@apioperation({description",{"_index":488,"title":{},"body":{"controllers/CatController.html":{}}}],["apitags('health",{"_index":1194,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["apitags('health')@get('/')@healthcheck",{"_index":1199,"title":{},"body":{"controllers/HealthController-1.html":{},"controllers/HealthController-3.html":{}}}],["apitags('health')@get()@healthcheck",{"_index":1185,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-4.html":{}}}],["apitags('product",{"_index":473,"title":{},"body":{"controllers/BlogController.html":{},"controllers/ProductController.html":{}}}],["apitags('test",{"_index":1986,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["apitags('test')@get('/filter",{"_index":1979,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-3.html":{}}}],["apitags('test')@get('/test",{"_index":1995,"title":{},"body":{"controllers/TestController-2.html":{}}}],["apitags('test')@usefilters(new",{"_index":1981,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["apitags('user",{"_index":2165,"title":{},"body":{"controllers/UserController-1.html":{}}}],["apiunauthorizedresponse",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/UserController-1.html":{}}}],["app",{"_index":749,"title":{},"body":{"interfaces/ConfigData-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"miscellaneous/functions.html":{}}}],["app.constants",{"_index":637,"title":{},"body":{"controllers/CompanyController.html":{}}}],["app.service",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["app/src/app.controller.ts",{"_index":100,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["app/src/app.controller.ts:10",{"_index":105,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["app/src/app.service.ts",{"_index":185,"title":{},"body":{"injectables/AppService-3.html":{},"injectables/AppService-5.html":{}}}],["app/src/app.service.ts:5",{"_index":186,"title":{},"body":{"injectables/AppService-3.html":{},"injectables/AppService-5.html":{}}}],["app/src/main.ts",{"_index":2365,"title":{},"body":{"miscellaneous/functions.html":{}}}],["appcontroller",{"_index":55,"title":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{}},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{}}}],["application",{"_index":766,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":2395,"title":{},"body":{"index.html":{}}}],["apply(authmiddleware",{"_index":685,"title":{},"body":{"modules/CompanyModule.html":{}}}],["apply(loggermiddleware",{"_index":1575,"title":{},"body":{"modules/LoggerModule.html":{}}}],["appmodule",{"_index":149,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":65,"title":{"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{}},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"overview.html":{}}}],["archivecompany",{"_index":605,"title":{},"body":{"controllers/CompanyController.html":{}}}],["archivecompany(@res",{"_index":660,"title":{},"body":{"controllers/CompanyController.html":{}}}],["archivecompany(res",{"_index":610,"title":{},"body":{"controllers/CompanyController.html":{}}}],["argumentmetadata",{"_index":2312,"title":{},"body":{"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["argumentshost",{"_index":1212,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["array.isarray(header",{"_index":1558,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["array.isarray(searchparam.tags",{"_index":1289,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["arrayminsize",{"_index":25,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["arrayminsize(1",{"_index":48,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["asc",{"_index":855,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["async",{"_index":78,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateUserHandler.html":{},"guards/DoesUserExist.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"injectables/RedisCacheService.html":{},"interfaces/RequestModel.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["attributes",{"_index":1799,"title":{},"body":{"injectables/PostsService.html":{}}}],["auth",{"_index":133,"title":{},"body":{"controllers/AppController-7.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware-1.html":{},"controllers/BlogController.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService-1.html":{},"injectables/FirebaseAuthService-1.html":{},"injectables/Logger-1.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"controllers/ProductController.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"interfaces/SwaggerConfig-1.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["auth.controller",{"_index":348,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":262,"title":{},"body":{"controllers/AuthController-2.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["authcontroller",{"_index":187,"title":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{}},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"modules/AuthModule.html":{}}}],["authenticate",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["authenticate(@req",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["authenticate(authtoken",{"_index":1147,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["authenticate(req",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["authentication",{"_index":116,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AuthController.html":{},"interfaces/ConfigData.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbError.html":{},"injectables/FirebaseAuthService.html":{},"injectables/Logger.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"interfaces/RedisConfig.html":{},"interfaces/SwaggerConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["authenticationcontroller",{"_index":429,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{}}}],["authguard",{"_index":260,"title":{},"body":{"controllers/AuthController-2.html":{},"controllers/PostsController.html":{}}}],["authmiddleware",{"_index":275,"title":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{}},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"interfaces/RequestModel.html":{}}}],["authmodule",{"_index":338,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":297,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["authorizationservice",{"_index":282,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-3.html":{}}}],["authorized",{"_index":1362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authpayload",{"_index":354,"title":{"classes/AuthPayload.html":{}},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{}}}],["authservice",{"_index":215,"title":{"injectables/AuthService.html":{},"injectables/AuthService-1.html":{}},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController-1.html":{},"overview.html":{}}}],["authtoken",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["authtoken.match(/^bearer",{"_index":1155,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["authz",{"_index":314,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["authz/.../blog.controller.ts",{"_index":2330,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authz/.../loglevel.ts",{"_index":2328,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["authz/.../main.ts",{"_index":2338,"title":{},"body":{"miscellaneous/functions.html":{}}}],["authz/.../product.controller.ts",{"_index":2331,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authz/.../swagger.ts",{"_index":2348,"title":{},"body":{"miscellaneous/functions.html":{}}}],["authz/src/app/controllers/app.controller.ts",{"_index":117,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["authz/src/app/controllers/app.controller.ts:11",{"_index":122,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["authz/src/app/controllers/app.controller.ts:6",{"_index":124,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["authz/src/app/controllers/auth.controller.ts",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["authz/src/app/controllers/auth.controller.ts:20",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["authz/src/app/controllers/blog.controller.ts",{"_index":460,"title":{},"body":{"controllers/BlogController.html":{},"miscellaneous/enumerations.html":{}}}],["authz/src/app/controllers/blog.controller.ts:24",{"_index":466,"title":{},"body":{"controllers/BlogController.html":{}}}],["authz/src/app/controllers/blog.controller.ts:30",{"_index":464,"title":{},"body":{"controllers/BlogController.html":{}}}],["authz/src/app/controllers/product.controller.ts",{"_index":1806,"title":{},"body":{"controllers/ProductController.html":{},"miscellaneous/enumerations.html":{}}}],["authz/src/app/controllers/product.controller.ts:24",{"_index":1810,"title":{},"body":{"controllers/ProductController.html":{}}}],["authz/src/app/controllers/product.controller.ts:30",{"_index":1808,"title":{},"body":{"controllers/ProductController.html":{}}}],["authz/src/app/controllers/user.controller.ts",{"_index":2161,"title":{},"body":{"controllers/UserController-1.html":{}}}],["authz/src/app/controllers/user.controller.ts:19",{"_index":2164,"title":{},"body":{"controllers/UserController-1.html":{}}}],["authz/src/app/dto/user.dto.ts",{"_index":2187,"title":{},"body":{"classes/UserDTO.html":{}}}],["authz/src/app/dto/user.dto.ts:14",{"_index":2191,"title":{},"body":{"classes/UserDTO.html":{}}}],["authz/src/app/dto/user.dto.ts:19",{"_index":2193,"title":{},"body":{"classes/UserDTO.html":{}}}],["authz/src/app/dto/user.dto.ts:24",{"_index":2195,"title":{},"body":{"classes/UserDTO.html":{}}}],["authz/src/app/dto/user.dto.ts:9",{"_index":2189,"title":{},"body":{"classes/UserDTO.html":{}}}],["authz/src/app/middleware/auth.guard.ts",{"_index":1845,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authz/src/app/middleware/auth.guard.ts:5",{"_index":1848,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authz/src/app/middleware/auth.guard.ts:8",{"_index":1849,"title":{},"body":{"guards/RolesGuard.html":{}}}],["authz/src/app/middleware/auth.middleware.ts",{"_index":305,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["authz/src/app/middleware/auth.middleware.ts:12",{"_index":311,"title":{},"body":{"injectables/AuthMiddleware-1.html":{}}}],["authz/src/app/middleware/auth.middleware.ts:9",{"_index":307,"title":{},"body":{"injectables/AuthMiddleware-1.html":{}}}],["authz/src/app/services/firebase.service.ts",{"_index":1140,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["authz/src/app/services/firebase.service.ts:12",{"_index":1177,"title":{},"body":{"injectables/FirebaseAuthService-1.html":{}}}],["authz/src/app/services/firebase.service.ts:17",{"_index":1152,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["authz/src/app/services/firebase.service.ts:19",{"_index":1176,"title":{},"body":{"injectables/FirebaseAuthService-1.html":{}}}],["authz/src/app/services/firebase.service.ts:24",{"_index":1148,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["authz/src/app/services/firebase.service.ts:40",{"_index":1150,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["authz/src/app/services/firebase.service.ts:6",{"_index":1175,"title":{},"body":{"injectables/FirebaseAuthService-1.html":{}}}],["authz/src/app/services/firebase.service.ts:9",{"_index":1146,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["authz/src/config/config.interface.ts",{"_index":726,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["authz/src/config/config.module.ts",{"_index":753,"title":{},"body":{"modules/ConfigModule.html":{}}}],["authz/src/config/config.service.ts",{"_index":762,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["authz/src/config/config.service.ts:11",{"_index":771,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["authz/src/config/config.service.ts:20",{"_index":779,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["authz/src/config/config.service.ts:24",{"_index":783,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["authz/src/config/config.service.ts:33",{"_index":778,"title":{},"body":{"injectables/ConfigService.html":{}}}],["authz/src/config/config.service.ts:35",{"_index":803,"title":{},"body":{"injectables/ConfigService-1.html":{}}}],["authz/src/config/config.service.ts:45",{"_index":772,"title":{},"body":{"injectables/ConfigService.html":{}}}],["authz/src/database/database.module.ts",{"_index":948,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["authz/src/database/database.module.ts:10",{"_index":955,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["authz/src/database/database.module.ts:20",{"_index":951,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["authz/src/database/db.error.ts",{"_index":983,"title":{},"body":{"classes/DbConfigError.html":{},"classes/DbError.html":{}}}],["authz/src/database/db.error.ts:1",{"_index":998,"title":{},"body":{"classes/DbError.html":{}}}],["authz/src/database/db.error.ts:8",{"_index":985,"title":{},"body":{"classes/DbConfigError.html":{}}}],["authz/src/logger/logger.middleware.ts",{"_index":1496,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{}}}],["authz/src/logger/logger.middleware.ts:11",{"_index":1505,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{}}}],["authz/src/logger/logger.middleware.ts:32",{"_index":1504,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{}}}],["authz/src/logger/logger.middleware.ts:43",{"_index":1502,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{}}}],["authz/src/logger/logger.middleware.ts:8",{"_index":1499,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{}}}],["authz/src/logger/logger.module.ts",{"_index":1572,"title":{},"body":{"modules/LoggerModule.html":{}}}],["authz/src/logger/logger.module.ts:14",{"_index":1573,"title":{},"body":{"modules/LoggerModule.html":{}}}],["authz/src/logger/logger.ts",{"_index":1373,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:102",{"_index":1381,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:110",{"_index":1404,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:28",{"_index":1379,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:46",{"_index":1394,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:51",{"_index":1397,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:52",{"_index":1400,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:62",{"_index":1385,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:70",{"_index":1410,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:78",{"_index":1391,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:86",{"_index":1388,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/logger.ts:94",{"_index":1407,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{}}}],["authz/src/logger/loglevel.ts",{"_index":2333,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["authz/src/main.ts",{"_index":2356,"title":{},"body":{"miscellaneous/functions.html":{}}}],["authz/src/swagger/swagger.interface.ts",{"_index":1965,"title":{},"body":{"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{}}}],["authz/src/swagger/swagger.ts",{"_index":2366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["autocomplete",{"_index":1932,"title":{},"body":{"injectables/SearchService.html":{}}}],["autocomplete_filter",{"_index":1927,"title":{},"body":{"injectables/SearchService.html":{}}}],["autoloadentities",{"_index":2033,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["automatically",{"_index":1957,"title":{},"body":{"classes/Signup.html":{}}}],["available",{"_index":2410,"title":{},"body":{"modules.html":{}}}],["await",{"_index":90,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateUserHandler.html":{},"guards/DoesUserExist.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"interfaces/RequestModel.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"classes/user1616304930711.html":{}}}],["aws",{"_index":1134,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["azure",{"_index":826,"title":{},"body":{"interfaces/Contact-1.html":{},"classes/CreateUserDto.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"controllers/HealthController-1.html":{},"interfaces/SwaggerConfig-3.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"classes/UserParam.html":{},"miscellaneous/functions.html":{}}}],["b",{"_index":1517,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["bad",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/CatController.html":{}}}],["badrequestexception",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["badrequestexception('invalid",{"_index":2120,"title":{},"body":{"controllers/UploadProcessController.html":{},"injectables/ValidateObjectId.html":{}}}],["badrequestexception(constant.missing_auth_header",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["bcrypt",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TestService.html":{},"injectables/UserService.html":{}}}],["bcrypt.compare(enteredpassword",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":2240,"title":{},"body":{"injectables/UserService.html":{}}}],["beam",{"_index":1416,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["before",{"_index":1507,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["big",{"_index":1912,"title":{},"body":{"injectables/SearchService.html":{}}}],["binary",{"_index":2114,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["blob/.../main.ts",{"_index":2341,"title":{},"body":{"miscellaneous/functions.html":{}}}],["blob/.../swagger.ts",{"_index":2350,"title":{},"body":{"miscellaneous/functions.html":{}}}],["blob/src/app/controllers/app.controller.ts",{"_index":1198,"title":{},"body":{"controllers/HealthController-1.html":{}}}],["blob/src/app/controllers/app.controller.ts:17",{"_index":1200,"title":{},"body":{"controllers/HealthController-1.html":{}}}],["blob/src/app/domain/controller/upload.controller.process.ts",{"_index":2101,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["blob/src/app/domain/controller/upload.controller.process.ts:37",{"_index":2102,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["blob/src/app/domain/controller/upload.controller.process.ts:49",{"_index":2107,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["blob/src/app/domain/controller/upload.controller.ts",{"_index":2066,"title":{},"body":{"controllers/UploadController.html":{}}}],["blob/src/app/domain/controller/upload.controller.ts:27",{"_index":2072,"title":{},"body":{"controllers/UploadController.html":{}}}],["blob/src/app/domain/controller/upload.controller.ts:46",{"_index":2075,"title":{},"body":{"controllers/UploadController.html":{}}}],["blob/src/app/domain/dto/user.dto.ts",{"_index":888,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserParam.html":{}}}],["blob/src/app/domain/dto/user.dto.ts:14",{"_index":889,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["blob/src/app/domain/dto/user.dto.ts:19",{"_index":890,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["blob/src/app/domain/dto/user.dto.ts:24",{"_index":891,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["blob/src/app/domain/dto/user.dto.ts:8",{"_index":2209,"title":{},"body":{"classes/UserParam.html":{}}}],["blob/src/app/domain/services/file.azure.service.ts",{"_index":1098,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["blob/src/app/domain/services/file.azure.service.ts:11",{"_index":1109,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["blob/src/app/domain/services/file.azure.service.ts:17",{"_index":1107,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["blob/src/app/domain/services/file.azure.service.ts:8",{"_index":1102,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["blob/src/app/domain/services/file.s3.service.ts",{"_index":1123,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["blob/src/app/domain/services/file.s3.service.ts:17",{"_index":1128,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["blob/src/app/domain/services/file.s3.service.ts:5",{"_index":1126,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["blob/src/app/domain/services/file.s3.service.ts:9",{"_index":1132,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["blob/src/app/domain/services/upload.azure.service.ts",{"_index":2035,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["blob/src/app/domain/services/upload.azure.service.ts:13",{"_index":2042,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["blob/src/app/domain/services/upload.azure.service.ts:20",{"_index":2044,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["blob/src/app/domain/services/upload.azure.service.ts:8",{"_index":2039,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["blob/src/app/domain/services/upload.s3.service.ts",{"_index":2125,"title":{},"body":{"injectables/UploadService.html":{}}}],["blob/src/app/domain/services/upload.s3.service.ts:11",{"_index":2127,"title":{},"body":{"injectables/UploadService.html":{}}}],["blob/src/app/domain/services/upload.s3.service.ts:6",{"_index":2126,"title":{},"body":{"injectables/UploadService.html":{}}}],["blob/src/main.ts",{"_index":2359,"title":{},"body":{"miscellaneous/functions.html":{}}}],["blob/src/swagger/swagger.interface.ts",{"_index":827,"title":{},"body":{"interfaces/Contact-1.html":{},"interfaces/SwaggerConfig-3.html":{}}}],["blob/src/swagger/swagger.ts",{"_index":2373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["blobname",{"_index":1104,"title":{},"body":{"injectables/FilesAzureService.html":{},"injectables/UploadAzureService.html":{}}}],["blobservice",{"_index":1099,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["blogcontroller",{"_index":459,"title":{"controllers/BlogController.html":{}},"body":{"controllers/BlogController.html":{}}}],["bmp",{"_index":2061,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["body",{"_index":257,"title":{},"body":{"controllers/AuthController-2.html":{},"controllers/AuthenticationController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"injectables/FilesS3Service.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"controllers/PostsController.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"controllers/UploadController.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}}}],["boolean",{"_index":422,"title":{},"body":{"injectables/AuthService-1.html":{},"guards/DoesUserExist.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["bootstrap",{"_index":2337,"title":{},"body":{"miscellaneous/functions.html":{}}}],["breed",{"_index":46,"title":{},"body":{"classes/Address.html":{},"interfaces/Cat.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["browse",{"_index":2408,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1474,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"modules.html":{}}}],["bucket",{"_index":1137,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["buffer",{"_index":914,"title":{},"body":{"classes/CreateUserHandler.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/Users.html":{}}}],["buffer.alloc(16",{"_index":946,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["buffer.bytelength(buffer",{"_index":1119,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["buffer.from(userid).tostring('hex",{"_index":944,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["build",{"_index":2404,"title":{},"body":{"index.html":{}}}],["building",{"_index":2391,"title":{},"body":{"index.html":{}}}],["buildrequestuserprofile",{"_index":1141,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["buildrequestuserprofile(email",{"_index":1149,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["bytes",{"_index":1529,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["cache",{"_index":1268,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{}}}],["cache_manager",{"_index":1253,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{}}}],["cacheinterceptor",{"_index":1657,"title":{},"body":{"controllers/PostController.html":{}}}],["cachemanager",{"_index":1267,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{},"injectables/RedisCacheService.html":{}}}],["cachemodule",{"_index":1051,"title":{},"body":{"modules/DomainModule.html":{},"modules/RedisCacheModule.html":{}}}],["cachemodule.register",{"_index":1075,"title":{},"body":{"modules/DomainModule.html":{}}}],["cachemodule.registerasync",{"_index":1822,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["calculate",{"_index":1476,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["callhandler",{"_index":1085,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["canactivate",{"_index":1026,"title":{},"body":{"guards/DoesUserExist.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["canactivate(context",{"_index":1029,"title":{},"body":{"guards/DoesUserExist.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["capture",{"_index":1473,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["cascade",{"_index":578,"title":{},"body":{"entities/Comment.html":{},"entities/Post-2.html":{},"entities/Tag.html":{}}}],["cat",{"_index":479,"title":{"interfaces/Cat.html":{}},"body":{"interfaces/Cat.html":{},"controllers/CatController.html":{},"injectables/CatsService.html":{}}}],["cat'})@usepipes(validationpipe)@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":489,"title":{},"body":{"controllers/CatController.html":{}}}],["cat.controller",{"_index":555,"title":{},"body":{"modules/CatsModule.html":{}}}],["cat.dto",{"_index":504,"title":{},"body":{"controllers/CatController.html":{}}}],["cat.interface",{"_index":567,"title":{},"body":{"injectables/CatsService.html":{}}}],["cat.service",{"_index":506,"title":{},"body":{"controllers/CatController.html":{},"modules/CatsModule.html":{}}}],["catch",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/ValidateInputPipe.html":{}}}],["catch(err",{"_index":319,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["catch(exception",{"_index":1211,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["catch(httpexception",{"_index":1215,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{}}}],["catcherror",{"_index":1089,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["catcherror((err",{"_index":1481,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["catcherror(err",{"_index":1093,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["catcontroller",{"_index":482,"title":{"controllers/CatController.html":{}},"body":{"controllers/CatController.html":{},"modules/CatsModule.html":{}}}],["category",{"_index":517,"title":{"entities/Category.html":{}},"body":{"entities/Category.html":{},"entities/Post-2.html":{}}}],["category.post",{"_index":1613,"title":{},"body":{"entities/Post-2.html":{}}}],["cats",{"_index":484,"title":{},"body":{"controllers/CatController.html":{},"injectables/CatsService.html":{}}}],["catservice",{"_index":508,"title":{},"body":{"controllers/CatController.html":{}}}],["catsmodule",{"_index":542,"title":{"modules/CatsModule.html":{}},"body":{"modules/CatsModule.html":{},"modules.html":{},"overview.html":{}}}],["catsservice",{"_index":505,"title":{"injectables/CatsService.html":{}},"body":{"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"overview.html":{}}}],["caught",{"_index":1483,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["ceo",{"_index":585,"title":{},"body":{"classes/Company.html":{},"classes/CompanyDTO.html":{}}}],["character",{"_index":2435,"title":{},"body":{"classes/user1616304930711.html":{}}}],["check",{"_index":1184,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"injectables/JwtStrategy.html":{}}}],["checkindex",{"_index":1914,"title":{},"body":{"injectables/SearchService.html":{}}}],["checkindex.statuscode",{"_index":1917,"title":{},"body":{"injectables/SearchService.html":{}}}],["city",{"_index":11,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["class",{"_index":0,"title":{"classes/Address.html":{},"classes/AuthPayload.html":{},"classes/Company.html":{},"classes/CompanyDTO.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"classes/GetCatByIdParam.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"classes/PostDto.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"classes/user1616304930711.html":{}},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Address.html":{},"classes/AuthPayload.html":{},"classes/Company.html":{},"classes/CompanyDTO.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"classes/GetCatByIdParam.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"classes/PostDto.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"overview.html":{},"classes/user1616304930711.html":{}}}],["cli",{"_index":2030,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["client",{"_index":89,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["client/src/app.controller.ts",{"_index":77,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["client/src/app.controller.ts:10",{"_index":81,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["client/src/app.controller.ts:15",{"_index":80,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["client/src/app.service.ts",{"_index":183,"title":{},"body":{"injectables/AppService-2.html":{},"injectables/AppService-4.html":{}}}],["client/src/app.service.ts:5",{"_index":184,"title":{},"body":{"injectables/AppService-2.html":{},"injectables/AppService-4.html":{}}}],["client/src/main.ts",{"_index":2364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/src/message.event.ts",{"_index":1577,"title":{},"body":{"classes/Message.html":{},"classes/Message-1.html":{}}}],["client/src/message.event.ts:2",{"_index":1579,"title":{},"body":{"classes/Message.html":{},"classes/Message-1.html":{}}}],["clientproxy",{"_index":83,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["cluster_appmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":2412,"title":{},"body":{"overview.html":{}}}],["cluster_appmodule_imports",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":2413,"title":{},"body":{"overview.html":{}}}],["cluster_authmodule",{"_index":339,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":340,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":341,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_catsmodule",{"_index":543,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_catsmodule_providers",{"_index":544,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_companymodule",{"_index":669,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_companymodule_imports",{"_index":670,"title":{},"body":{"modules/CompanyModule.html":{}}}],["cluster_companymodule_providers",{"_index":671,"title":{},"body":{"modules/CompanyModule.html":{},"overview.html":{}}}],["cluster_domainmodule",{"_index":1045,"title":{},"body":{"modules/DomainModule.html":{},"overview.html":{}}}],["cluster_domainmodule_imports",{"_index":1046,"title":{},"body":{"modules/DomainModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":1568,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_exports",{"_index":1570,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_loggermodule_imports",{"_index":1571,"title":{},"body":{"modules/LoggerModule.html":{}}}],["cluster_loggermodule_providers",{"_index":1569,"title":{},"body":{"modules/LoggerModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1776,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":1777,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_rediscachemodule",{"_index":1813,"title":{},"body":{"modules/RedisCacheModule.html":{},"overview.html":{}}}],["cluster_rediscachemodule_exports",{"_index":1814,"title":{},"body":{"modules/RedisCacheModule.html":{},"overview.html":{}}}],["cluster_rediscachemodule_providers",{"_index":1815,"title":{},"body":{"modules/RedisCacheModule.html":{},"overview.html":{}}}],["cluster_searchmodule",{"_index":1862,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_searchmodule_exports",{"_index":1864,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_searchmodule_imports",{"_index":1863,"title":{},"body":{"modules/SearchModule.html":{}}}],["cluster_searchmodule_providers",{"_index":1865,"title":{},"body":{"modules/SearchModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2261,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2414,"title":{},"body":{"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":2262,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1237,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["column",{"_index":535,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"entities/Users.html":{}}}],["column(\"binary",{"_index":2259,"title":{},"body":{"entities/Users.html":{}}}],["column(\"varchar",{"_index":2260,"title":{},"body":{"entities/Users.html":{}}}],["column('binary",{"_index":2253,"title":{},"body":{"entities/Users.html":{}}}],["column('varchar",{"_index":2248,"title":{},"body":{"entities/Users.html":{}}}],["column()@createdatecolumn",{"_index":525,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["column()@isnotempty",{"_index":522,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post-2.html":{},"entities/Tag.html":{}}}],["column()@length(4",{"_index":2134,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["column()@updatedatecolumn",{"_index":532,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["column({type",{"_index":1584,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"classes/User-1.html":{}}}],["combined",{"_index":1510,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["come",{"_index":975,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["command",{"_index":912,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["commandbus",{"_index":1944,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["commandhandler",{"_index":918,"title":{},"body":{"classes/CreateUserHandler.html":{},"injectables/UsersSagas.html":{}}}],["commandhandler(createusercommand",{"_index":929,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["commandhandlers",{"_index":2271,"title":{},"body":{"modules/UsersModule.html":{}}}],["commands/handlers/create",{"_index":2266,"title":{},"body":{"modules/UsersModule.html":{}}}],["commands/impl/create",{"_index":1945,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["comment",{"_index":541,"title":{"entities/Comment.html":{}},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post-2.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["comment.post",{"_index":1616,"title":{},"body":{"entities/Post-2.html":{}}}],["comment.user",{"_index":2131,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["comments",{"_index":1612,"title":{},"body":{"entities/Post-2.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["common/auth.middleware",{"_index":554,"title":{},"body":{"modules/CatsModule.html":{}}}],["company",{"_index":140,"title":{"classes/Company.html":{}},"body":{"controllers/AppController-8.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{}}}],["company.siret}).exec",{"_index":718,"title":{},"body":{"injectables/CompanyService.html":{}}}],["companycontroller",{"_index":602,"title":{"controllers/CompanyController.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{}}}],["companydocument",{"_index":599,"title":{},"body":{"classes/Company.html":{},"miscellaneous/typealiases.html":{}}}],["companydto",{"_index":618,"title":{"classes/CompanyDTO.html":{}},"body":{"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"injectables/CompanyService.html":{}}}],["companyid",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["companyid}).exec",{"_index":710,"title":{},"body":{"injectables/CompanyService.html":{}}}],["companymodel",{"_index":693,"title":{},"body":{"injectables/CompanyService.html":{}}}],["companymodule",{"_index":668,"title":{"modules/CompanyModule.html":{}},"body":{"modules/CompanyModule.html":{},"modules.html":{},"overview.html":{}}}],["companyschema",{"_index":600,"title":{},"body":{"classes/Company.html":{},"modules/CompanyModule.html":{}}}],["companyservice",{"_index":640,"title":{"injectables/CompanyService.html":{}},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"overview.html":{}}}],["comparepassword",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(enteredpassword",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["complexity",{"_index":1297,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["compose",{"_index":2403,"title":{},"body":{"index.html":{}}}],["config",{"_index":760,"title":{},"body":{"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["config.default",{"_index":785,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["config.get().mongo",{"_index":963,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config.interface",{"_index":786,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["config.loadfromenv",{"_index":761,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config.service",{"_index":755,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":957,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/LoggerModule.html":{}}}],["config/config.service",{"_index":958,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["config/typeorm.config.service",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["configdata",{"_index":725,"title":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{}},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["configfactory",{"_index":756,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configmodule",{"_index":154,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/LoggerModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["configmodule.forroot",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":162,"title":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"modules/DatabaseModule.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"injectables/TypeOrmConfigService.html":{}}}],["configservice.get('elasticsearch_node",{"_index":1873,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get().loglevel",{"_index":1435,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["configuration",{"_index":748,"title":{},"body":{"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["configure",{"_index":546,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/LoggerModule.html":{}}}],["configure(consumer",{"_index":547,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/LoggerModule.html":{}}}],["connection",{"_index":752,"title":{},"body":{"interfaces/ConfigData-2.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["connectionoptions",{"_index":978,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"modules/DbModule.html":{}}}],["connectionoptions['entities",{"_index":979,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["console.log",{"_index":302,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["console.log(\"caught",{"_index":1954,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["console.log(\"send",{"_index":941,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["console.log('err",{"_index":1482,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["console.log('inside",{"_index":2288,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["console.log('usercreatedevent",{"_index":2185,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["console.log(`after",{"_index":1479,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["console.log(`request",{"_index":1567,"title":{},"body":{"injectables/LoggerMiddleware-3.html":{}}}],["console.log(data.text",{"_index":111,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["console.log(decodedtoken",{"_index":1178,"title":{},"body":{"injectables/FirebaseAuthService-1.html":{}}}],["console.log(err",{"_index":1937,"title":{},"body":{"injectables/SearchService.html":{}}}],["console.log(roles",{"_index":1853,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log(user",{"_index":317,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard-1.html":{}}}],["const",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"modules/ConfigModule.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/RedisCacheModule.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"injectables/SearchService.html":{},"injectables/TestService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/ValidateObjectId.html":{}}}],["constant",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/UserController-1.html":{}}}],["constant.invalid_auth_token",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["constant.missing_auth_header",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["constants.api",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/UserController-1.html":{}}}],["constructor",{"_index":110,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserHandler.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"guards/DoesUserExist.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"interfaces/IPagination.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"injectables/SearchService.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserService.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject('hello_service",{"_index":87,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["constructor(@inject(post_repository",{"_index":1795,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(@inject(user_repository",{"_index":2302,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(@injectmodel('company",{"_index":707,"title":{},"body":{"injectables/CompanyService.html":{}}}],["constructor(@injectrepository(post",{"_index":1338,"title":{},"body":{"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["constructor(authorizationservice",{"_index":280,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-3.html":{}}}],["constructor(authservice",{"_index":1366,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(cachemanager",{"_index":1834,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["constructor(companymodel",{"_index":690,"title":{},"body":{"injectables/CompanyService.html":{}}}],["constructor(configservice",{"_index":1378,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/TypeOrmConfigService.html":{}}}],["constructor(data",{"_index":770,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["constructor(esservice",{"_index":1901,"title":{},"body":{"injectables/SearchService.html":{}}}],["constructor(eventbus",{"_index":904,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["constructor(filesservice",{"_index":2038,"title":{},"body":{"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{}}}],["constructor(firebaseservice",{"_index":306,"title":{},"body":{"injectables/AuthMiddleware-1.html":{}}}],["constructor(logger",{"_index":1143,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["constructor(message",{"_index":984,"title":{},"body":{"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{}}}],["constructor(postrepo",{"_index":1693,"title":{},"body":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["constructor(postrepository",{"_index":1783,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-3.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"guards/DoesUserExist.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"controllers/PostsController.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}}}],["constructor(reflector",{"_index":1846,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["constructor(text",{"_index":1578,"title":{},"body":{"classes/Message.html":{},"classes/Message-1.html":{}}}],["constructor(userid",{"_index":2173,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["constructor(username",{"_index":883,"title":{},"body":{"classes/CreateUserCommand.html":{}}}],["constructor(userrepo",{"_index":2219,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userrepository",{"_index":2293,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"guards/DoesUserExist.html":{},"injectables/JwtStrategy.html":{}}}],["consumer",{"_index":550,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/LoggerModule.html":{}}}],["consumer.apply(authmiddleware",{"_index":556,"title":{},"body":{"modules/CatsModule.html":{}}}],["contact",{"_index":813,"title":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{}},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{}}}],["containername",{"_index":1108,"title":{},"body":{"injectables/FilesAzureService.html":{},"injectables/UploadAzureService.html":{}}}],["contains",{"_index":970,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["context",{"_index":1031,"title":{},"body":{"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["context.gethandler",{"_index":1852,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["context.switchtohttp().getrequest",{"_index":1038,"title":{},"body":{"guards/DoesUserExist.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["context.switchtohttp().getrequest().headers['user",{"_index":1467,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["controller",{"_index":54,"title":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/PostsController.html":{},"controllers/ProductController.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/PostsController.html":{},"controllers/ProductController.html":{},"classes/SignUp.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}}}],["controller('/api",{"_index":147,"title":{},"body":{"controllers/AppController-9.html":{}}}],["controller('/api/v1",{"_index":125,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/BlogController.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/ProductController.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{}}}],["controller('/api/v1/company",{"_index":644,"title":{},"body":{"controllers/CompanyController.html":{}}}],["controller('/api/v1/health",{"_index":1191,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["controller('/api/v1/test",{"_index":1985,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-3.html":{}}}],["controller('/api/v1/users",{"_index":450,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('auth",{"_index":266,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["controller('cats",{"_index":507,"title":{},"body":{"controllers/CatController.html":{}}}],["controller('posts",{"_index":1749,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('profiles",{"_index":1946,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["controller('test",{"_index":1998,"title":{},"body":{"controllers/TestController-2.html":{}}}],["controller/company.controller",{"_index":680,"title":{},"body":{"modules/CompanyModule.html":{}}}],["controller/upload.controller.process",{"_index":2046,"title":{},"body":{"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{}}}],["controller/user.controller",{"_index":1061,"title":{},"body":{"modules/DomainModule.html":{}}}],["controllers",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"modules/AuthModule.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"modules/LoggerModule.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductController.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convention",{"_index":295,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["convertstringtobinary",{"_index":901,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["convertstringtobinary(uuid",{"_index":907,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["core/constants",{"_index":1794,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["core/decorator/role.decorator",{"_index":642,"title":{},"body":{"controllers/CompanyController.html":{}}}],["core/guard/role.guard",{"_index":636,"title":{},"body":{"controllers/CompanyController.html":{}}}],["core/guards/doesuserexist.guard",{"_index":265,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["core/middleware/middleware",{"_index":679,"title":{},"body":{"modules/CompanyModule.html":{}}}],["count",{"_index":1311,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["cp",{"_index":2400,"title":{},"body":{"index.html":{}}}],["cqrs",{"_index":58,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthPayload.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserHandler.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserRepository.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"miscellaneous/functions.html":{}}}],["cqrsmodule",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["create",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CatController.html":{},"injectables/CatsService.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"classes/user1616304930711.html":{}}}],["create(@body",{"_index":1759,"title":{},"body":{"controllers/PostsController.html":{}}}],["create(cat",{"_index":563,"title":{},"body":{"injectables/CatsService.html":{}}}],["create(post",{"_index":1731,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["create(postdto",{"_index":1278,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["create(user",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["createblobfromstream",{"_index":1100,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["createblobfromstream(containername",{"_index":1103,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["createblockblobfromstream(containername",{"_index":1118,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["createcat",{"_index":485,"title":{},"body":{"controllers/CatController.html":{}}}],["createcat(@body",{"_index":513,"title":{},"body":{"controllers/CatController.html":{}}}],["createcat(cat",{"_index":487,"title":{},"body":{"controllers/CatController.html":{}}}],["createcatdto",{"_index":43,"title":{"classes/CreateCatDto.html":{}},"body":{"classes/Address.html":{},"controllers/CatController.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["createcompany",{"_index":606,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["createcompany(@res",{"_index":654,"title":{},"body":{"controllers/CompanyController.html":{}}}],["createcompany(company",{"_index":694,"title":{},"body":{"injectables/CompanyService.html":{}}}],["createcompany(res",{"_index":617,"title":{},"body":{"controllers/CompanyController.html":{}}}],["created",{"_index":492,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostsController.html":{}}}],["created.event",{"_index":925,"title":{},"body":{"classes/CreateUserHandler.html":{},"classes/UserCreatedHandler.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{}}}],["created.event.ts",{"_index":2172,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["created.event.ts:1",{"_index":2174,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["created.event.ts:3",{"_index":2175,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["created.handler.ts",{"_index":2178,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["created.handler.ts:8",{"_index":2181,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["createdat",{"_index":520,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/user1616304930711.html":{}}}],["createdatecolumn",{"_index":536,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["createdby",{"_index":586,"title":{},"body":{"classes/Company.html":{}}}],["createdocument",{"_index":2347,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdocument(app",{"_index":2367,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createduser",{"_index":2241,"title":{},"body":{"injectables/UserService.html":{}}}],["createindex",{"_index":1899,"title":{},"body":{"injectables/SearchService.html":{}}}],["createparamdecorator",{"_index":288,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["createpost",{"_index":1639,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["createpost(@body",{"_index":1662,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["createpost(post",{"_index":1643,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["createpostdto",{"_index":838,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["createproduct",{"_index":461,"title":{},"body":{"controllers/BlogController.html":{},"controllers/ProductController.html":{}}}],["creates",{"_index":2369,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createtypeormoptions",{"_index":2013,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["createuser",{"_index":432,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{}}}],["createuser(@body",{"_index":454,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["createuser(@req",{"_index":2167,"title":{},"body":{"controllers/UserController-1.html":{}}}],["createuser(registrationdata",{"_index":435,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["createuser(req",{"_index":2162,"title":{},"body":{"controllers/UserController-1.html":{}}}],["createusercommand",{"_index":880,"title":{"classes/CreateUserCommand.html":{}},"body":{"classes/CreateUserCommand.html":{},"classes/CreateUserHandler.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["createusercommand(input.username",{"_index":1950,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["createuserdto",{"_index":436,"title":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"injectables/TestService.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{}}}],["createuserhandler",{"_index":897,"title":{"classes/CreateUserHandler.html":{}},"body":{"classes/CreateUserHandler.html":{},"modules/UsersModule.html":{}}}],["credentials",{"_index":974,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"injectables/LocalStrategy.html":{}}}],["cron",{"_index":1256,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["cronexpression",{"_index":1257,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["ctx",{"_index":1216,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["ctx.getrequest",{"_index":1219,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["ctx.getresponse",{"_index":1218,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["custom",{"_index":1933,"title":{},"body":{"injectables/SearchService.html":{}}}],["custom_migration_table",{"_index":2027,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["data",{"_index":108,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{},"injectables/AuthMiddleware-3.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/PostsService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["data')@uploadfile('filename')@useinterceptors(undefined",{"_index":2106,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["data')@uploadfile('image')@useinterceptors(undefined",{"_index":2071,"title":{},"body":{"controllers/UploadController.html":{}}}],["data.email",{"_index":334,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["data.uid",{"_index":335,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["database",{"_index":751,"title":{},"body":{"interfaces/ConfigData-2.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/TypeOrmConfigService.html":{}}}],["database/database.module",{"_index":678,"title":{},"body":{"modules/CompanyModule.html":{}}}],["databasemodule",{"_index":672,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/CompanyModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databasemodule.forroot",{"_index":682,"title":{},"body":{"modules/CompanyModule.html":{}}}],["databasemodule.getnosqlconnectionoptions(configservice",{"_index":967,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datatype",{"_index":2154,"title":{},"body":{"classes/User-1.html":{}}}],["datatype.enum",{"_index":2156,"title":{},"body":{"classes/User-1.html":{}}}],["datatype.string",{"_index":2155,"title":{},"body":{"classes/User-1.html":{}}}],["date",{"_index":524,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["date().toisostring",{"_index":1224,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["date.now",{"_index":1470,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["db",{"_index":1193,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"controllers/PostsController.html":{}}}],["db.error",{"_index":961,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["db.errors",{"_index":1014,"title":{},"body":{"modules/DbModule.html":{}}}],["db.interface",{"_index":1015,"title":{},"body":{"modules/DbModule.html":{}}}],["db/db.module",{"_index":1058,"title":{},"body":{"modules/DomainModule.html":{}}}],["dbconfig",{"_index":968,"title":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"modules/DbModule.html":{}}}],["dbconfig.entities",{"_index":1017,"title":{},"body":{"modules/DbModule.html":{}}}],["dbconfigerror",{"_index":959,"title":{"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{}},"body":{"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{}}}],["dbconfigerror('database",{"_index":964,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dbdata",{"_index":962,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dberror",{"_index":960,"title":{"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{}},"body":{"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{}}}],["dbmodule",{"_index":1004,"title":{"modules/DbModule.html":{}},"body":{"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules.html":{},"overview.html":{}}}],["dbmodule.forroot",{"_index":1079,"title":{},"body":{"modules/DomainModule.html":{}}}],["dbmodule.getconnectionoptions(dbconfig",{"_index":1022,"title":{},"body":{"modules/DbModule.html":{}}}],["dbmodule.getconnectionoptionspostgres",{"_index":1016,"title":{},"body":{"modules/DbModule.html":{}}}],["dbpassword",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["dd",{"_index":1428,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["debug",{"_index":1376,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"miscellaneous/enumerations.html":{}}}],["debug(message",{"_index":1380,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["decodedtoken",{"_index":1159,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["decodedtoken.email}:${tokenstring.split('.')[2].substr(0",{"_index":1163,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"controllers/ProductController.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"entities/Users.html":{},"injectables/UsersSagas.html":{}}}],["default",{"_index":423,"title":{},"body":{"injectables/AuthService-1.html":{},"entities/Category.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"entities/Tag.html":{},"injectables/TestService.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"injectables/UsersSagas.html":{},"classes/user1616304930711.html":{}}}],["default_config",{"_index":784,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["default_config.env",{"_index":790,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["default_config.gatekeeperserviceurl",{"_index":812,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["default_config.loglevel",{"_index":797,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["default_config.mongo",{"_index":795,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-2.html":{}}}],["default_config.port",{"_index":793,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["default_config.redis",{"_index":800,"title":{},"body":{"injectables/ConfigService.html":{}}}],["defined",{"_index":20,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["del",{"_index":1832,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["del(key",{"_index":1836,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["delay",{"_index":2282,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["delay(1000",{"_index":2286,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["delete",{"_index":498,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete('/:companyid",{"_index":659,"title":{},"body":{"controllers/CompanyController.html":{}}}],["delete(':id",{"_index":1770,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('post/:id",{"_index":1647,"title":{},"body":{"controllers/PostController.html":{}}}],["delete(id",{"_index":1787,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletecompany",{"_index":687,"title":{},"body":{"injectables/CompanyService.html":{}}}],["deletecompany(companyid",{"_index":696,"title":{},"body":{"injectables/CompanyService.html":{}}}],["deleted",{"_index":1772,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletefile",{"_index":1124,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["deletefile(key",{"_index":1127,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["deletepost",{"_index":1640,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["deletepost(@param",{"_index":1664,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":1330,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["deletepost(params",{"_index":1646,"title":{},"body":{"controllers/PostController.html":{}}}],["demo/.../main.ts",{"_index":2339,"title":{},"body":{"miscellaneous/functions.html":{}}}],["demo/graphql.schema.ts",{"_index":355,"title":{},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{}}}],["demo/graphql.schema.ts:10",{"_index":1962,"title":{},"body":{"classes/Signup.html":{}}}],["demo/graphql.schema.ts:11",{"_index":1960,"title":{},"body":{"classes/Signup.html":{}}}],["demo/graphql.schema.ts:12",{"_index":1961,"title":{},"body":{"classes/Signup.html":{}}}],["demo/graphql.schema.ts:16",{"_index":1964,"title":{},"body":{"classes/SignupResponse.html":{}}}],["demo/graphql.schema.ts:17",{"_index":1963,"title":{},"body":{"classes/SignupResponse.html":{}}}],["demo/graphql.schema.ts:21",{"_index":356,"title":{},"body":{"classes/AuthPayload.html":{}}}],["demo/graphql.schema.ts:25",{"_index":1249,"title":{},"body":{"classes/IMutation.html":{}}}],["demo/graphql.schema.ts:27",{"_index":1248,"title":{},"body":{"classes/IMutation.html":{}}}],["demo/graphql.schema.ts:38",{"_index":1342,"title":{},"body":{"classes/IQuery.html":{}}}],["demo/src/app.controller.ts",{"_index":59,"title":{},"body":{"controllers/AppController.html":{}}}],["demo/src/app.controller.ts:9",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["demo/src/app.module.ts",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["demo/src/app.service.ts",{"_index":179,"title":{},"body":{"injectables/AppService.html":{}}}],["demo/src/app.service.ts:5",{"_index":180,"title":{},"body":{"injectables/AppService.html":{}}}],["demo/src/config/typeorm.config.service.ts",{"_index":2012,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["demo/src/config/typeorm.config.service.ts:10",{"_index":2015,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["demo/src/config/typeorm.config.service.ts:6",{"_index":2014,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["demo/src/main.ts",{"_index":2357,"title":{},"body":{"miscellaneous/functions.html":{}}}],["demo/src/users/commands/handlers/create",{"_index":898,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["demo/src/users/commands/impl/create",{"_index":881,"title":{},"body":{"classes/CreateUserCommand.html":{}}}],["demo/src/users/events/handlers/user",{"_index":2177,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["demo/src/users/events/impl/user",{"_index":2171,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["demo/src/users/repositories/user.repository.ts",{"_index":2211,"title":{},"body":{"classes/UserRepository.html":{}}}],["demo/src/users/sagas/users.saga.ts",{"_index":2275,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["demo/src/users/sagas/users.saga.ts:12",{"_index":2279,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["demo/src/users/sagas/users.saga.ts:8",{"_index":2277,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["demo/src/users/user.controller.ts",{"_index":1940,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["demo/src/users/user.controller.ts:18",{"_index":2160,"title":{},"body":{"controllers/UserController.html":{}}}],["demo/src/users/user.controller.ts:7",{"_index":1941,"title":{},"body":{"classes/SignUp.html":{}}}],["demo/src/users/user.controller.ts:8",{"_index":1943,"title":{},"body":{"classes/SignUp.html":{}}}],["demo/src/users/user.controller.ts:9",{"_index":1942,"title":{},"body":{"classes/SignUp.html":{}}}],["demo/src/users/users.entity.ts",{"_index":2247,"title":{},"body":{"entities/Users.html":{}}}],["demo/src/users/users.entity.ts:12",{"_index":2250,"title":{},"body":{"entities/Users.html":{}}}],["demo/src/users/users.entity.ts:15",{"_index":2252,"title":{},"body":{"entities/Users.html":{}}}],["demo/src/users/users.entity.ts:6",{"_index":2255,"title":{},"body":{"entities/Users.html":{}}}],["demo/src/users/users.entity.ts:9",{"_index":2256,"title":{},"body":{"entities/Users.html":{}}}],["demo/src/users/users.module.ts",{"_index":2264,"title":{},"body":{"modules/UsersModule.html":{}}}],["dependencies",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["description",{"_index":510,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/Signup.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"classes/UserDTO.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["descriptor",{"_index":2112,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["destination",{"_index":2091,"title":{},"body":{"controllers/UploadController.html":{}}}],["details",{"_index":627,"title":{},"body":{"controllers/CompanyController.html":{},"interfaces/ConfigData-2.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["determines",{"_index":2380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["development",{"_index":742,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["dialect",{"_index":1246,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{}}}],["diskstorage",{"_index":2082,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["displayname",{"_index":2168,"title":{},"body":{"controllers/UserController-1.html":{},"classes/UserDTO.html":{}}}],["displayname'})@isstring()@minlength(4",{"_index":2188,"title":{},"body":{"classes/UserDTO.html":{}}}],["docker",{"_index":2402,"title":{},"body":{"index.html":{}}}],["document",{"_index":597,"title":{},"body":{"classes/Company.html":{},"miscellaneous/functions.html":{}}}],["doesn't",{"_index":1753,"title":{},"body":{"controllers/PostsController.html":{}}}],["doesn\\'t",{"_index":1757,"title":{},"body":{"controllers/PostsController.html":{}}}],["doesuserexist",{"_index":264,"title":{"guards/DoesUserExist.html":{}},"body":{"controllers/AuthController-2.html":{},"guards/DoesUserExist.html":{}}}],["domain/services/auth.service",{"_index":293,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["domainmodule",{"_index":1044,"title":{"modules/DomainModule.html":{}},"body":{"modules/DomainModule.html":{},"modules.html":{},"overview.html":{}}}],["dotenv",{"_index":754,"title":{},"body":{"modules/ConfigModule.html":{}}}],["dotenv.config",{"_index":759,"title":{},"body":{"modules/ConfigModule.html":{}}}],["down",{"_index":2427,"title":{},"body":{"classes/user1616304930711.html":{}}}],["down(queryrunner",{"_index":2428,"title":{},"body":{"classes/user1616304930711.html":{}}}],["dto/company.dto",{"_index":643,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["dto/post.dto",{"_index":1260,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/user.dto",{"_index":448,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/TestService.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["dynamicmodule",{"_index":952,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/DbModule.html":{}}}],["e",{"_index":2316,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["e.g",{"_index":1523,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["e2e/.../main.ts",{"_index":2344,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e2e/.../swagger.ts",{"_index":2353,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e2e/src/app/auth.middleware.ts",{"_index":278,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["e2e/src/app/auth.middleware.ts:10",{"_index":287,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["e2e/src/app/auth.middleware.ts:7",{"_index":281,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["e2e/src/app/controllers/app.controller.ts",{"_index":1203,"title":{},"body":{"controllers/HealthController-3.html":{}}}],["e2e/src/app/controllers/app.controller.ts:17",{"_index":1204,"title":{},"body":{"controllers/HealthController-3.html":{}}}],["e2e/src/app/controllers/test.controller.ts",{"_index":1994,"title":{},"body":{"controllers/TestController-2.html":{}}}],["e2e/src/app/controllers/test.controller.ts:12",{"_index":1996,"title":{},"body":{"controllers/TestController-2.html":{}}}],["e2e/src/app/controllers/test.controller.ts:22",{"_index":1997,"title":{},"body":{"controllers/TestController-2.html":{}}}],["e2e/src/app/domain/controller/user.controller.ts",{"_index":430,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["e2e/src/app/domain/controller/user.controller.ts:17",{"_index":437,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["e2e/src/app/domain/controller/user.controller.ts:21",{"_index":443,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["e2e/src/app/domain/controller/user.controller.ts:25",{"_index":439,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["e2e/src/app/domain/dto/user.dto.ts",{"_index":893,"title":{},"body":{"classes/CreateUserDto-1.html":{},"classes/UserParam-1.html":{}}}],["e2e/src/app/domain/dto/user.dto.ts:14",{"_index":894,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["e2e/src/app/domain/dto/user.dto.ts:19",{"_index":895,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["e2e/src/app/domain/dto/user.dto.ts:24",{"_index":896,"title":{},"body":{"classes/CreateUserDto-1.html":{}}}],["e2e/src/app/domain/dto/user.dto.ts:8",{"_index":2210,"title":{},"body":{"classes/UserParam-1.html":{}}}],["e2e/src/app/domain/entities/category.ts",{"_index":519,"title":{},"body":{"entities/Category.html":{}}}],["e2e/src/app/domain/entities/category.ts:19",{"_index":528,"title":{},"body":{"entities/Category.html":{}}}],["e2e/src/app/domain/entities/category.ts:23",{"_index":523,"title":{},"body":{"entities/Category.html":{}}}],["e2e/src/app/domain/entities/category.ts:26",{"_index":531,"title":{},"body":{"entities/Category.html":{}}}],["e2e/src/app/domain/entities/category.ts:30",{"_index":526,"title":{},"body":{"entities/Category.html":{}}}],["e2e/src/app/domain/entities/category.ts:34",{"_index":533,"title":{},"body":{"entities/Category.html":{}}}],["e2e/src/app/domain/entities/comment.ts",{"_index":570,"title":{},"body":{"entities/Comment.html":{}}}],["e2e/src/app/domain/entities/comment.ts:16",{"_index":573,"title":{},"body":{"entities/Comment.html":{}}}],["e2e/src/app/domain/entities/comment.ts:20",{"_index":580,"title":{},"body":{"entities/Comment.html":{}}}],["e2e/src/app/domain/entities/comment.ts:23",{"_index":583,"title":{},"body":{"entities/Comment.html":{}}}],["e2e/src/app/domain/entities/comment.ts:26",{"_index":579,"title":{},"body":{"entities/Comment.html":{}}}],["e2e/src/app/domain/entities/comment.ts:30",{"_index":572,"title":{},"body":{"entities/Comment.html":{}}}],["e2e/src/app/domain/entities/comment.ts:34",{"_index":581,"title":{},"body":{"entities/Comment.html":{}}}],["e2e/src/app/domain/entities/post.ts",{"_index":1611,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:20",{"_index":1619,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:24",{"_index":1623,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:27",{"_index":1627,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:30",{"_index":1617,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:33",{"_index":1621,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:36",{"_index":1614,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:39",{"_index":1625,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:42",{"_index":1622,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:46",{"_index":1618,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/post.ts:50",{"_index":1624,"title":{},"body":{"entities/Post-2.html":{}}}],["e2e/src/app/domain/entities/tag.ts",{"_index":1968,"title":{},"body":{"entities/Tag.html":{}}}],["e2e/src/app/domain/entities/tag.ts:15",{"_index":1970,"title":{},"body":{"entities/Tag.html":{}}}],["e2e/src/app/domain/entities/tag.ts:19",{"_index":1973,"title":{},"body":{"entities/Tag.html":{}}}],["e2e/src/app/domain/entities/tag.ts:22",{"_index":1972,"title":{},"body":{"entities/Tag.html":{}}}],["e2e/src/app/domain/entities/tag.ts:26",{"_index":1969,"title":{},"body":{"entities/Tag.html":{}}}],["e2e/src/app/domain/entities/tag.ts:30",{"_index":1974,"title":{},"body":{"entities/Tag.html":{}}}],["e2e/src/app/domain/entities/user.ts",{"_index":2130,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/entities/user.ts:18",{"_index":2137,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/entities/user.ts:23",{"_index":2136,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/entities/user.ts:28",{"_index":2139,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/entities/user.ts:31",{"_index":2141,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/entities/user.ts:34",{"_index":2132,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/entities/user.ts:38",{"_index":2133,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/entities/user.ts:42",{"_index":2142,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["e2e/src/app/domain/services/auth.service.ts",{"_index":417,"title":{},"body":{"injectables/AuthService-1.html":{}}}],["e2e/src/app/domain/services/auth.service.ts:7",{"_index":419,"title":{},"body":{"injectables/AuthService-1.html":{}}}],["e2e/src/app/domain/services/auth.service.ts:9",{"_index":421,"title":{},"body":{"injectables/AuthService-1.html":{}}}],["e2e/src/app/domain/services/test.service.ts",{"_index":2004,"title":{},"body":{"injectables/TestService.html":{}}}],["e2e/src/app/domain/services/test.service.ts:10",{"_index":2006,"title":{},"body":{"injectables/TestService.html":{}}}],["e2e/src/app/domain/services/test.service.ts:12",{"_index":2008,"title":{},"body":{"injectables/TestService.html":{}}}],["e2e/src/app/domain/services/user.service.ts",{"_index":2215,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e/src/app/domain/services/user.service.ts:11",{"_index":2220,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e/src/app/domain/services/user.service.ts:17",{"_index":2229,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e/src/app/domain/services/user.service.ts:20",{"_index":2222,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e/src/app/domain/services/user.service.ts:27",{"_index":2224,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e/src/app/domain/services/user.service.ts:35",{"_index":2225,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e/src/app/domain/services/user.service.ts:42",{"_index":2227,"title":{},"body":{"injectables/UserService.html":{}}}],["e2e/src/app/http",{"_index":1227,"title":{},"body":{"classes/HttpExceptionFilter-2.html":{}}}],["e2e/src/app/logger.interceptor.ts",{"_index":1491,"title":{},"body":{"injectables/LoggerInterceptor-2.html":{}}}],["e2e/src/app/logger.interceptor.ts:8",{"_index":1492,"title":{},"body":{"injectables/LoggerInterceptor-2.html":{}}}],["e2e/src/db/db.errors.ts",{"_index":994,"title":{},"body":{"classes/DbConfigError-4.html":{},"classes/DbError-4.html":{}}}],["e2e/src/db/db.errors.ts:1",{"_index":1002,"title":{},"body":{"classes/DbError-4.html":{}}}],["e2e/src/db/db.errors.ts:7",{"_index":995,"title":{},"body":{"classes/DbConfigError-4.html":{}}}],["e2e/src/db/db.interface.ts",{"_index":981,"title":{},"body":{"interfaces/DbConfig-2.html":{}}}],["e2e/src/main.ts",{"_index":2362,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e2e/src/migrations/1616304930711",{"_index":2424,"title":{},"body":{"classes/user1616304930711.html":{}}}],["e2e/src/swagger/swagger.interface.ts",{"_index":829,"title":{},"body":{"interfaces/Contact-3.html":{},"interfaces/SwaggerConfig-6.html":{}}}],["e2e/src/swagger/swagger.ts",{"_index":2376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["each",{"_index":866,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["eager",{"_index":576,"title":{},"body":{"entities/Comment.html":{},"entities/Post-2.html":{},"entities/Tag.html":{}}}],["edge_ngram",{"_index":1928,"title":{},"body":{"injectables/SearchService.html":{}}}],["efficient",{"_index":2392,"title":{},"body":{"index.html":{}}}],["elastic/.../main.ts",{"_index":2340,"title":{},"body":{"miscellaneous/functions.html":{}}}],["elastic/.../swagger.ts",{"_index":2349,"title":{},"body":{"miscellaneous/functions.html":{}}}],["elastic/src/app/controllers/app.controller.ts",{"_index":1182,"title":{},"body":{"controllers/HealthController.html":{}}}],["elastic/src/app/controllers/app.controller.ts:17",{"_index":1186,"title":{},"body":{"controllers/HealthController.html":{}}}],["elastic/src/app/controllers/test.controller.ts",{"_index":1976,"title":{},"body":{"controllers/TestController.html":{}}}],["elastic/src/app/controllers/test.controller.ts:12",{"_index":1980,"title":{},"body":{"controllers/TestController.html":{}}}],["elastic/src/app/controllers/test.controller.ts:22",{"_index":1983,"title":{},"body":{"controllers/TestController.html":{}}}],["elastic/src/app/domain/controller/user.controller.ts",{"_index":1638,"title":{},"body":{"controllers/PostController.html":{}}}],["elastic/src/app/domain/controller/user.controller.ts:21",{"_index":1645,"title":{},"body":{"controllers/PostController.html":{}}}],["elastic/src/app/domain/controller/user.controller.ts:25",{"_index":1648,"title":{},"body":{"controllers/PostController.html":{}}}],["elastic/src/app/domain/controller/user.controller.ts:33",{"_index":1656,"title":{},"body":{"controllers/PostController.html":{}}}],["elastic/src/app/domain/controller/user.controller.ts:38",{"_index":1652,"title":{},"body":{"controllers/PostController.html":{}}}],["elastic/src/app/domain/domain.module.ts",{"_index":1049,"title":{},"body":{"modules/DomainModule.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts",{"_index":839,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostTag.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:104",{"_index":1884,"title":{},"body":{"classes/SearchPostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:15",{"_index":1723,"title":{},"body":{"classes/PostTag.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:21",{"_index":846,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:26",{"_index":841,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:31",{"_index":847,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:39",{"_index":844,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:51",{"_index":1879,"title":{},"body":{"classes/SearchParamsDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:59",{"_index":1861,"title":{},"body":{"classes/SearchElasticDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:66",{"_index":1882,"title":{},"body":{"classes/SearchPostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:74",{"_index":1887,"title":{},"body":{"classes/SearchPostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:84",{"_index":1881,"title":{},"body":{"classes/SearchPostDto.html":{}}}],["elastic/src/app/domain/dto/post.dto.ts:94",{"_index":1880,"title":{},"body":{"classes/SearchPostDto.html":{}}}],["elastic/src/app/domain/entities/post.ts",{"_index":1581,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:17",{"_index":1588,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:21",{"_index":1595,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:24",{"_index":1597,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:27",{"_index":1587,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:30",{"_index":1591,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:33",{"_index":1592,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:36",{"_index":1593,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:40",{"_index":1583,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/entities/post.ts:44",{"_index":1596,"title":{},"body":{"entities/Post.html":{}}}],["elastic/src/app/domain/services/post.service.ts",{"_index":1252,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:122",{"_index":1704,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:125",{"_index":1696,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:131",{"_index":1703,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:16",{"_index":1694,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:24",{"_index":1699,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:32",{"_index":1700,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:40",{"_index":1701,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:43",{"_index":1695,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:54",{"_index":1697,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:68",{"_index":1702,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/domain/services/post.service.ts:74",{"_index":1705,"title":{},"body":{"injectables/PostService.html":{}}}],["elastic/src/app/http",{"_index":1208,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["elastic/src/app/logger.interceptor.ts",{"_index":1463,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["elastic/src/app/logger.interceptor.ts:8",{"_index":1464,"title":{},"body":{"injectables/LoggerInterceptor.html":{}}}],["elastic/src/app/redis/redis.module.ts",{"_index":1816,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["elastic/src/app/redis/redis.module.ts:36",{"_index":1818,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["elastic/src/app/redis/redis.service.ts",{"_index":1831,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["elastic/src/app/redis/redis.service.ts:10",{"_index":1839,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["elastic/src/app/redis/redis.service.ts:13",{"_index":1841,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["elastic/src/app/redis/redis.service.ts:16",{"_index":1837,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["elastic/src/app/redis/redis.service.ts:5",{"_index":1835,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["elastic/src/app/search/search.module.ts",{"_index":1866,"title":{},"body":{"modules/SearchModule.html":{}}}],["elastic/src/app/search/search.module.ts:24",{"_index":1867,"title":{},"body":{"modules/SearchModule.html":{}}}],["elastic/src/app/search/search.service.ts",{"_index":1898,"title":{},"body":{"injectables/SearchService.html":{}}}],["elastic/src/app/search/search.service.ts:6",{"_index":1903,"title":{},"body":{"injectables/SearchService.html":{}}}],["elastic/src/app/search/search.service.ts:9",{"_index":1905,"title":{},"body":{"injectables/SearchService.html":{}}}],["elastic/src/app/search/search.service.ts:90",{"_index":1907,"title":{},"body":{"injectables/SearchService.html":{}}}],["elastic/src/app/search/search.service.ts:96",{"_index":1909,"title":{},"body":{"injectables/SearchService.html":{}}}],["elastic/src/db/db.errors.ts",{"_index":988,"title":{},"body":{"classes/DbConfigError-1.html":{},"classes/DbError-1.html":{}}}],["elastic/src/db/db.errors.ts:1",{"_index":999,"title":{},"body":{"classes/DbError-1.html":{}}}],["elastic/src/db/db.errors.ts:7",{"_index":989,"title":{},"body":{"classes/DbConfigError-1.html":{}}}],["elastic/src/db/db.interface.ts",{"_index":969,"title":{},"body":{"interfaces/DbConfig.html":{}}}],["elastic/src/db/db.module.ts",{"_index":1005,"title":{},"body":{"modules/DbModule.html":{}}}],["elastic/src/db/db.module.ts:18",{"_index":1013,"title":{},"body":{"modules/DbModule.html":{}}}],["elastic/src/db/db.module.ts:26",{"_index":1007,"title":{},"body":{"modules/DbModule.html":{}}}],["elastic/src/db/db.module.ts:8",{"_index":1010,"title":{},"body":{"modules/DbModule.html":{}}}],["elastic/src/main.ts",{"_index":2358,"title":{},"body":{"miscellaneous/functions.html":{}}}],["elastic/src/swagger/swagger.interface.ts",{"_index":815,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/SwaggerConfig-2.html":{}}}],["elastic/src/swagger/swagger.ts",{"_index":2372,"title":{},"body":{"miscellaneous/functions.html":{}}}],["elasticsearchmodule",{"_index":1868,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":1871,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchservice",{"_index":1902,"title":{},"body":{"injectables/SearchService.html":{}}}],["email",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"guards/DoesUserExist.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"injectables/TestService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"classes/user1616304930711.html":{}}}],["email'})@isstring()@isemail",{"_index":2190,"title":{},"body":{"classes/UserDTO.html":{}}}],["email,role",{"_index":244,"title":{},"body":{"controllers/AuthController-1.html":{}}}],["emitter",{"_index":1054,"title":{},"body":{"modules/DomainModule.html":{},"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["enteredpassword",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":518,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"entities/Users.html":{},"overview.html":{}}}],["entities/post",{"_index":1261,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["entities/user",{"_index":2010,"title":{},"body":{"injectables/TestService.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":516,"title":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"entities/Users.html":{}},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{},"entities/Users.html":{}}}],["entity(\"users",{"_index":2257,"title":{},"body":{"entities/Users.html":{}}}],["entityrepository",{"_index":2212,"title":{},"body":{"classes/UserRepository.html":{}}}],["entityrepository(users",{"_index":2214,"title":{},"body":{"classes/UserRepository.html":{}}}],["entity{.ts,.js",{"_index":2024,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["enum",{"_index":471,"title":{},"body":{"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"controllers/ProductController.html":{},"classes/UserDto.html":{}}}],["enumerations",{"_index":2326,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":727,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"index.html":{}}}],["env.env",{"_index":789,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["env.example",{"_index":2401,"title":{},"body":{"index.html":{}}}],["env.gatekeeper_service_url",{"_index":811,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["env.log_level",{"_index":796,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["env.mongo",{"_index":794,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-2.html":{}}}],["env.node_env",{"_index":810,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["env.port",{"_index":791,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["env.redis_host",{"_index":798,"title":{},"body":{"injectables/ConfigService.html":{}}}],["env.redis_port",{"_index":801,"title":{},"body":{"injectables/ConfigService.html":{}}}],["environment",{"_index":732,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["err",{"_index":337,"title":{},"body":{"injectables/AuthMiddleware-3.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/SearchService.html":{}}}],["err.message",{"_index":1169,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["error",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"injectables/FilesAzureService.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"controllers/PostsController.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["error(message",{"_index":1384,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["error.constraints",{"_index":2319,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["errorresponse",{"_index":1236,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["errors",{"_index":1953,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{},"injectables/ValidateInputPipe.html":{}}}],["errors.map(error",{"_index":2318,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["errorsinterceptor",{"_index":1081,"title":{"injectables/ErrorsInterceptor.html":{}},"body":{"injectables/ErrorsInterceptor.html":{}}}],["esservice",{"_index":1904,"title":{},"body":{"injectables/SearchService.html":{}}}],["event",{"_index":942,"title":{},"body":{"classes/CreateUserHandler.html":{},"interfaces/IPagination.html":{},"injectables/PostService.html":{},"classes/UserCreatedHandler.html":{}}}],["event.userid",{"_index":2186,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["eventbus",{"_index":905,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["eventbus.publish",{"_index":943,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["eventemitter",{"_index":1269,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["eventemitter2",{"_index":1254,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["eventemittermodule",{"_index":1052,"title":{},"body":{"modules/DomainModule.html":{}}}],["eventemittermodule.forroot",{"_index":1077,"title":{},"body":{"modules/DomainModule.html":{}}}],["eventhandlers",{"_index":2273,"title":{},"body":{"modules/UsersModule.html":{}}}],["eventpattern",{"_index":109,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["eventpattern('message_printed",{"_index":104,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["events",{"_index":2284,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["events/impl/user",{"_index":2268,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersSagas.html":{}}}],["eventshandler",{"_index":2182,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["eventshandler(usercreatedevent",{"_index":2184,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["example",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"controllers/UserController-1.html":{},"injectables/UsersSagas.html":{}}}],["exception",{"_index":1214,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["exception.filter",{"_index":1984,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["exception.filter.ts",{"_index":1209,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{}}}],["exception.filter.ts:6",{"_index":1213,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{}}}],["exception.getstatus",{"_index":1220,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["exception['message",{"_index":1240,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["exception['message']['error",{"_index":1239,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["exceptionfilter",{"_index":1210,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["exclude",{"_index":1800,"title":{},"body":{"injectables/PostsService.html":{}}}],["exclude('/api/v1/cat/something",{"_index":557,"title":{},"body":{"modules/CatsModule.html":{}}}],["execute",{"_index":902,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["execute(command",{"_index":910,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["execution",{"_index":1477,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["executioncontext",{"_index":289,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["exist",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"guards/DoesUserExist.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["existingcompany",{"_index":715,"title":{},"body":{"injectables/CompanyService.html":{}}}],["existingcompany.length",{"_index":719,"title":{},"body":{"injectables/CompanyService.html":{}}}],["existingcompany[0",{"_index":721,"title":{},"body":{"injectables/CompanyService.html":{}}}],["exit",{"_index":1754,"title":{},"body":{"controllers/PostsController.html":{},"injectables/SearchService.html":{}}}],["export",{"_index":37,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["exports",{"_index":684,"title":{},"body":{"modules/CompanyModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{}}}],["express",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"interfaces/RequestModel.html":{},"classes/SignUp.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}}}],["express.multer.file",{"_index":2104,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["extends",{"_index":313,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestModel.html":{},"classes/User-1.html":{},"classes/UserRepository.html":{},"injectables/ValidateInputPipe.html":{}}}],["extention",{"_index":2045,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["extractjwt",{"_index":1348,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1356,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracttags",{"_index":1687,"title":{},"body":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["extracttags(searchparam",{"_index":1287,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["failed",{"_index":331,"title":{},"body":{"injectables/AuthMiddleware-3.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["false",{"_index":714,"title":{},"body":{"injectables/CompanyService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"modules/DbModule.html":{},"injectables/JwtStrategy.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/TypeOrmConfigService.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{}}}],["false})@isoptional()@isstring()@minlength(2",{"_index":1860,"title":{},"body":{"classes/SearchElasticDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["false})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":1878,"title":{},"body":{"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["false})@isstring({each",{"_index":1885,"title":{},"body":{"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["female",{"_index":2158,"title":{},"body":{"classes/User-1.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["fetch",{"_index":626,"title":{},"body":{"controllers/CompanyController.html":{}}}],["fetched",{"_index":496,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{}}}],["fetched'})@apibadrequestresponse({description",{"_index":623,"title":{},"body":{"controllers/CompanyController.html":{}}}],["fields",{"_index":1920,"title":{},"body":{"injectables/SearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["file.azure.service",{"_index":2047,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["file.endswith('.d.ts",{"_index":1068,"title":{},"body":{"modules/DomainModule.html":{}}}],["file.filename",{"_index":2095,"title":{},"body":{"controllers/UploadController.html":{}}}],["file.indexof('.spec",{"_index":1073,"title":{},"body":{"modules/DomainModule.html":{}}}],["file.originalname",{"_index":2050,"title":{},"body":{"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["file.originalname.split('.').pop",{"_index":2051,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["file.s3.service",{"_index":2128,"title":{},"body":{"injectables/UploadService.html":{}}}],["filefilter",{"_index":2092,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["fileinterceptor",{"_index":2079,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["fileinterceptor('filename",{"_index":2117,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["fileinterceptor('image",{"_index":2090,"title":{},"body":{"controllers/UploadController.html":{}}}],["filename",{"_index":1131,"title":{},"body":{"injectables/FilesS3Service.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{}}}],["filereponse",{"_index":2098,"title":{},"body":{"controllers/UploadController.html":{}}}],["files",{"_index":2076,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["files.map((file",{"_index":2097,"title":{},"body":{"controllers/UploadController.html":{}}}],["filesazureservice",{"_index":1097,"title":{"injectables/FilesAzureService.html":{}},"body":{"injectables/FilesAzureService.html":{},"injectables/UploadAzureService.html":{}}}],["filess3service",{"_index":1122,"title":{"injectables/FilesS3Service.html":{}},"body":{"injectables/FilesS3Service.html":{},"injectables/UploadService.html":{}}}],["filesservice",{"_index":2040,"title":{},"body":{"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{}}}],["filter",{"_index":1926,"title":{},"body":{"injectables/SearchService.html":{}}}],["filter((file",{"_index":1064,"title":{},"body":{"modules/DomainModule.html":{}}}],["find",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{}}}],["findall",{"_index":562,"title":{},"body":{"injectables/CatsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["findone",{"_index":1728,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["findone(@param('id",{"_index":1751,"title":{},"body":{"controllers/PostsController.html":{}}}],["findone(id",{"_index":1735,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["findonebyemail",{"_index":2291,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":2296,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":2292,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":2298,"title":{},"body":{"injectables/UsersService.html":{}}}],["firebase",{"_index":132,"title":{},"body":{"controllers/AppController-7.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware-1.html":{},"controllers/BlogController.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService-1.html":{},"injectables/FirebaseAuthService-1.html":{},"injectables/Logger-1.html":{},"injectables/LoggerMiddleware-1.html":{},"controllers/ProductController.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"interfaces/SwaggerConfig-1.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["firebaseauthservice",{"_index":208,"title":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"interfaces/RequestModel.html":{},"controllers/UserController-1.html":{},"overview.html":{}}}],["firebaseservice",{"_index":308,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["forbidden",{"_index":1989,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["forbiddenexception",{"_index":1035,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["forbiddenexception('this",{"_index":1042,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["forfeature",{"_index":683,"title":{},"body":{"modules/CompanyModule.html":{}}}],["format",{"_index":1436,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"controllers/UploadProcessController.html":{}}}],["formatted",{"_index":1422,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["formatter",{"_index":1419,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["forroot",{"_index":950,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/DbModule.html":{}}}],["forroot(dbconfig",{"_index":1006,"title":{},"body":{"modules/DbModule.html":{}}}],["forroutes",{"_index":1576,"title":{},"body":{"modules/LoggerModule.html":{}}}],["forroutes({path",{"_index":558,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{}}}],["found",{"_index":819,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["framework",{"_index":2390,"title":{},"body":{"index.html":{}}}],["fs",{"_index":1057,"title":{},"body":{"modules/DomainModule.html":{}}}],["fs.readdirsync(path.join(path.dirname(__filename",{"_index":1063,"title":{},"body":{"modules/DomainModule.html":{}}}],["function",{"_index":1506,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"injectables/SearchService.html":{}}}],["functions",{"_index":2336,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gatekeeper",{"_index":128,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["gatekeeperserviceurl",{"_index":750,"title":{},"body":{"interfaces/ConfigData-2.html":{},"injectables/ConfigService-2.html":{}}}],["gender",{"_index":2146,"title":{},"body":{"classes/User-1.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["generate",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":1958,"title":{},"body":{"classes/Signup.html":{}}}],["generatelogmessage",{"_index":1497,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["generatelogmessage(req",{"_index":1500,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["generatetoken",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:companyid",{"_index":650,"title":{},"body":{"controllers/CompanyController.html":{}}}],["get('/:id",{"_index":442,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('/filter",{"_index":1987,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["get('/health",{"_index":137,"title":{},"body":{"controllers/AppController-8.html":{},"controllers/AppController-9.html":{}}}],["get('/list",{"_index":645,"title":{},"body":{"controllers/CompanyController.html":{}}}],["get('/list')@roles(role.admin)@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":622,"title":{},"body":{"controllers/CompanyController.html":{}}}],["get('/test",{"_index":1999,"title":{},"body":{"controllers/TestController-2.html":{}}}],["get('/testauth0",{"_index":145,"title":{},"body":{"controllers/AppController-9.html":{}}}],["get(':id",{"_index":1736,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('authenticate",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["get('authenticate')@apibadrequestresponse({schema",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["get('blog",{"_index":476,"title":{},"body":{"controllers/BlogController.html":{}}}],["get('blog')@roles(role.user",{"_index":465,"title":{},"body":{"controllers/BlogController.html":{}}}],["get('health",{"_index":123,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["get('post/elastic",{"_index":1672,"title":{},"body":{"controllers/PostController.html":{}}}],["get('post/search",{"_index":1666,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["get('post/search')@useinterceptors(cacheinterceptor",{"_index":1655,"title":{},"body":{"controllers/PostController.html":{}}}],["get('product",{"_index":1811,"title":{},"body":{"controllers/ProductController.html":{}}}],["get('product')@roles(role.admin",{"_index":1809,"title":{},"body":{"controllers/ProductController.html":{}}}],["get(key",{"_index":1838,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["getallcompany",{"_index":688,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getalluser",{"_index":433,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getallusers",{"_index":2216,"title":{},"body":{"injectables/UserService.html":{}}}],["getapp",{"_index":120,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["getblobserviceinstance",{"_index":1101,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["getbyemail",{"_index":1688,"title":{},"body":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/UserService.html":{}}}],["getbyemail(email",{"_index":2223,"title":{},"body":{"injectables/UserService.html":{}}}],["getbyemail(title",{"_index":1270,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["getbyid",{"_index":1689,"title":{},"body":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/UserService.html":{}}}],["getbyid(id",{"_index":1275,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/UserService.html":{}}}],["getbytitle",{"_index":1690,"title":{},"body":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["getbytitle(title",{"_index":1277,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["getcatbyidparam",{"_index":50,"title":{"classes/GetCatByIdParam.html":{}},"body":{"classes/Address.html":{},"controllers/CatController.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["getcompanies",{"_index":607,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getcompanies(@res",{"_index":647,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getcompanies(res",{"_index":621,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getcompany",{"_index":608,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["getcompany(@res",{"_index":651,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getcompany(companyid",{"_index":699,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getcompany(res",{"_index":629,"title":{},"body":{"controllers/CompanyController.html":{}}}],["getconnectionoptions",{"_index":1008,"title":{},"body":{"modules/DbModule.html":{}}}],["getconnectionoptions(dbconfig",{"_index":1009,"title":{},"body":{"modules/DbModule.html":{}}}],["getconnectionoptionspostgres",{"_index":1012,"title":{},"body":{"modules/DbModule.html":{}}}],["getcurrentcompany",{"_index":689,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getcurrentcompany(companyid",{"_index":701,"title":{},"body":{"injectables/CompanyService.html":{}}}],["getcustomrepository",{"_index":926,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["getcustomrepository(userrepository",{"_index":930,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["getextention",{"_index":2037,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["getextention(extention",{"_index":2043,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["gethealth",{"_index":121,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["gethealthcheck",{"_index":136,"title":{},"body":{"controllers/AppController-8.html":{},"controllers/AppController-9.html":{}}}],["gethello",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"controllers/AppController-9.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{}}}],["getnosqlconnectionoptions",{"_index":953,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["getnosqlconnectionoptions(config",{"_index":954,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["getredisconfig",{"_index":767,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getredisconfig(env",{"_index":776,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getresponsesize",{"_index":1498,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["getresponsesize(res",{"_index":1503,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["getstream",{"_index":2048,"title":{},"body":{"injectables/UploadAzureService.html":{},"controllers/UploadProcessController.html":{}}}],["getstream(imagebuffer",{"_index":2054,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["getting",{"_index":2382,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":1142,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["gettoken(authtoken",{"_index":1151,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["getuser",{"_index":434,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getuser(@param",{"_index":456,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getuser(params",{"_index":440,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["gif",{"_index":2059,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["graph",{"_index":2409,"title":{},"body":{"modules.html":{}}}],["group",{"_index":1321,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["guard",{"_index":1023,"title":{"guards/DoesUserExist.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}},"body":{}}],["guards",{"_index":1024,"title":{},"body":{"guards/DoesUserExist.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"overview.html":{}}}],["guid",{"_index":945,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["guid.write(uuid",{"_index":947,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["h",{"_index":1511,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["handle",{"_index":1091,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"interfaces/IPagination.html":{},"injectables/PostService.html":{},"classes/UserCreatedHandler.html":{}}}],["handle(event",{"_index":2180,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["handleerror",{"_index":2307,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["handleerror(errors",{"_index":2308,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["handlemessageprinted",{"_index":101,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["handlemessageprinted(data",{"_index":102,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["handleordercreatedevent",{"_index":1691,"title":{},"body":{"injectables/PostService.html":{}}}],["handleordercreatedevent(payload",{"_index":1293,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["hash",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashedpassword",{"_index":2239,"title":{},"body":{"injectables/UserService.html":{}}}],["hashpassword",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(password",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1855,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["header",{"_index":315,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"interfaces/RequestModel.html":{}}}],["header.join",{"_index":1559,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["health",{"_index":126,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["healthcheck",{"_index":1187,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["healthcheckservice",{"_index":1188,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["healthcontroller",{"_index":1181,"title":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["heavily",{"_index":2396,"title":{},"body":{"index.html":{}}}],["hello",{"_index":96,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/UploadProcessController.html":{}}}],["helper",{"_index":2085,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["hh:mm:ss",{"_index":1429,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["history",{"_index":587,"title":{},"body":{"classes/Company.html":{},"classes/CompanyDTO.html":{}}}],["host",{"_index":739,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"modules/RedisCacheModule.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"injectables/TypeOrmConfigService.html":{}}}],["host.switchtohttp",{"_index":1217,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["http",{"_index":735,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"miscellaneous/enumerations.html":{}}}],["http(message",{"_index":1387,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["http/1.0",{"_index":1527,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["httpcode",{"_index":499,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["httpcode(httpstatus.ok",{"_index":512,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{}}}],["httpexception",{"_index":291,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService-1.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"interfaces/RequestModel.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/UserService.html":{}}}],["httpexception('new",{"_index":1095,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["httpexception('post",{"_index":1273,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["httpexception('something",{"_index":2244,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexception('user",{"_index":2237,"title":{},"body":{"injectables/UserService.html":{}}}],["httpexceptionfilter",{"_index":1207,"title":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["httpexceptionfilter())@get('/filter",{"_index":1982,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["https://www.youtube.com/watch?v=8d75",{"_index":2386,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService-1.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"interfaces/RequestModel.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{}}}],["httpstatus.bad_gateway",{"_index":1096,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["httpstatus.bad_request",{"_index":300,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"interfaces/RequestModel.html":{}}}],["httpstatus.conflict",{"_index":1280,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["httpstatus.forbidden",{"_index":1988,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["httpstatus.internal_server_error",{"_index":1235,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{},"injectables/UserService.html":{}}}],["httpstatus.not_found",{"_index":1274,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/UserService.html":{}}}],["httpstatus.ok",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["httpstatus.unauthorized",{"_index":304,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["i/g",{"_index":1556,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["icommand",{"_index":2280,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["icommandhandler",{"_index":900,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["id",{"_index":51,"title":{},"body":{"classes/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["idatabaseconfig",{"_index":1243,"title":{"interfaces/IDatabaseConfig.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{}}}],["idatabaseconfigattributes",{"_index":1245,"title":{"interfaces/IDatabaseConfigAttributes.html":{}},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{}}}],["identd",{"_index":1521,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["ieventhandler",{"_index":2179,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["if(userid",{"_index":940,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["ignore_above",{"_index":1922,"title":{},"body":{"injectables/SearchService.html":{}}}],["ignoreexpiration",{"_index":1357,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilike",{"_index":1317,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["image",{"_index":2121,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["imagebuffer",{"_index":1133,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{}}}],["imagefilefilter",{"_index":2084,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["immutable",{"_index":774,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["impl/create",{"_index":916,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["impl/user",{"_index":2183,"title":{},"body":{"classes/UserCreatedHandler.html":{}}}],["implements",{"_index":296,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"classes/CreateUserHandler.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"modules/RedisCacheModule.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"modules/SearchModule.html":{},"injectables/TypeOrmConfigService.html":{},"classes/UserCreatedHandler.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["import",{"_index":24,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["imports",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CompanyModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["imutation",{"_index":361,"title":{"classes/IMutation.html":{}},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{}}}],["include",{"_index":1798,"title":{},"body":{"injectables/PostsService.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1616304930711.html":{}}}],["index(['email",{"_index":1599,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{}}}],["indexpost",{"_index":1900,"title":{},"body":{"injectables/SearchService.html":{}}}],["indexpost(post",{"_index":1906,"title":{},"body":{"injectables/SearchService.html":{}}}],["indicates",{"_index":2334,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["inestapplication",{"_index":2368,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/enumerations.html":{},"classes/user1616304930711.html":{}}}],["info(message",{"_index":1390,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["info.level",{"_index":1421,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["info.message",{"_index":1425,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["info[message",{"_index":1432,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["inject",{"_index":82,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"interfaces/IPagination.html":{},"injectables/PostService.html":{},"injectables/PostsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"modules/SearchModule.html":{},"injectables/UsersService.html":{}}}],["inject(cache_manager",{"_index":1266,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{}}}],["injectable",{"_index":177,"title":{"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"injectables/CatsService.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"injectables/SearchService.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}},"body":{"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"injectables/CatsService.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"injectables/SearchService.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["injectables",{"_index":178,"title":{},"body":{"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"injectables/CatsService.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"injectables/SearchService.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"overview.html":{}}}],["injectmodel",{"_index":706,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/FirebaseAuthService.html":{}}}],["injectmodel('user",{"_index":1154,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["injectrepository",{"_index":426,"title":{},"body":{"injectables/AuthService-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/TestService.html":{},"injectables/UserService.html":{}}}],["injectrepository(post",{"_index":1264,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["injectrepository(user",{"_index":2232,"title":{},"body":{"injectables/UserService.html":{}}}],["input",{"_index":1250,"title":{},"body":{"classes/IMutation.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["input.email",{"_index":1951,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["input.password",{"_index":1952,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["inspired",{"_index":2397,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2399,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1234,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{},"injectables/ValidateInputPipe.html":{}}}],["int4_ops",{"_index":2441,"title":{},"body":{"classes/user1616304930711.html":{}}}],["intercept",{"_index":1083,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["intercept(context",{"_index":1084,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["interceptor",{"_index":1484,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["interface",{"_index":312,"title":{"interfaces/Cat.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{}},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/Cat.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["interfaces",{"_index":480,"title":{},"body":{"interfaces/Cat.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"overview.html":{}}}],["internal",{"_index":1241,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["internalservererrorexception",{"_index":705,"title":{},"body":{"injectables/CompanyService.html":{}}}],["invalid",{"_index":303,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["ioredis",{"_index":1821,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["ip",{"_index":1520,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["ipagination",{"_index":1251,"title":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{}},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["iquery",{"_index":365,"title":{"classes/IQuery.html":{}},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{}}}],["isarray",{"_index":26,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["isauthenticate",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/UserController-1.html":{}}}],["isdefined",{"_index":892,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["isemail",{"_index":848,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["isenum",{"_index":2205,"title":{},"body":{"classes/UserDto.html":{}}}],["isenum(gender",{"_index":2207,"title":{},"body":{"classes/UserDto.html":{}}}],["isglobal",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":27,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["isloglevel",{"_index":1418,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"miscellaneous/functions.html":{}}}],["isloglevel(p0",{"_index":1441,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["isloglevel(value",{"_index":2379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isnan(parsed",{"_index":1537,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["isnotempty",{"_index":534,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"classes/PostDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["isnotempty()@isemail",{"_index":2198,"title":{},"body":{"classes/UserDto.html":{}}}],["isnotempty()@isenum(gender",{"_index":2200,"title":{},"body":{"classes/UserDto.html":{}}}],["isnotempty()@minlength(4",{"_index":1685,"title":{},"body":{"classes/PostDto.html":{}}}],["isnotempty()@minlength(6",{"_index":2203,"title":{},"body":{"classes/UserDto.html":{}}}],["isnumber",{"_index":849,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["isoptional",{"_index":28,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["isstring",{"_index":29,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/UserDTO.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["isuuid",{"_index":30,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["isvalid",{"_index":2323,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["jepg",{"_index":2060,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["join",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["jpeg",{"_index":2064,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["jpg",{"_index":2057,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["js",{"_index":1066,"title":{},"body":{"modules/DomainModule.html":{},"index.html":{}}}],["json",{"_index":1222,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{}}}],["jsonb",{"_index":1590,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{}}}],["jsonb_to_recordset(post.tags",{"_index":1313,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["jwt",{"_index":1351,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt.strategy",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":1355,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":342,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["keepconnectionalive",{"_index":1021,"title":{},"body":{"modules/DbModule.html":{}}}],["key",{"_index":1129,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/RedisCacheService.html":{},"classes/user1616304930711.html":{}}}],["keyword",{"_index":1921,"title":{},"body":{"injectables/SearchService.html":{}}}],["l",{"_index":1512,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["leave",{"_index":1522,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["length",{"_index":1533,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"entities/User.html":{},"classes/User-2.html":{},"entities/Users.html":{}}}],["length(4",{"_index":2144,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["level",{"_index":734,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"miscellaneous/functions.html":{}}}],["limit",{"_index":856,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["line",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-3.html":{},"classes/DbError.html":{},"classes/DbError-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["line:cognitive",{"_index":1296,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["line:cyclomatic",{"_index":1299,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["line:early",{"_index":1916,"title":{},"body":{"injectables/SearchService.html":{}}}],["line:max",{"_index":41,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["line:mccabe",{"_index":1298,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["line:no",{"_index":1911,"title":{},"body":{"injectables/SearchService.html":{}}}],["link",{"_index":1440,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["listall",{"_index":486,"title":{},"body":{"controllers/CatController.html":{}}}],["listallproducts",{"_index":462,"title":{},"body":{"controllers/BlogController.html":{},"controllers/ProductController.html":{}}}],["listen",{"_index":737,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["literal",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["loadfromenv",{"_index":768,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["loads",{"_index":780,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["local",{"_index":1370,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["local.strategy",{"_index":349,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":343,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"overview.html":{}}}],["lofusingdotenv",{"_index":805,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["log",{"_index":733,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["log(level",{"_index":1393,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["log(message",{"_index":1396,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["log(p0",{"_index":1398,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["logger",{"_index":325,"title":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}},"body":{"injectables/AuthMiddleware-3.html":{},"injectables/AuthService-1.html":{},"controllers/CatController.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"modules/LoggerModule.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"modules/RedisCacheModule.html":{},"injectables/TestService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["logger('cache",{"_index":1830,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["logger(authservice.name",{"_index":425,"title":{},"body":{"injectables/AuthService-1.html":{}}}],["logger(healthcontroller.name",{"_index":1192,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["logger(postservice.name",{"_index":1263,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["logger(testservice.name",{"_index":2009,"title":{},"body":{"injectables/TestService.html":{}}}],["logger(userservice.name",{"_index":2230,"title":{},"body":{"injectables/UserService.html":{}}}],["logger.interceptor",{"_index":1659,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["logger.middleware",{"_index":1574,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger/logger",{"_index":328,"title":{},"body":{"injectables/AuthMiddleware-3.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["logger/logger.module",{"_index":677,"title":{},"body":{"modules/CompanyModule.html":{}}}],["loggerinterceptor",{"_index":1462,"title":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["loggermiddleware",{"_index":1495,"title":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{}},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{}}}],["loggermodule",{"_index":673,"title":{"modules/LoggerModule.html":{}},"body":{"modules/CompanyModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":1413,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["logging",{"_index":1019,"title":{},"body":{"modules/DbModule.html":{},"injectables/TypeOrmConfigService.html":{}}}],["login",{"_index":246,"title":{},"body":{"controllers/AuthController-2.html":{},"injectables/AuthService.html":{},"classes/IMutation.html":{}}}],["login(@request",{"_index":269,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["login(req",{"_index":248,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["login(user",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(username",{"_index":363,"title":{},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{}}}],["loglevel",{"_index":728,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["loglevel.debug",{"_index":1383,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["loglevel.error",{"_index":1386,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["loglevel.http",{"_index":1389,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["loglevel.info",{"_index":1392,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["loglevel.silly",{"_index":1405,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["loglevel.verbose",{"_index":1408,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["loglevel.warn",{"_index":1411,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["lowercase",{"_index":1936,"title":{},"body":{"injectables/SearchService.html":{}}}],["main",{"_index":977,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["main.ts",{"_index":2345,"title":{},"body":{"miscellaneous/functions.html":{}}}],["male",{"_index":2157,"title":{},"body":{"classes/User-1.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["manager",{"_index":1819,"title":{},"body":{"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{}}}],["manytoone",{"_index":537,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post-2.html":{},"entities/Tag.html":{}}}],["manytoone(undefined",{"_index":574,"title":{},"body":{"entities/Comment.html":{},"entities/Post-2.html":{},"entities/Tag.html":{}}}],["map",{"_index":2283,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["map((event",{"_index":2287,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["map((file",{"_index":1069,"title":{},"body":{"modules/DomainModule.html":{}}}],["mappings",{"_index":1919,"title":{},"body":{"injectables/SearchService.html":{}}}],["match",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/SearchService.html":{}}}],["match.length",{"_index":1156,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["matching",{"_index":53,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"classes/user1616304930711.html":{}}}],["max",{"_index":987,"title":{},"body":{"classes/DbConfigError.html":{},"classes/DbConfigError-3.html":{},"classes/DbError.html":{},"classes/DbError-3.html":{},"modules/DomainModule.html":{}}}],["max_gram",{"_index":1930,"title":{},"body":{"injectables/SearchService.html":{}}}],["maxretries",{"_index":1874,"title":{},"body":{"modules/SearchModule.html":{}}}],["means",{"_index":764,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"controllers/PostsController.html":{}}}],["message",{"_index":85,"title":{"classes/Message.html":{},"classes/Message-1.html":{}},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"controllers/CompanyController.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"injectables/ErrorsInterceptor.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"controllers/PostsController.html":{},"interfaces/RequestModel.html":{},"classes/UserDto.html":{},"miscellaneous/enumerations.html":{}}}],["message('hello",{"_index":94,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["message.event",{"_index":86,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["messages",{"_index":1375,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["metadata",{"_index":2311,"title":{},"body":{"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["method",{"_index":559,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["methoddecorator",{"_index":2109,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["methods",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedHandler.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["microservice/.../main.ts",{"_index":2346,"title":{},"body":{"miscellaneous/functions.html":{}}}],["microservice/microservice",{"_index":76,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"injectables/AppService-2.html":{},"injectables/AppService-4.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"miscellaneous/functions.html":{}}}],["microservice/microservices",{"_index":99,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{},"injectables/AppService-3.html":{},"injectables/AppService-5.html":{},"miscellaneous/functions.html":{}}}],["middleware",{"_index":1423,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["middleware/auth.guard",{"_index":468,"title":{},"body":{"controllers/BlogController.html":{},"controllers/ProductController.html":{}}}],["middleware/role.decorator",{"_index":470,"title":{},"body":{"controllers/BlogController.html":{},"controllers/ProductController.html":{}}}],["middlewareconsumer",{"_index":548,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{}}}],["migration",{"_index":2032,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["migration/*.js",{"_index":2029,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["migrationinterface",{"_index":2426,"title":{},"body":{"classes/user1616304930711.html":{}}}],["migrations",{"_index":2028,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["migrationsdir",{"_index":2031,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["migrationsrun",{"_index":2025,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["migrationstablename",{"_index":2026,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["min",{"_index":850,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["min(1",{"_index":861,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["min_gram",{"_index":1929,"title":{},"body":{"injectables/SearchService.html":{}}}],["minlength",{"_index":851,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/PostDto.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["minlength(2",{"_index":864,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["minlength(4",{"_index":858,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/PostDto.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/UserDTO.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["minlength(6",{"_index":2206,"title":{},"body":{"classes/UserDto.html":{}}}],["minlength(8",{"_index":2196,"title":{},"body":{"classes/UserDTO.html":{}}}],["miscellaneous",{"_index":2325,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":299,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"modules/DatabaseModule.html":{},"interfaces/RequestModel.html":{}}}],["mmm",{"_index":1427,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["model",{"_index":691,"title":{},"body":{"injectables/CompanyService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/PostsService.html":{},"classes/User-1.html":{}}}],["model/company",{"_index":681,"title":{},"body":{"modules/CompanyModule.html":{},"injectables/CompanyService.html":{}}}],["modify",{"_index":1959,"title":{},"body":{"classes/Signup.html":{}}}],["module",{"_index":148,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":150,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/users/users.service",{"_index":1037,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["moment",{"_index":1414,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["moment().format('dd/mmm/yyyy:hh:mm:ss",{"_index":1543,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["moment().format('ddd",{"_index":1426,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["mongo",{"_index":729,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-2.html":{},"interfaces/RedisConfig.html":{}}}],["mongoose",{"_index":598,"title":{},"body":{"classes/Company.html":{},"injectables/CompanyService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/ValidateObjectId.html":{}}}],["mongoose.types.objectid.isvalid(value",{"_index":2324,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["mongoose/.../company.controller.ts",{"_index":2332,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mongoose/.../company.ts",{"_index":2422,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mongoose/.../loglevel.ts",{"_index":2329,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mongoose/.../swagger.ts",{"_index":2352,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongoose/src/app/company/controller/company.controller.ts",{"_index":603,"title":{},"body":{"controllers/CompanyController.html":{},"miscellaneous/enumerations.html":{}}}],["mongoose/src/app/company/controller/company.controller.ts:31",{"_index":628,"title":{},"body":{"controllers/CompanyController.html":{}}}],["mongoose/src/app/company/controller/company.controller.ts:44",{"_index":631,"title":{},"body":{"controllers/CompanyController.html":{}}}],["mongoose/src/app/company/controller/company.controller.ts:56",{"_index":620,"title":{},"body":{"controllers/CompanyController.html":{}}}],["mongoose/src/app/company/controller/company.controller.ts:69",{"_index":635,"title":{},"body":{"controllers/CompanyController.html":{}}}],["mongoose/src/app/company/controller/company.controller.ts:83",{"_index":615,"title":{},"body":{"controllers/CompanyController.html":{}}}],["mongoose/src/app/company/dto/company.dto.ts",{"_index":663,"title":{},"body":{"classes/CompanyDTO.html":{}}}],["mongoose/src/app/company/dto/company.dto.ts:2",{"_index":666,"title":{},"body":{"classes/CompanyDTO.html":{}}}],["mongoose/src/app/company/dto/company.dto.ts:3",{"_index":665,"title":{},"body":{"classes/CompanyDTO.html":{}}}],["mongoose/src/app/company/dto/company.dto.ts:4",{"_index":667,"title":{},"body":{"classes/CompanyDTO.html":{}}}],["mongoose/src/app/company/dto/company.dto.ts:5",{"_index":664,"title":{},"body":{"classes/CompanyDTO.html":{}}}],["mongoose/src/app/company/entity.module.ts",{"_index":674,"title":{},"body":{"modules/CompanyModule.html":{}}}],["mongoose/src/app/company/entity.module.ts:25",{"_index":675,"title":{},"body":{"modules/CompanyModule.html":{}}}],["mongoose/src/app/company/model/company.ts",{"_index":584,"title":{},"body":{"classes/Company.html":{},"miscellaneous/typealiases.html":{}}}],["mongoose/src/app/company/model/company.ts:12",{"_index":591,"title":{},"body":{"classes/Company.html":{}}}],["mongoose/src/app/company/model/company.ts:15",{"_index":594,"title":{},"body":{"classes/Company.html":{}}}],["mongoose/src/app/company/model/company.ts:18",{"_index":592,"title":{},"body":{"classes/Company.html":{}}}],["mongoose/src/app/company/model/company.ts:21",{"_index":590,"title":{},"body":{"classes/Company.html":{}}}],["mongoose/src/app/company/model/company.ts:9",{"_index":593,"title":{},"body":{"classes/Company.html":{}}}],["mongoose/src/app/company/pipe/company.pipe.ts",{"_index":2320,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["mongoose/src/app/company/pipe/company.pipe.ts:6",{"_index":2321,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["mongoose/src/app/company/services/company.service.ts",{"_index":686,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/company/services/company.service.ts:12",{"_index":702,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/company/services/company.service.ts:15",{"_index":700,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/company/services/company.service.ts:18",{"_index":704,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/company/services/company.service.ts:21",{"_index":697,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/company/services/company.service.ts:24",{"_index":695,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/company/services/company.service.ts:7",{"_index":692,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/company/services/company.service.ts:9",{"_index":698,"title":{},"body":{"injectables/CompanyService.html":{}}}],["mongoose/src/app/controllers/app.controller.ts",{"_index":135,"title":{},"body":{"controllers/AppController-8.html":{}}}],["mongoose/src/app/controllers/app.controller.ts:7",{"_index":138,"title":{},"body":{"controllers/AppController-8.html":{}}}],["mongoose/src/app/core/filter/exception.filter.ts",{"_index":1232,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["mongoose/src/app/core/filter/exception.filter.ts:6",{"_index":1233,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["mongoose/src/app/core/guard/role.guard.ts",{"_index":1857,"title":{},"body":{"guards/RolesGuard-1.html":{}}}],["mongoose/src/app/core/guard/role.guard.ts:5",{"_index":1858,"title":{},"body":{"guards/RolesGuard-1.html":{}}}],["mongoose/src/app/core/guard/role.guard.ts:8",{"_index":1859,"title":{},"body":{"guards/RolesGuard-1.html":{}}}],["mongoose/src/app/core/middleware/middleware.ts",{"_index":324,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["mongoose/src/app/core/middleware/middleware.ts:13",{"_index":327,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["mongoose/src/app/core/middleware/middleware.ts:8",{"_index":326,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["mongoose/src/config/config.interface.ts",{"_index":747,"title":{},"body":{"interfaces/ConfigData-2.html":{}}}],["mongoose/src/config/config.service.ts",{"_index":804,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["mongoose/src/config/config.service.ts:11",{"_index":806,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["mongoose/src/config/config.service.ts:20",{"_index":808,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["mongoose/src/config/config.service.ts:24",{"_index":809,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["mongoose/src/config/config.service.ts:33",{"_index":807,"title":{},"body":{"injectables/ConfigService-2.html":{}}}],["mongoose/src/database/db.error.ts",{"_index":992,"title":{},"body":{"classes/DbConfigError-3.html":{},"classes/DbError-3.html":{}}}],["mongoose/src/database/db.error.ts:1",{"_index":1001,"title":{},"body":{"classes/DbError-3.html":{}}}],["mongoose/src/database/db.error.ts:8",{"_index":993,"title":{},"body":{"classes/DbConfigError-3.html":{}}}],["mongoose/src/logger/logger.middleware.ts",{"_index":1560,"title":{},"body":{"injectables/LoggerMiddleware-2.html":{}}}],["mongoose/src/logger/logger.middleware.ts:11",{"_index":1564,"title":{},"body":{"injectables/LoggerMiddleware-2.html":{}}}],["mongoose/src/logger/logger.middleware.ts:32",{"_index":1563,"title":{},"body":{"injectables/LoggerMiddleware-2.html":{}}}],["mongoose/src/logger/logger.middleware.ts:43",{"_index":1562,"title":{},"body":{"injectables/LoggerMiddleware-2.html":{}}}],["mongoose/src/logger/logger.middleware.ts:8",{"_index":1561,"title":{},"body":{"injectables/LoggerMiddleware-2.html":{}}}],["mongoose/src/logger/logger.ts",{"_index":1450,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:102",{"_index":1452,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:110",{"_index":1459,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:28",{"_index":1451,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:46",{"_index":1456,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:51",{"_index":1457,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:52",{"_index":1458,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:62",{"_index":1453,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:70",{"_index":1461,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:78",{"_index":1455,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:86",{"_index":1454,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/logger.ts:94",{"_index":1460,"title":{},"body":{"injectables/Logger-2.html":{}}}],["mongoose/src/logger/loglevel.ts",{"_index":2335,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mongoose/src/swagger/swagger.interface.ts",{"_index":1966,"title":{},"body":{"interfaces/SwaggerConfig-5.html":{}}}],["mongoose/src/swagger/swagger.ts",{"_index":2375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongoosemodule",{"_index":676,"title":{},"body":{"modules/CompanyModule.html":{},"modules/DatabaseModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":966,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongoosemoduleoptions",{"_index":956,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["multer",{"_index":2083,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["mysql",{"_index":2017,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["name",{"_index":44,"title":{},"body":{"classes/Address.html":{},"controllers/AppController-3.html":{},"controllers/AppController-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"classes/User-1.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/functions.html":{},"classes/user1616304930711.html":{}}}],["need",{"_index":2123,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["nest",{"_index":2384,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1087,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["nestjs",{"_index":57,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1616304930711.html":{}}}],["nestjs/.../swagger.ts",{"_index":2355,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["nestjs/common/exceptions/http.exception",{"_index":292,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["nestjs/config",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"injectables/TypeOrmConfigService.html":{}}}],["nestjs/core",{"_index":1850,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["nestjs/cqrs",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserHandler.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{},"classes/UserCreatedHandler.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{}}}],["nestjs/elasticsearch",{"_index":1869,"title":{},"body":{"modules/SearchModule.html":{},"injectables/SearchService.html":{}}}],["nestjs/event",{"_index":1053,"title":{},"body":{"modules/DomainModule.html":{},"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["nestjs/jwt",{"_index":347,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["nestjs/microservices",{"_index":84,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{}}}],["nestjs/mongoose",{"_index":596,"title":{},"body":{"classes/Company.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"modules/DatabaseModule.html":{},"injectables/FirebaseAuthService.html":{}}}],["nestjs/passport",{"_index":261,"title":{},"body":{"controllers/AuthController-2.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{}}}],["nestjs/platform",{"_index":2080,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["nestjs/schedule",{"_index":1056,"title":{},"body":{"modules/DomainModule.html":{},"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["nestjs/src/app/common/auth.middleware.ts",{"_index":320,"title":{},"body":{"injectables/AuthMiddleware-2.html":{}}}],["nestjs/src/app/common/auth.middleware.ts:10",{"_index":322,"title":{},"body":{"injectables/AuthMiddleware-2.html":{}}}],["nestjs/src/app/common/auth.middleware.ts:6",{"_index":321,"title":{},"body":{"injectables/AuthMiddleware-2.html":{}}}],["nestjs/src/app/common/exception.filter.ts",{"_index":1229,"title":{},"body":{"classes/HttpExceptionFilter-4.html":{}}}],["nestjs/src/app/common/exception.filter.ts:10",{"_index":1230,"title":{},"body":{"classes/HttpExceptionFilter-4.html":{}}}],["nestjs/src/app/common/exception.interceptor.ts",{"_index":1082,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["nestjs/src/app/common/exception.interceptor.ts:14",{"_index":1086,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["nestjs/src/app/common/logger.middleware.ts",{"_index":1565,"title":{},"body":{"injectables/LoggerMiddleware-3.html":{}}}],["nestjs/src/app/common/logger.middleware.ts:6",{"_index":1566,"title":{},"body":{"injectables/LoggerMiddleware-3.html":{}}}],["nestjs/src/app/controllers/app.controller.ts",{"_index":142,"title":{},"body":{"controllers/AppController-9.html":{}}}],["nestjs/src/app/controllers/app.controller.ts:14",{"_index":144,"title":{},"body":{"controllers/AppController-9.html":{}}}],["nestjs/src/app/controllers/app.controller.ts:7",{"_index":146,"title":{},"body":{"controllers/AppController-9.html":{}}}],["nestjs/src/app/domain/cat.controller.ts",{"_index":483,"title":{},"body":{"controllers/CatController.html":{}}}],["nestjs/src/app/domain/cat.controller.ts:46",{"_index":494,"title":{},"body":{"controllers/CatController.html":{}}}],["nestjs/src/app/domain/cat.controller.ts:59",{"_index":497,"title":{},"body":{"controllers/CatController.html":{}}}],["nestjs/src/app/domain/cat.dto.ts",{"_index":7,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["nestjs/src/app/domain/cat.dto.ts:13",{"_index":23,"title":{},"body":{"classes/Address.html":{}}}],["nestjs/src/app/domain/cat.dto.ts:20",{"_index":837,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["nestjs/src/app/domain/cat.dto.ts:24",{"_index":835,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["nestjs/src/app/domain/cat.dto.ts:28",{"_index":836,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["nestjs/src/app/domain/cat.dto.ts:36",{"_index":833,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["nestjs/src/app/domain/cat.dto.ts:44",{"_index":1180,"title":{},"body":{"classes/GetCatByIdParam.html":{}}}],["nestjs/src/app/domain/cat.dto.ts:9",{"_index":21,"title":{},"body":{"classes/Address.html":{}}}],["nestjs/src/app/domain/cat.interface.ts",{"_index":481,"title":{},"body":{"interfaces/Cat.html":{}}}],["nestjs/src/app/domain/cat.module.ts",{"_index":545,"title":{},"body":{"modules/CatsModule.html":{}}}],["nestjs/src/app/domain/cat.module.ts:11",{"_index":549,"title":{},"body":{"modules/CatsModule.html":{}}}],["nestjs/src/app/domain/cat.service.ts",{"_index":561,"title":{},"body":{"injectables/CatsService.html":{}}}],["nestjs/src/app/domain/cat.service.ts:12",{"_index":565,"title":{},"body":{"injectables/CatsService.html":{}}}],["nestjs/src/app/domain/cat.service.ts:6",{"_index":566,"title":{},"body":{"injectables/CatsService.html":{}}}],["nestjs/src/app/domain/cat.service.ts:8",{"_index":564,"title":{},"body":{"injectables/CatsService.html":{}}}],["nestjs/src/swagger/swagger.interface.ts",{"_index":1967,"title":{},"body":{"interfaces/SwaggerConfig-8.html":{}}}],["nestjs/src/swagger/swagger.ts",{"_index":2378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nestjs/swagger",{"_index":34,"title":{},"body":{"classes/Address.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/ProductController.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["nestjs/terminus",{"_index":1190,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["nestjs/typeorm",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService-1.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["nestmiddleware",{"_index":290,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["nestmodule",{"_index":552,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{}}}],["new",{"_index":93,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"modules/ConfigModule.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"guards/DoesUserExist.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"modules/RedisCacheModule.html":{},"interfaces/RequestModel.html":{},"classes/SignUp.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["newcompany",{"_index":722,"title":{},"body":{"injectables/CompanyService.html":{}}}],["newcompany.save",{"_index":724,"title":{},"body":{"injectables/CompanyService.html":{}}}],["newly",{"_index":1760,"title":{},"body":{"controllers/PostsController.html":{}}}],["newpost",{"_index":1281,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["newrelic",{"_index":1486,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["newuser",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["newuser['datavalues",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":40,"title":{},"body":{"classes/Address.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"classes/CreateCatDto.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-3.html":{},"classes/DbError.html":{},"classes/DbError-3.html":{},"injectables/ErrorsInterceptor.html":{},"classes/GetCatByIdParam.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"interfaces/RequestModel.html":{},"injectables/SearchService.html":{}}}],["next.handle().pipe",{"_index":1471,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["nextfunction",{"_index":286,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["node",{"_index":1872,"title":{},"body":{"modules/SearchModule.html":{}}}],["node.js",{"_index":2389,"title":{},"body":{"index.html":{}}}],["nodejs.processenv",{"_index":777,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["note",{"_index":972,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["notfoundexception",{"_index":1744,"title":{},"body":{"controllers/PostsController.html":{}}}],["notfoundexception('this",{"_index":1756,"title":{},"body":{"controllers/PostsController.html":{}}}],["now",{"_index":1469,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"classes/user1616304930711.html":{}}}],["now}ms",{"_index":1480,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["null",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/UsersSagas.html":{},"classes/user1616304930711.html":{}}}],["number",{"_index":22,"title":{},"body":{"classes/Address.html":{},"interfaces/Cat.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/Company.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{},"injectables/UsersService.html":{}}}],["number(params.limit",{"_index":1303,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["number(params.page",{"_index":1302,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["number(process.env.typeorm_port",{"_index":2019,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["numberofaffectedrows",{"_index":1766,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["object",{"_index":1589,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"injectables/RedisCacheService.html":{},"controllers/UploadProcessController.html":{}}}],["observable",{"_index":1032,"title":{},"body":{"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/UsersSagas.html":{}}}],["offset",{"_index":1322,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["oftype",{"_index":2281,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["oftype(usercreatedevent",{"_index":2285,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["ok",{"_index":127,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"controllers/CatController.html":{}}}],["ok'})@apibadrequestresponse({description",{"_index":490,"title":{},"body":{"controllers/CatController.html":{}}}],["onapplicationbootstrap",{"_index":79,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["ondelete",{"_index":577,"title":{},"body":{"entities/Comment.html":{},"entities/Post-2.html":{},"entities/Tag.html":{}}}],["onetomany",{"_index":538,"title":{},"body":{"entities/Category.html":{},"entities/Post-2.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["onetomany(undefined",{"_index":1615,"title":{},"body":{"entities/Post-2.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["onetoone",{"_index":539,"title":{},"body":{"entities/Category.html":{},"entities/Post-2.html":{}}}],["onetoone(undefined",{"_index":529,"title":{},"body":{"entities/Category.html":{},"entities/Post-2.html":{}}}],["onevent",{"_index":1255,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["onevent('user.created",{"_index":1292,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["onmoduleinit",{"_index":1817,"title":{},"body":{"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{}}}],["openapi",{"_index":2370,"title":{},"body":{"miscellaneous/functions.html":{}}}],["openapiobject",{"_index":2371,"title":{},"body":{"miscellaneous/functions.html":{}}}],["operation",{"_index":1364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["optional",{"_index":107,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/functions.html":{},"classes/user1616304930711.html":{}}}],["options",{"_index":971,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["order",{"_index":854,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["ordercreatedevent",{"_index":1295,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["originalname",{"_index":2094,"title":{},"body":{"controllers/UploadController.html":{}}}],["out",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["over",{"_index":1312,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["overview",{"_index":2411,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":588,"title":{},"body":{"classes/Company.html":{},"classes/CompanyDTO.html":{}}}],["p0",{"_index":1401,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["p1",{"_index":1399,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["page",{"_index":867,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["pagination",{"_index":1301,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["pagination.limit",{"_index":1307,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["pagination.page",{"_index":1306,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["pagination/.../main.ts",{"_index":2342,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pagination/.../swagger.ts",{"_index":2351,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pagination/src/app/controllers/app.controller.ts",{"_index":1201,"title":{},"body":{"controllers/HealthController-2.html":{}}}],["pagination/src/app/controllers/app.controller.ts:17",{"_index":1202,"title":{},"body":{"controllers/HealthController-2.html":{}}}],["pagination/src/app/controllers/test.controller.ts",{"_index":1991,"title":{},"body":{"controllers/TestController-1.html":{}}}],["pagination/src/app/controllers/test.controller.ts:12",{"_index":1992,"title":{},"body":{"controllers/TestController-1.html":{}}}],["pagination/src/app/controllers/test.controller.ts:22",{"_index":1993,"title":{},"body":{"controllers/TestController-1.html":{}}}],["pagination/src/app/domain/controller/user.controller.ts",{"_index":1675,"title":{},"body":{"controllers/PostController-1.html":{}}}],["pagination/src/app/domain/controller/user.controller.ts:20",{"_index":1676,"title":{},"body":{"controllers/PostController-1.html":{}}}],["pagination/src/app/domain/controller/user.controller.ts:26",{"_index":1677,"title":{},"body":{"controllers/PostController-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts",{"_index":870,"title":{},"body":{"classes/CreatePostDto-1.html":{},"classes/PostTag-1.html":{},"classes/SearchPostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:15",{"_index":1724,"title":{},"body":{"classes/PostTag-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:21",{"_index":873,"title":{},"body":{"classes/CreatePostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:26",{"_index":871,"title":{},"body":{"classes/CreatePostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:31",{"_index":874,"title":{},"body":{"classes/CreatePostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:39",{"_index":872,"title":{},"body":{"classes/CreatePostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:47",{"_index":1890,"title":{},"body":{"classes/SearchPostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:55",{"_index":1892,"title":{},"body":{"classes/SearchPostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:65",{"_index":1889,"title":{},"body":{"classes/SearchPostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:75",{"_index":1888,"title":{},"body":{"classes/SearchPostDto-1.html":{}}}],["pagination/src/app/domain/dto/post.dto.ts:85",{"_index":1891,"title":{},"body":{"classes/SearchPostDto-1.html":{}}}],["pagination/src/app/domain/entities/post.ts",{"_index":1601,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:17",{"_index":1604,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:21",{"_index":1608,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:24",{"_index":1610,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:27",{"_index":1603,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:30",{"_index":1605,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:33",{"_index":1606,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:36",{"_index":1607,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:40",{"_index":1602,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/entities/post.ts:44",{"_index":1609,"title":{},"body":{"entities/Post-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts",{"_index":1337,"title":{},"body":{"interfaces/IPagination-1.html":{},"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:107",{"_index":1712,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:13",{"_index":1706,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:16",{"_index":1709,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:24",{"_index":1710,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:31",{"_index":1711,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:34",{"_index":1707,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:43",{"_index":1708,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/domain/services/post.service.ts:59",{"_index":1713,"title":{},"body":{"injectables/PostService-1.html":{}}}],["pagination/src/app/http",{"_index":1226,"title":{},"body":{"classes/HttpExceptionFilter-1.html":{}}}],["pagination/src/app/logger.interceptor.ts",{"_index":1489,"title":{},"body":{"injectables/LoggerInterceptor-1.html":{}}}],["pagination/src/app/logger.interceptor.ts:8",{"_index":1490,"title":{},"body":{"injectables/LoggerInterceptor-1.html":{}}}],["pagination/src/db/db.errors.ts",{"_index":990,"title":{},"body":{"classes/DbConfigError-2.html":{},"classes/DbError-2.html":{}}}],["pagination/src/db/db.errors.ts:1",{"_index":1000,"title":{},"body":{"classes/DbError-2.html":{}}}],["pagination/src/db/db.errors.ts:7",{"_index":991,"title":{},"body":{"classes/DbConfigError-2.html":{}}}],["pagination/src/db/db.interface.ts",{"_index":980,"title":{},"body":{"interfaces/DbConfig-1.html":{}}}],["pagination/src/main.ts",{"_index":2360,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pagination/src/swagger/swagger.interface.ts",{"_index":828,"title":{},"body":{"interfaces/Contact-2.html":{},"interfaces/SwaggerConfig-4.html":{}}}],["pagination/src/swagger/swagger.ts",{"_index":2374,"title":{},"body":{"miscellaneous/functions.html":{}}}],["param",{"_index":445,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/PostsController.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["param('companyid",{"_index":652,"title":{},"body":{"controllers/CompanyController.html":{}}}],["parameters",{"_index":106,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"injectables/SearchService.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/functions.html":{},"classes/user1616304930711.html":{}}}],["parameters_failed_validation",{"_index":614,"title":{},"body":{"controllers/CompanyController.html":{}}}],["parameters_failed_validation})@apiinternalservererrorresponse({description",{"_index":624,"title":{},"body":{"controllers/CompanyController.html":{}}}],["params",{"_index":444,"title":{},"body":{"controllers/AuthenticationController.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["parse",{"_index":1542,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["parseconfigfromenv",{"_index":769,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["parseconfigfromenv(env",{"_index":782,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["parsed",{"_index":1535,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["parseint(env.port",{"_index":792,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["parseint(env.redis_ttl",{"_index":802,"title":{},"body":{"injectables/ConfigService.html":{}}}],["parseint(posts[0",{"_index":1325,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["parseint(sizeraw",{"_index":1536,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["partial",{"_index":633,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["pass",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["passport",{"_index":1350,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportmodule",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1352,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1353,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":1431,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["password",{"_index":358,"title":{},"body":{"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"injectables/TypeOrmConfigService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"classes/user1616304930711.html":{}}}],["password'})@isstring()@minlength(8",{"_index":2192,"title":{},"body":{"classes/UserDTO.html":{}}}],["path",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"modules/DomainModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["path.extname(file",{"_index":1065,"title":{},"body":{"modules/DomainModule.html":{}}}],["payload",{"_index":1347,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PostService.html":{}}}],["per",{"_index":42,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-3.html":{},"classes/DbError.html":{},"classes/DbError-3.html":{},"classes/GetCatByIdParam.html":{}}}],["perform",{"_index":1363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pipe",{"_index":1092,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/UsersSagas.html":{}}}],["pipe/company.pipe",{"_index":639,"title":{},"body":{"controllers/CompanyController.html":{}}}],["pipetransform",{"_index":2322,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["pk_cace4a159ff9f2512dd42373760",{"_index":2439,"title":{},"body":{"classes/user1616304930711.html":{}}}],["png",{"_index":2058,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["populate('companyid",{"_index":1172,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["port",{"_index":730,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"modules/RedisCacheModule.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"injectables/TypeOrmConfigService.html":{}}}],["post",{"_index":258,"title":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{}},"body":{"controllers/AuthController-2.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CompanyController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"entities/Tag.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"entities/User.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}}}],["post('/')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":619,"title":{},"body":{"controllers/CompanyController.html":{}}}],["post('/file",{"_index":2069,"title":{},"body":{"controllers/UploadController.html":{}}}],["post('/multiple",{"_index":2074,"title":{},"body":{"controllers/UploadController.html":{}}}],["post('/upload",{"_index":2115,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["post('/upload')@apiconsumes('multipart/form",{"_index":2105,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["post('blog",{"_index":478,"title":{},"body":{"controllers/BlogController.html":{}}}],["post('blog')@roles(role.user",{"_index":463,"title":{},"body":{"controllers/BlogController.html":{}}}],["post('login",{"_index":268,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["post('post",{"_index":1644,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["post('product",{"_index":1812,"title":{},"body":{"controllers/ProductController.html":{}}}],["post('product')@roles(role.admin",{"_index":1807,"title":{},"body":{"controllers/ProductController.html":{}}}],["post('signup",{"_index":272,"title":{},"body":{"controllers/AuthController-2.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["post('user",{"_index":2166,"title":{},"body":{"controllers/UserController-1.html":{}}}],["post('user')@apiokresponse({schema",{"_index":2163,"title":{},"body":{"controllers/UserController-1.html":{}}}],["post.category",{"_index":530,"title":{},"body":{"entities/Category.html":{}}}],["post.comments",{"_index":575,"title":{},"body":{"entities/Comment.html":{}}}],["post.entity",{"_index":1748,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.tags",{"_index":1971,"title":{},"body":{"entities/Tag.html":{}}}],["post.user",{"_index":2140,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["post/search?search_term=hello",{"_index":1667,"title":{},"body":{"controllers/PostController.html":{}}}],["post/search?search_term=hello1",{"_index":1668,"title":{},"body":{"controllers/PostController.html":{}}}],["post/search?tag=nodejs",{"_index":1678,"title":{},"body":{"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["post_repository",{"_index":1793,"title":{},"body":{"injectables/PostsService.html":{}}}],["postcontroller",{"_index":1050,"title":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}},"body":{"modules/DomainModule.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["postdata",{"_index":1283,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["postdto",{"_index":1682,"title":{"classes/PostDto.html":{}},"body":{"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postentity",{"_index":1747,"title":{},"body":{"controllers/PostsController.html":{}}}],["postgres",{"_index":814,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-4.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-5.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"controllers/HealthController.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-3.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-3.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-7.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-3.html":{},"miscellaneous/functions.html":{}}}],["postid",{"_index":1910,"title":{},"body":{"injectables/SearchService.html":{}}}],["postrepo",{"_index":1265,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["postrepository",{"_index":1785,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":1323,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["posts.controller",{"_index":1779,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.length",{"_index":1336,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["posts.providers",{"_index":1781,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1746,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts[0].count",{"_index":1326,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["postscontroller",{"_index":1726,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postservice",{"_index":1262,"title":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{}}}],["postsmodule",{"_index":1775,"title":{"modules/PostsModule.html":{}},"body":{"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsproviders",{"_index":1780,"title":{},"body":{"modules/PostsModule.html":{}}}],["postsservice",{"_index":1745,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"overview.html":{}}}],["posttag",{"_index":842,"title":{"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["prefix",{"_index":118,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/PostsController.html":{},"controllers/ProductController.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}}}],["primary",{"_index":2254,"title":{},"body":{"entities/Users.html":{},"classes/user1616304930711.html":{}}}],["primarygeneratedcolumn",{"_index":527,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["printed",{"_index":97,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["private",{"_index":88,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"injectables/CatsService.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateUserHandler.html":{},"modules/DbModule.html":{},"injectables/FilesAzureService.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/PostsService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"injectables/SearchService.html":{},"injectables/TestService.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{}}}],["process",{"_index":1294,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["process.env.bucket_name",{"_index":1138,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["process.env.container_name",{"_index":2053,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["process.env.database_url",{"_index":1020,"title":{},"body":{"modules/DbModule.html":{}}}],["process.env.jwtkey",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.redis_host",{"_index":1824,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["process.env.redis_port",{"_index":1825,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["process.env.typeorm_database",{"_index":2022,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["process.env.typeorm_host",{"_index":2018,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["process.env.typeorm_password",{"_index":2021,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["process.env.typeorm_username",{"_index":2020,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["productcontroller",{"_index":1805,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{}}}],["production",{"_index":744,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["profiles",{"_index":2159,"title":{},"body":{"controllers/UserController.html":{}}}],["progressive",{"_index":2388,"title":{},"body":{"index.html":{}}}],["promise",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"classes/AuthPayload.html":{},"controllers/BlogController.html":{},"injectables/CompanyService.html":{},"classes/CreateUserHandler.html":{},"guards/DoesUserExist.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/LocalStrategy.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UsersService.html":{},"classes/user1616304930711.html":{}}}],["promise((resolve",{"_index":1116,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["prop",{"_index":589,"title":{},"body":{"classes/Company.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/Address.html":{},"classes/AuthPayload.html":{},"injectables/AuthService-1.html":{},"interfaces/Cat.html":{},"entities/Category.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"classes/CompanyDTO.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"injectables/FilesAzureService.html":{},"classes/GetCatByIdParam.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"injectables/TestService.html":{},"controllers/UploadProcessController.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"classes/UserCreatedEvent.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"injectables/UsersSagas.html":{}}}],["propertydescriptor",{"_index":2113,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["propertykey",{"_index":2111,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["provide",{"_index":757,"title":{},"body":{"modules/ConfigModule.html":{}}}],["provided",{"_index":330,"title":{},"body":{"injectables/AuthMiddleware-3.html":{},"controllers/UploadProcessController.html":{}}}],["providers",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{}}}],["providers:[rediscacheservice",{"_index":1829,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["provides",{"_index":763,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["public",{"_index":49,"title":{},"body":{"classes/Address.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"entities/Comment.html":{},"modules/CompanyModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"modules/LoggerModule.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RequestModel.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"entities/User.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"injectables/ValidateInputPipe.html":{},"classes/user1616304930711.html":{}}}],["purged",{"_index":662,"title":{},"body":{"controllers/CompanyController.html":{}}}],["put",{"_index":500,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostsController.html":{}}}],["put('/:companyid",{"_index":656,"title":{},"body":{"controllers/CompanyController.html":{}}}],["put(':id",{"_index":1762,"title":{},"body":{"controllers/PostsController.html":{}}}],["query",{"_index":1310,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/SearchService.html":{},"injectables/TypeOrmConfigService.html":{}}}],["querybuilder",{"_index":1320,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["queryhandlers",{"_index":2272,"title":{},"body":{"modules/UsersModule.html":{}}}],["queryparams",{"_index":1653,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["queryrunner",{"_index":2429,"title":{},"body":{"classes/user1616304930711.html":{}}}],["queryrunner.query",{"_index":2433,"title":{},"body":{"classes/user1616304930711.html":{}}}],["queryrunner.query(`drop",{"_index":2445,"title":{},"body":{"classes/user1616304930711.html":{}}}],["querystring",{"_index":1316,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["r",{"_index":1515,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["rabbitmq",{"_index":75,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"classes/Message.html":{},"miscellaneous/functions.html":{}}}],["readable",{"_index":1106,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["readonly",{"_index":10,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/CatController.html":{},"injectables/CatsService.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateCatDto.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserHandler.html":{},"guards/DoesUserExist.html":{},"injectables/FirebaseAuthService.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/RedisCacheModule.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"injectables/TestService.html":{},"injectables/UploadAzureService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"classes/UserCreatedEvent.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":103,"title":{},"body":{"controllers/AppController-3.html":{},"controllers/AppController-5.html":{}}}],["records",{"_index":868,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["redis",{"_index":731,"title":{},"body":{"interfaces/ConfigData.html":{},"injectables/ConfigService.html":{},"injectables/FirebaseAuthService.html":{},"interfaces/RedisConfig.html":{}}}],["redis.service",{"_index":1153,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"modules/RedisCacheModule.html":{}}}],["redis/redis.module",{"_index":1059,"title":{},"body":{"modules/DomainModule.html":{}}}],["rediscachemodule",{"_index":1047,"title":{"modules/RedisCacheModule.html":{}},"body":{"modules/DomainModule.html":{},"modules/RedisCacheModule.html":{},"modules.html":{},"overview.html":{}}}],["rediscacheservice",{"_index":1144,"title":{"injectables/RedisCacheService.html":{}},"body":{"injectables/FirebaseAuthService.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"overview.html":{}}}],["redisconfig",{"_index":738,"title":{"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["redisstore",{"_index":1820,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["referer",{"_index":1530,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["referer}i",{"_index":1518,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["reflector",{"_index":1847,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["register",{"_index":2217,"title":{},"body":{"injectables/UserService.html":{}}}],["register(registrationdata",{"_index":2226,"title":{},"body":{"injectables/UserService.html":{}}}],["registrationdata",{"_index":438,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UserService.html":{}}}],["reject",{"_index":1117,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["reject(error",{"_index":1121,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["rejection",{"_index":1955,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["remove",{"_index":1729,"title":{},"body":{"controllers/PostsController.html":{},"injectables/SearchService.html":{}}}],["remove(@param('id",{"_index":1771,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove(id",{"_index":1738,"title":{},"body":{"controllers/PostsController.html":{}}}],["remove(postid",{"_index":1908,"title":{},"body":{"injectables/SearchService.html":{}}}],["repositories/user.repository",{"_index":2265,"title":{},"body":{"modules/UsersModule.html":{}}}],["repository",{"_index":427,"title":{},"body":{"injectables/AuthService-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/TestService.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/PostsController.html":{},"controllers/ProductController.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{}}}],["req.filevalidationerror",{"_index":2119,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["req.headers",{"_index":298,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["req.headers.authorization",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["req.headers[`${p1}`.tolowercase",{"_index":1557,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["req.httpversion",{"_index":1547,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["req.method",{"_index":1545,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["req.originalurl",{"_index":1546,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["req.socket.remoteaddress",{"_index":1540,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["req.user",{"_index":318,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["req.user.id",{"_index":1761,"title":{},"body":{"controllers/PostsController.html":{}}}],["req['user",{"_index":336,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["request",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"controllers/CatController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"guards/DoesUserExist.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{}}}],["request'})@apiinternalservererrorresponse({description",{"_index":491,"title":{},"body":{"controllers/CatController.html":{}}}],["request.method",{"_index":1238,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["request.url",{"_index":1225,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{}}}],["request.user",{"_index":1854,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["requestmethod",{"_index":553,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/DomainModule.html":{}}}],["requestmethod.all",{"_index":560,"title":{},"body":{"modules/CatsModule.html":{},"modules/CompanyModule.html":{}}}],["requestmodel",{"_index":309,"title":{"interfaces/RequestModel.html":{}},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["requesttimeout",{"_index":1875,"title":{},"body":{"modules/SearchModule.html":{}}}],["require('bcrypt",{"_index":2011,"title":{},"body":{"injectables/TestService.html":{},"injectables/UserService.html":{}}}],["require('into",{"_index":2049,"title":{},"body":{"injectables/UploadAzureService.html":{},"controllers/UploadProcessController.html":{}}}],["require(`./entities/${file}`).default",{"_index":1070,"title":{},"body":{"modules/DomainModule.html":{}}}],["require(`./services/${file}`).default",{"_index":1074,"title":{},"body":{"modules/DomainModule.html":{}}}],["required",{"_index":18,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["res",{"_index":616,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["res.getheader('content",{"_index":1532,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["res.on('close",{"_index":1508,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["res.status(httpstatus.ok).json",{"_index":649,"title":{},"body":{"controllers/CompanyController.html":{}}}],["res.statuscode",{"_index":1548,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["res_",{"_index":284,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["reset",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve(response",{"_index":1120,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["response",{"_index":285,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/FilesAzureService.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"interfaces/RequestModel.html":{},"controllers/UploadController.html":{}}}],["response.push(filereponse",{"_index":2099,"title":{},"body":{"controllers/UploadController.html":{}}}],["response.status(status).json(errorresponse",{"_index":1242,"title":{},"body":{"classes/HttpExceptionFilter-5.html":{}}}],["response.status(statuscode).json",{"_index":1231,"title":{},"body":{"classes/HttpExceptionFilter-4.html":{}}}],["result",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":52,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"classes/user1616304930711.html":{}}}],["retrieves",{"_index":773,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["return",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"injectables/CatsService.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["returning",{"_index":1804,"title":{},"body":{"injectables/PostsService.html":{}}}],["returns",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"controllers/CompanyController.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedHandler.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/functions.html":{},"classes/user1616304930711.html":{}}}],["role",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/ProductController.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"miscellaneous/enumerations.html":{}}}],["role'})@isstring()@minlength(4",{"_index":2194,"title":{},"body":{"classes/UserDTO.html":{}}}],["roles",{"_index":469,"title":{},"body":{"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["roles(role.admin",{"_index":646,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/ProductController.html":{}}}],["roles(role.admin)@delete('/:companyid')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":611,"title":{},"body":{"controllers/CompanyController.html":{}}}],["roles(role.admin)@get('/:companyid')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":630,"title":{},"body":{"controllers/CompanyController.html":{}}}],["roles(role.admin)@put('/:companyid')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":634,"title":{},"body":{"controllers/CompanyController.html":{}}}],["roles(role.user",{"_index":477,"title":{},"body":{"controllers/BlogController.html":{}}}],["roles.includes(user.role",{"_index":1856,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["rolesguard",{"_index":467,"title":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}},"body":{"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["row",{"_index":1764,"title":{},"body":{"controllers/PostsController.html":{}}}],["rxjs",{"_index":1036,"title":{},"body":{"guards/DoesUserExist.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/UsersSagas.html":{}}}],["rxjs/operators",{"_index":1090,"title":{},"body":{"injectables/ErrorsInterceptor.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/UsersSagas.html":{}}}],["s",{"_index":1516,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["s3",{"_index":825,"title":{},"body":{"interfaces/Contact-1.html":{},"classes/CreateUserDto.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"controllers/HealthController-1.html":{},"interfaces/SwaggerConfig-3.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"classes/UserParam.html":{},"miscellaneous/functions.html":{}}}],["s3.deleteobject",{"_index":1139,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["s3.upload",{"_index":1136,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["saga",{"_index":2278,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["sagas/users.saga",{"_index":2269,"title":{},"body":{"modules/UsersModule.html":{}}}],["save",{"_index":1475,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["sayhello",{"_index":2218,"title":{},"body":{"injectables/UserService.html":{}}}],["sayhello(email",{"_index":2228,"title":{},"body":{"injectables/UserService.html":{}}}],["sayhi",{"_index":2005,"title":{},"body":{"injectables/TestService.html":{}}}],["sayhi(email",{"_index":2007,"title":{},"body":{"injectables/TestService.html":{}}}],["scalable",{"_index":2393,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":1055,"title":{},"body":{"modules/DomainModule.html":{}}}],["schedulemodule.forroot",{"_index":1078,"title":{},"body":{"modules/DomainModule.html":{}}}],["schema",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"classes/Company.html":{},"modules/CompanyModule.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{},"entities/Users.html":{}}}],["schemafactory",{"_index":595,"title":{},"body":{"classes/Company.html":{}}}],["schemafactory.createforclass(company",{"_index":601,"title":{},"body":{"classes/Company.html":{}}}],["sdk",{"_index":1135,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["search",{"_index":1651,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["search(params",{"_index":1334,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["search.service",{"_index":1870,"title":{},"body":{"modules/SearchModule.html":{}}}],["search/search.module",{"_index":1060,"title":{},"body":{"modules/DomainModule.html":{}}}],["search/search.service",{"_index":1259,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["search_term",{"_index":863,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["searchelastic",{"_index":1641,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["searchelastic(@query",{"_index":1673,"title":{},"body":{"controllers/PostController.html":{}}}],["searchelastic(param",{"_index":1328,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["searchelastic(queryparams",{"_index":1649,"title":{},"body":{"controllers/PostController.html":{}}}],["searchelasticdto",{"_index":862,"title":{"classes/SearchElasticDto.html":{}},"body":{"classes/CreatePostDto.html":{},"interfaces/IPagination.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"classes/PostTag.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{}}}],["searchmodule",{"_index":1048,"title":{"modules/SearchModule.html":{}},"body":{"modules/DomainModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["searchparam",{"_index":1698,"title":{},"body":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["searchparam.tags",{"_index":1288,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["searchparamsdto",{"_index":860,"title":{"classes/SearchParamsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"classes/PostTag.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{}}}],["searchpost",{"_index":1642,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["searchpost(@query",{"_index":1670,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["searchpost(queryparams",{"_index":1654,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["searchpostdto",{"_index":865,"title":{"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["searchposts",{"_index":1692,"title":{},"body":{"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["searchposts(params",{"_index":1300,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["searchservice",{"_index":1258,"title":{"injectables/SearchService.html":{}},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{},"modules/SearchModule.html":{},"injectables/SearchService.html":{},"overview.html":{}}}],["secret",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1358,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":852,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["send",{"_index":1485,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/UsersSagas.html":{}}}],["sendevent",{"_index":903,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["sendevent(userid",{"_index":913,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["sequelize",{"_index":71,"title":{},"body":{"controllers/AppController-1.html":{},"injectables/AppService-1.html":{},"controllers/AuthController-2.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/DoesUserExist.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PostDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User-1.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["serial",{"_index":2434,"title":{},"body":{"classes/user1616304930711.html":{}}}],["server",{"_index":736,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"index.html":{}}}],["service",{"_index":129,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"injectables/AuthMiddleware-3.html":{}}}],["services",{"_index":1072,"title":{},"body":{"modules/DomainModule.html":{}}}],["services/company.service",{"_index":641,"title":{},"body":{"controllers/CompanyController.html":{},"modules/CompanyModule.html":{}}}],["services/firebase.service",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{},"controllers/UserController-1.html":{}}}],["services/post.service",{"_index":1660,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["services/user.service",{"_index":449,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["session",{"_index":1167,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["set",{"_index":1833,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["set(key",{"_index":1840,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["settings",{"_index":1924,"title":{},"body":{"injectables/SearchService.html":{}}}],["severity",{"_index":1395,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"miscellaneous/enumerations.html":{}}}],["shared/services/authorization",{"_index":329,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["side",{"_index":2394,"title":{},"body":{"index.html":{}}}],["signup",{"_index":247,"title":{"classes/SignUp.html":{},"classes/Signup.html":{}},"body":{"controllers/AuthController-2.html":{},"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"controllers/UserController.html":{}}}],["signup(@body",{"_index":273,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["signup(@body('input",{"_index":1948,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["signup(input",{"_index":362,"title":{},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"controllers/UserController.html":{}}}],["signup(user",{"_index":252,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["signupresponse",{"_index":359,"title":{"classes/SignupResponse.html":{}},"body":{"classes/AuthPayload.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{}}}],["silly",{"_index":1377,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"miscellaneous/enumerations.html":{}}}],["silly(message",{"_index":1403,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["similar",{"_index":1487,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["simple",{"_index":113,"title":{},"body":{"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"classes/Message-1.html":{},"miscellaneous/functions.html":{}}}],["siret",{"_index":717,"title":{},"body":{"injectables/CompanyService.html":{}}}],["size",{"_index":1528,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["sizeraw",{"_index":1531,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["skippeditems",{"_index":1305,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["social_links",{"_index":1582,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-3.html":{},"controllers/AppController-4.html":{},"controllers/AppController-5.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/AuthModule.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"modules/RedisCacheModule.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"modules/SearchModule.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"classes/user1616304930711.html":{}}}],["specifies",{"_index":816,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["src/app/controllers/app.controller.ts",{"_index":1205,"title":{},"body":{"controllers/HealthController-4.html":{}}}],["src/app/controllers/app.controller.ts:17",{"_index":1206,"title":{},"body":{"controllers/HealthController-4.html":{}}}],["src/app/controllers/test.controller.ts",{"_index":2000,"title":{},"body":{"controllers/TestController-3.html":{}}}],["src/app/controllers/test.controller.ts:12",{"_index":2001,"title":{},"body":{"controllers/TestController-3.html":{}}}],["src/app/controllers/test.controller.ts:22",{"_index":2002,"title":{},"body":{"controllers/TestController-3.html":{}}}],["src/app/domain/controller/user.controller.ts",{"_index":1679,"title":{},"body":{"controllers/PostController-2.html":{}}}],["src/app/domain/controller/user.controller.ts:20",{"_index":1680,"title":{},"body":{"controllers/PostController-2.html":{}}}],["src/app/domain/controller/user.controller.ts:26",{"_index":1681,"title":{},"body":{"controllers/PostController-2.html":{}}}],["src/app/domain/dto/post.dto.ts",{"_index":875,"title":{},"body":{"classes/CreatePostDto-2.html":{},"classes/PostTag-2.html":{},"classes/SearchPostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:15",{"_index":1725,"title":{},"body":{"classes/PostTag-2.html":{}}}],["src/app/domain/dto/post.dto.ts:21",{"_index":878,"title":{},"body":{"classes/CreatePostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:26",{"_index":876,"title":{},"body":{"classes/CreatePostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:31",{"_index":879,"title":{},"body":{"classes/CreatePostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:39",{"_index":877,"title":{},"body":{"classes/CreatePostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:47",{"_index":1895,"title":{},"body":{"classes/SearchPostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:55",{"_index":1897,"title":{},"body":{"classes/SearchPostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:65",{"_index":1894,"title":{},"body":{"classes/SearchPostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:75",{"_index":1893,"title":{},"body":{"classes/SearchPostDto-2.html":{}}}],["src/app/domain/dto/post.dto.ts:85",{"_index":1896,"title":{},"body":{"classes/SearchPostDto-2.html":{}}}],["src/app/domain/entities/post.ts",{"_index":1628,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:17",{"_index":1631,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:21",{"_index":1635,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:24",{"_index":1637,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:27",{"_index":1630,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:30",{"_index":1632,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:33",{"_index":1633,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:36",{"_index":1634,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:40",{"_index":1629,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/entities/post.ts:44",{"_index":1636,"title":{},"body":{"entities/Post-3.html":{}}}],["src/app/domain/services/post.service.ts",{"_index":1341,"title":{},"body":{"interfaces/IPagination-2.html":{},"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:107",{"_index":1720,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:13",{"_index":1714,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:16",{"_index":1717,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:24",{"_index":1718,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:31",{"_index":1719,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:34",{"_index":1715,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:43",{"_index":1716,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/domain/services/post.service.ts:59",{"_index":1721,"title":{},"body":{"injectables/PostService-2.html":{}}}],["src/app/http",{"_index":1228,"title":{},"body":{"classes/HttpExceptionFilter-3.html":{}}}],["src/app/logger.interceptor.ts",{"_index":1493,"title":{},"body":{"injectables/LoggerInterceptor-3.html":{}}}],["src/app/logger.interceptor.ts:8",{"_index":1494,"title":{},"body":{"injectables/LoggerInterceptor-3.html":{}}}],["src/db/db.errors.ts",{"_index":996,"title":{},"body":{"classes/DbConfigError-5.html":{},"classes/DbError-5.html":{}}}],["src/db/db.errors.ts:1",{"_index":1003,"title":{},"body":{"classes/DbError-5.html":{}}}],["src/db/db.errors.ts:7",{"_index":997,"title":{},"body":{"classes/DbConfigError-5.html":{}}}],["src/db/db.interface.ts",{"_index":982,"title":{},"body":{"interfaces/DbConfig-3.html":{}}}],["src/main.ts",{"_index":2363,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/swagger/swagger.interface.ts",{"_index":831,"title":{},"body":{"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig-7.html":{}}}],["src/swagger/swagger.ts",{"_index":2377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/users/events/impl/user",{"_index":924,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["src/users/repositories/user.repository",{"_index":920,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["src/users/users.entity",{"_index":928,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["staging",{"_index":743,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["standard",{"_index":1935,"title":{},"body":{"injectables/SearchService.html":{}}}],["started",{"_index":2383,"title":{"index.html":{}},"body":{}}],["starter",{"_index":830,"title":{},"body":{"interfaces/Contact-4.html":{},"classes/CreatePostDto-2.html":{},"interfaces/DbConfig-3.html":{},"classes/DbConfigError-5.html":{},"classes/DbError-5.html":{},"controllers/HealthController-4.html":{},"classes/HttpExceptionFilter-3.html":{},"interfaces/IPagination-2.html":{},"injectables/LoggerInterceptor-3.html":{},"entities/Post-3.html":{},"controllers/PostController-2.html":{},"injectables/PostService-2.html":{},"classes/PostTag-2.html":{},"classes/SearchPostDto-2.html":{},"interfaces/SwaggerConfig-7.html":{},"controllers/TestController-3.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["startid",{"_index":869,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["state",{"_index":12,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/GetCatByIdParam.html":{}}}],["static",{"_index":949,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/DbModule.html":{}}}],["status",{"_index":139,"title":{},"body":{"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UserController-1.html":{}}}],["status(status",{"_index":1221,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{}}}],["statuscode",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{}}}],["stderrlevels",{"_index":1439,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["sti4ui&list=pligdnojwil1_ahuggmwz7rhyxwx5avlj4",{"_index":2387,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1111,"title":{},"body":{"injectables/FilesAzureService.html":{},"controllers/UploadController.html":{}}}],["storage.blobservice",{"_index":1110,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["storage.createblobservice(process.env.connection_string",{"_index":1114,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["store",{"_index":1823,"title":{},"body":{"modules/RedisCacheModule.html":{}}}],["str",{"_index":1549,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["str.replace(/%\\{([a",{"_index":1553,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["str.replace(term",{"_index":1551,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["strategy",{"_index":1349,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["stream",{"_index":1105,"title":{},"body":{"injectables/FilesAzureService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadProcessController.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/Address.html":{},"controllers/AppController.html":{},"controllers/AppController-1.html":{},"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"controllers/AppController-6.html":{},"controllers/AppController-7.html":{},"controllers/AppController-8.html":{},"controllers/AppController-9.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"interfaces/Cat.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/Company.html":{},"classes/CompanyDTO.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/IQuery.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"injectables/TestService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"classes/UserCreatedEvent.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["success",{"_index":1774,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":493,"title":{},"body":{"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostsController.html":{}}}],["successfully'})@apibadrequestresponse({description",{"_index":613,"title":{},"body":{"controllers/CompanyController.html":{}}}],["such",{"_index":973,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["super",{"_index":1354,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(message",{"_index":986,"title":{},"body":{"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{}}}],["super.transform(value",{"_index":2315,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["support",{"_index":2406,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2407,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":817,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-8.html":{},"miscellaneous/functions.html":{}}}],["swagger.ts",{"_index":2354,"title":{},"body":{"miscellaneous/functions.html":{}}}],["swaggerconfig",{"_index":821,"title":{"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{}},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["synchronize",{"_index":1018,"title":{},"body":{"modules/DbModule.html":{},"injectables/TypeOrmConfigService.html":{}}}],["t",{"_index":1514,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["table",{"_index":2153,"title":{},"body":{"classes/User-1.html":{},"classes/user1616304930711.html":{}}}],["tag",{"_index":857,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"entities/Tag.html":{}}}],["tag.post",{"_index":1620,"title":{},"body":{"entities/Post-2.html":{}}}],["tagextract",{"_index":1308,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["tagextract.length",{"_index":1318,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["tagitem(tag",{"_index":1314,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["tagitem.tag",{"_index":1319,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["tags",{"_index":824,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["tags.push(searchparam.tags",{"_index":1291,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["tags.push(tag",{"_index":1290,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["tap",{"_index":1465,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["tap((data",{"_index":1472,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["target",{"_index":2110,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["term",{"_index":1550,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["terms",{"_index":1539,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["terms[term",{"_index":1552,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["test",{"_index":741,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"miscellaneous/functions.html":{}}}],["test.service",{"_index":2231,"title":{},"body":{"injectables/UserService.html":{}}}],["test1",{"_index":1978,"title":{},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["testcontroller",{"_index":1975,"title":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}},"body":{"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["testdb",{"_index":2258,"title":{},"body":{"entities/Users.html":{}}}],["testing",{"_index":276,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"interfaces/Contact-3.html":{},"classes/CreateUserDto-1.html":{},"interfaces/DbConfig-2.html":{},"classes/DbConfigError-4.html":{},"classes/DbError-4.html":{},"controllers/HealthController-3.html":{},"classes/HttpExceptionFilter-2.html":{},"injectables/LoggerInterceptor-2.html":{},"entities/Post-2.html":{},"interfaces/SwaggerConfig-6.html":{},"entities/Tag.html":{},"controllers/TestController-2.html":{},"injectables/TestService.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"classes/user1616304930711.html":{}}}],["testservice",{"_index":2003,"title":{"injectables/TestService.html":{}},"body":{"injectables/TestService.html":{},"injectables/UserService.html":{}}}],["text",{"_index":571,"title":{},"body":{"entities/Comment.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/SearchService.html":{},"entities/Tag.html":{}}}],["text_ops",{"_index":2444,"title":{},"body":{"classes/user1616304930711.html":{}}}],["this.appservice.gethello",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"controllers/AppController-1.html":{}}}],["this.authorizationservice.authorizerequest(authorization",{"_index":332,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["this.authorizationservice.validate(authorization",{"_index":301,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["this.authservice.authenticate(authtoken",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["this.authservice.create(user",{"_index":274,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["this.authservice.login(req.user",{"_index":270,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["this.authservice.validateuser(username",{"_index":1371,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.blobservice",{"_index":1113,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["this.cachemanager.del(key",{"_index":1844,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["this.cachemanager.get(key",{"_index":1842,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["this.cachemanager.set(key",{"_index":1843,"title":{},"body":{"injectables/RedisCacheService.html":{}}}],["this.cats",{"_index":569,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.cats.push(cat",{"_index":568,"title":{},"body":{"injectables/CatsService.html":{}}}],["this.catservice.create(cat",{"_index":514,"title":{},"body":{"controllers/CatController.html":{}}}],["this.catservice.findall",{"_index":515,"title":{},"body":{"controllers/CatController.html":{}}}],["this.client.connect",{"_index":91,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["this.client.emit('message_printed",{"_index":92,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{}}}],["this.commandbus.execute",{"_index":1949,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["this.companymodel(company",{"_index":723,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companymodel.find",{"_index":716,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companymodel.find({_id",{"_index":709,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companymodel.find({}).exec",{"_index":708,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companymodel.findbyid(companyid",{"_index":711,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companymodel.findbyidandupdate(companyid",{"_index":712,"title":{},"body":{"injectables/CompanyService.html":{}}}],["this.companyservice.createcompany(companydto",{"_index":655,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.deletecompany(companyid",{"_index":661,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.getallcompany",{"_index":648,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.getcompany(companyid",{"_index":653,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.companyservice.updatecompany(companyid",{"_index":658,"title":{},"body":{"controllers/CompanyController.html":{}}}],["this.comparepassword(pass",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.config",{"_index":787,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["this.configservice.get('elasticsearch_index",{"_index":1913,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.convertstringtobinary(uuidv4",{"_index":933,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["this.db.pingcheck('typeorm",{"_index":1197,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["this.esservice.deletebyquery",{"_index":1939,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.esservice.index",{"_index":1938,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.esservice.indices.create",{"_index":1918,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.esservice.indices.exists",{"_index":1915,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.eventbus",{"_index":939,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["this.eventemitter.emit('user.created",{"_index":1286,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["this.extracttags(params",{"_index":1309,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.extracttags.length",{"_index":1315,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.filesservice.createblobfromstream(containername",{"_index":2055,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["this.filesservice.uploadfile(imagebuffer",{"_index":2129,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.firebaseservice.authenticate(authorization",{"_index":316,"title":{},"body":{"injectables/AuthMiddleware-1.html":{},"interfaces/RequestModel.html":{}}}],["this.generatetoken(result",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetoken(user",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getblobserviceinstance",{"_index":1115,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["this.getbyid(id",{"_index":1331,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["this.getbytitle(postdto.title",{"_index":1279,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.getextention(extention",{"_index":2052,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["this.getredisconfig(env",{"_index":799,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.getresponsesize(res",{"_index":1538,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["this.gettoken(authtoken",{"_index":1158,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["this.hashpassword(user.password",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.health.check",{"_index":1196,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["this.jwtservice.signasync(user",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.log(loglevel.debug",{"_index":1448,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.log(loglevel.error",{"_index":1443,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.log(loglevel.http",{"_index":1446,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.log(loglevel.info",{"_index":1445,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.log(loglevel.silly",{"_index":1449,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.log(loglevel.verbose",{"_index":1447,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.log(loglevel.warn",{"_index":1444,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.logger",{"_index":1433,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.logger.add(new",{"_index":1437,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.logger.error(`error",{"_index":1168,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["this.logger.http(this.generatelogmessage(req",{"_index":1509,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["this.logger.info(`${data.uid}${data.email",{"_index":333,"title":{},"body":{"injectables/AuthMiddleware-3.html":{}}}],["this.logger.info(`${json.stringify(decodedtoken",{"_index":1162,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["this.logger.log('getting",{"_index":1271,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/UserService.html":{}}}],["this.logger.log('health",{"_index":1195,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-4.html":{}}}],["this.logger.log(loglevel",{"_index":1442,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["this.parseconfigfromenv(process.env",{"_index":788,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{}}}],["this.postrepo.create(postdto",{"_index":1282,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.postrepo.delete(id",{"_index":1332,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["this.postrepo.findone",{"_index":1272,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.postrepo.findone(id",{"_index":1276,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.postrepo.findone({title",{"_index":1339,"title":{},"body":{"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.postrepo.query(querybuilder",{"_index":1324,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.postrepo.save(newpost",{"_index":1284,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["this.postrepo.save(newuser",{"_index":1340,"title":{},"body":{"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.postrepository.create",{"_index":1796,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.destroy",{"_index":1802,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findall",{"_index":1797,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.findone",{"_index":1801,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.update",{"_index":1803,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postservice.create(post",{"_index":1663,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/PostsController.html":{}}}],["this.postservice.delete(id",{"_index":1773,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.deletepost(params.id",{"_index":1665,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall",{"_index":1750,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.findone(id",{"_index":1752,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.search(queryparams",{"_index":1671,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["this.postservice.searchelastic(queryparams",{"_index":1674,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(id",{"_index":1768,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.rediscacheservice.get(key",{"_index":1165,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.reflector.get('roles",{"_index":1851,"title":{},"body":{"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["this.searchposts(params",{"_index":1335,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["this.searchservice.createindex",{"_index":1877,"title":{},"body":{"modules/SearchModule.html":{}}}],["this.searchservice.indexpost(postdata",{"_index":1285,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["this.searchservice.remove(id",{"_index":1333,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["this.searchservice.search(param.search_term",{"_index":1329,"title":{},"body":{"interfaces/IPagination.html":{},"injectables/PostService.html":{}}}],["this.sendevent(userdb.userid",{"_index":938,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["this.service.validate(authorization",{"_index":323,"title":{},"body":{"injectables/AuthMiddleware-2.html":{}}}],["this.testservice.sayhi(email",{"_index":2233,"title":{},"body":{"injectables/UserService.html":{}}}],["this.text",{"_index":1580,"title":{},"body":{"classes/Message.html":{},"classes/Message-1.html":{}}}],["this.usermodel.findone",{"_index":1171,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["this.userrepo.create",{"_index":2242,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.find",{"_index":2234,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findone",{"_index":2236,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.findone(id",{"_index":2238,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.save(createduser",{"_index":2243,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.create(user",{"_index":2303,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":2304,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyemail(request.body.email",{"_index":1041,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["this.userservice.findonebyemail(username",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(payload.id",{"_index":1360,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersvc.getallusers",{"_index":458,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersvc.getbyid(params.id",{"_index":457,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersvc.register(registrationdata",{"_index":455,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.validaterequest(request",{"_index":1039,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["through",{"_index":1424,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["throw",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"modules/DatabaseModule.html":{},"guards/DoesUserExist.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"interfaces/RequestModel.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"controllers/UploadProcessController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["throwerror",{"_index":1088,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["throwerror(new",{"_index":1094,"title":{},"body":{"injectables/ErrorsInterceptor.html":{}}}],["throwing",{"_index":1488,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["time",{"_index":1478,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"classes/user1616304930711.html":{}}}],["timestamp",{"_index":1223,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"classes/user1616304930711.html":{}}}],["timetaken",{"_index":1501,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["title",{"_index":822,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["todo",{"_index":1541,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["token",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestModel.html":{}}}],["tokenizer",{"_index":1934,"title":{},"body":{"injectables/SearchService.html":{}}}],["tokenstring",{"_index":1157,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["totalcount",{"_index":1327,"title":{},"body":{"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{}}}],["transform",{"_index":452,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/ProductController.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["transform(value",{"_index":2310,"title":{},"body":{"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["transformer",{"_index":36,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["triple",{"_index":1415,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["true",{"_index":38,"title":{},"body":{"classes/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"entities/Comment.html":{},"controllers/CompanyController.html":{},"injectables/CompanyService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"classes/GetCatByIdParam.html":{},"entities/Post-2.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"entities/Tag.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"classes/User-1.html":{},"controllers/UserController-1.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"entities/Users.html":{},"miscellaneous/functions.html":{}}}],["true})@isdefined()@isnotempty",{"_index":2208,"title":{},"body":{"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["true})@isemail()@minlength(4",{"_index":840,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["true})@isint",{"_index":834,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["true})@isoptional",{"_index":1886,"title":{},"body":{"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["true})@isoptional()@isstring",{"_index":1722,"title":{},"body":{"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{}}}],["true})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":1883,"title":{},"body":{"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["true})@isstring",{"_index":19,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{}}}],["true})@isstring()@minlength(4",{"_index":845,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{}}}],["true})@isuuid",{"_index":1179,"title":{},"body":{"classes/GetCatByIdParam.html":{}}}],["try",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"interfaces/RequestModel.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{},"injectables/ValidateInputPipe.html":{}}}],["ts",{"_index":1067,"title":{},"body":{"modules/DomainModule.html":{}}}],["tslint:disable",{"_index":39,"title":{},"body":{"classes/Address.html":{},"injectables/AuthService.html":{},"classes/CreateCatDto.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-3.html":{},"classes/DbError.html":{},"classes/DbError-3.html":{},"classes/GetCatByIdParam.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/SearchService.html":{}}}],["tslint:disable:naming",{"_index":294,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["ttl",{"_index":740,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"injectables/ConfigService.html":{},"modules/DomainModule.html":{},"modules/RedisCacheModule.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["tutorials",{"_index":2385,"title":{},"body":{"index.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/Address.html":{},"controllers/AppController-3.html":{},"controllers/AppController-5.html":{},"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/AuthController-2.html":{},"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"entities/Category.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"entities/Comment.html":{},"classes/Company.html":{},"controllers/CompanyController.html":{},"classes/CompanyDTO.html":{},"modules/CompanyModule.html":{},"injectables/CompanyService.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"modules/DatabaseModule.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"modules/DbModule.html":{},"guards/DoesUserExist.html":{},"modules/DomainModule.html":{},"injectables/ErrorsInterceptor.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"classes/GetCatByIdParam.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"classes/Message.html":{},"classes/Message-1.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"classes/PostDto.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"injectables/SearchService.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{},"entities/Tag.html":{},"injectables/TestService.html":{},"injectables/TypeOrmConfigService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"injectables/UsersService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1616304930711.html":{}}}],["type:[posttag",{"_index":859,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["typealiases",{"_index":2420,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1534,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["typeorm",{"_index":428,"title":{},"body":{"injectables/AuthService-1.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateUserHandler.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"entities/Tag.html":{},"injectables/TestService.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{},"classes/user1616304930711.html":{}}}],["typeorm/platform/platformtools",{"_index":1112,"title":{},"body":{"injectables/FilesAzureService.html":{}}}],["typeormconfigservice",{"_index":170,"title":{"injectables/TypeOrmConfigService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TypeOrmConfigService.html":{}}}],["typeormhealthindicator",{"_index":1189,"title":{},"body":{"controllers/HealthController.html":{},"controllers/HealthController-1.html":{},"controllers/HealthController-2.html":{},"controllers/HealthController-3.html":{},"controllers/HealthController-4.html":{}}}],["typeormmodule",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"modules/DomainModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":2274,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forfeature(all_entities",{"_index":1080,"title":{},"body":{"modules/DomainModule.html":{}}}],["typeormmodule.forrootasync",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{}}}],["typeormmoduleoptions",{"_index":1011,"title":{},"body":{"modules/DbModule.html":{},"injectables/TypeOrmConfigService.html":{}}}],["typeormoptionsfactory",{"_index":2016,"title":{},"body":{"injectables/TypeOrmConfigService.html":{}}}],["typescript",{"_index":6,"title":{},"body":{"classes/Address.html":{},"controllers/AppController-9.html":{},"injectables/AuthMiddleware-2.html":{},"interfaces/Cat.html":{},"controllers/CatController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"injectables/ErrorsInterceptor.html":{},"classes/GetCatByIdParam.html":{},"classes/HttpExceptionFilter-4.html":{},"injectables/LoggerMiddleware-3.html":{},"interfaces/SwaggerConfig-8.html":{},"classes/User-1.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["u",{"_index":1513,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["ui",{"_index":818,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["uid",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"controllers/UserController-1.html":{}}}],["unable",{"_index":625,"title":{},"body":{"controllers/CompanyController.html":{}}}],["unauthorized",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["unauthorizedexception",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController-1.html":{}}}],["unauthorizedexception('invalid",{"_index":1372,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('user",{"_index":1166,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["unauthorizedexception('you",{"_index":1361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unauthorizedexception(err.message",{"_index":1170,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"injectables/FirebaseAuthService-1.html":{}}}],["unauthorizedexception(error.message",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"controllers/UserController-1.html":{}}}],["undefined",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{},"classes/CreateUserHandler.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"classes/User-1.html":{},"controllers/UserController-1.html":{},"injectables/UserService.html":{}}}],["undefined})@apiokresponse({schema",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["undefined})@apiunauthorizedresponse({schema",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthController-1.html":{}}}],["undefined})@isoptional()@isarray()@arrayminsize(1)@validatenested()@validatetype(undefined",{"_index":832,"title":{},"body":{"classes/CreateCatDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested()@arrayminsize(1)@validatetype(undefined",{"_index":843,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{}}}],["unique",{"_index":1598,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"classes/user1616304930711.html":{}}}],["unique(['email",{"_index":2143,"title":{},"body":{"entities/User.html":{},"classes/User-2.html":{}}}],["unique(['title",{"_index":1600,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{}}}],["unit",{"_index":277,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthService-1.html":{},"controllers/AuthenticationController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"interfaces/Contact-3.html":{},"classes/CreateUserDto-1.html":{},"interfaces/DbConfig-2.html":{},"classes/DbConfigError-4.html":{},"classes/DbError-4.html":{},"controllers/HealthController-3.html":{},"classes/HttpExceptionFilter-2.html":{},"injectables/LoggerInterceptor-2.html":{},"entities/Post-2.html":{},"interfaces/SwaggerConfig-6.html":{},"entities/Tag.html":{},"controllers/TestController-2.html":{},"injectables/TestService.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"classes/user1616304930711.html":{}}}],["unknown",{"_index":251,"title":{},"body":{"controllers/AuthController-2.html":{},"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"classes/CreateUserHandler.html":{},"classes/DbConfigError.html":{},"classes/DbConfigError-1.html":{},"classes/DbConfigError-2.html":{},"classes/DbConfigError-3.html":{},"classes/DbConfigError-4.html":{},"classes/DbConfigError-5.html":{},"classes/DbError.html":{},"classes/DbError-1.html":{},"classes/DbError-2.html":{},"classes/DbError-3.html":{},"classes/DbError-4.html":{},"classes/DbError-5.html":{},"guards/DoesUserExist.html":{},"injectables/FilesAzureService.html":{},"injectables/FilesS3Service.html":{},"injectables/FirebaseAuthService.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/JwtStrategy.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RedisCacheService.html":{},"injectables/SearchService.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{}}}],["unprocessableentityexception",{"_index":2314,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["unprocessableentityexception(this.handleerror(e.message",{"_index":2317,"title":{},"body":{"injectables/ValidateInputPipe.html":{}}}],["up",{"_index":2405,"title":{},"body":{"index.html":{},"classes/user1616304930711.html":{}}}],["up(queryrunner",{"_index":2431,"title":{},"body":{"classes/user1616304930711.html":{}}}],["update",{"_index":1730,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update(@param('id",{"_index":1763,"title":{},"body":{"controllers/PostsController.html":{}}}],["update(id",{"_index":1741,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecompany",{"_index":609,"title":{},"body":{"controllers/CompanyController.html":{},"injectables/CompanyService.html":{}}}],["updatecompany(@res",{"_index":657,"title":{},"body":{"controllers/CompanyController.html":{}}}],["updatecompany(companyid",{"_index":703,"title":{},"body":{"injectables/CompanyService.html":{}}}],["updatecompany(res",{"_index":632,"title":{},"body":{"controllers/CompanyController.html":{}}}],["updated",{"_index":612,"title":{},"body":{"controllers/CompanyController.html":{},"controllers/PostsController.html":{}}}],["updatedat",{"_index":521,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/user1616304930711.html":{}}}],["updatedatecolumn",{"_index":540,"title":{},"body":{"entities/Category.html":{},"entities/Comment.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{}}}],["updatedpost",{"_index":1767,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["upload",{"_index":2087,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["upload')@apiconsumes('multipart/form",{"_index":2070,"title":{},"body":{"controllers/UploadController.html":{}}}],["upload.controller.process",{"_index":2086,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadazureservice",{"_index":2034,"title":{"injectables/UploadAzureService.html":{}},"body":{"injectables/UploadAzureService.html":{}}}],["uploadcontroller",{"_index":2065,"title":{"controllers/UploadController.html":{}},"body":{"controllers/UploadController.html":{}}}],["uploadedfile",{"_index":2077,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["uploadedfiles",{"_index":2078,"title":{},"body":{"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["uploadfile",{"_index":1125,"title":{},"body":{"injectables/FilesS3Service.html":{},"injectables/UploadAzureService.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/UploadService.html":{}}}],["uploadfile('filename",{"_index":2116,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["uploadfile('image",{"_index":2089,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadfile(@req",{"_index":2118,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["uploadfile(@uploadedfile",{"_index":2093,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadfile(file",{"_index":2068,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadfile(imagebuffer",{"_index":1130,"title":{},"body":{"injectables/FilesS3Service.html":{}}}],["uploadfile(req",{"_index":2103,"title":{},"body":{"controllers/UploadProcessController.html":{}}}],["uploadmultiplefiles",{"_index":2067,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadmultiplefiles(@uploadedfiles",{"_index":2096,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadmultiplefiles(files",{"_index":2073,"title":{},"body":{"controllers/UploadController.html":{}}}],["uploadprocesscontroller",{"_index":2100,"title":{"controllers/UploadProcessController.html":{}},"body":{"controllers/UploadProcessController.html":{}}}],["uploadservice",{"_index":2124,"title":{"injectables/UploadService.html":{}},"body":{"injectables/UploadService.html":{}}}],["uq_78a916df40e02a9deb1c4b75edb",{"_index":2442,"title":{},"body":{"classes/user1616304930711.html":{}}}],["uri",{"_index":965,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["url",{"_index":820,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"modules/DbModule.html":{},"interfaces/IPagination.html":{},"interfaces/IPagination-1.html":{},"interfaces/IPagination-2.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{}}}],["urldatabase",{"_index":1247,"title":{},"body":{"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{}}}],["use",{"_index":279,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{}}}],["use(req",{"_index":283,"title":{},"body":{"injectables/AuthMiddleware.html":{},"injectables/AuthMiddleware-1.html":{},"injectables/AuthMiddleware-2.html":{},"injectables/AuthMiddleware-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"interfaces/RequestModel.html":{}}}],["useclass",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":758,"title":{},"body":{"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/DbModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{}}}],["usefilters",{"_index":501,"title":{},"body":{"controllers/CatController.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{}}}],["useguards",{"_index":259,"title":{},"body":{"controllers/AuthController-2.html":{},"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/PostsController.html":{},"controllers/ProductController.html":{}}}],["useguards(authguard('jwt",{"_index":1758,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(authguard('local",{"_index":267,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["useguards(doesuserexist",{"_index":271,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["useguards(doesuserexist)@post('signup",{"_index":254,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["useguards(rolesguard",{"_index":475,"title":{},"body":{"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"controllers/ProductController.html":{}}}],["useguards(undefined)@delete(':id",{"_index":1739,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(undefined)@post",{"_index":1732,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(undefined)@post('login",{"_index":249,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["useguards(undefined)@put(':id",{"_index":1742,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors",{"_index":1658,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":1669,"title":{},"body":{"controllers/PostController.html":{}}}],["useinterceptors(cacheinterceptor)@get('post/elastic",{"_index":1650,"title":{},"body":{"controllers/PostController.html":{}}}],["useinterceptors(new",{"_index":1661,"title":{},"body":{"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{}}}],["usepipes",{"_index":446,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/ProductController.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["usepipes(new",{"_index":474,"title":{},"body":{"controllers/BlogController.html":{},"controllers/CompanyController.html":{},"controllers/ProductController.html":{}}}],["usepipes(validationpipe",{"_index":511,"title":{},"body":{"controllers/CatController.html":{}}}],["user",{"_index":256,"title":{"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{}},"body":{"controllers/AuthController-2.html":{},"injectables/AuthMiddleware-1.html":{},"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"controllers/BlogController.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"injectables/FirebaseAuthService.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"entities/Post-2.html":{},"injectables/PostsService.html":{},"controllers/ProductController.html":{},"interfaces/RequestModel.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"injectables/TestService.html":{},"entities/User.html":{},"classes/User-1.html":{},"classes/User-2.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"injectables/UserService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"classes/user1616304930711.html":{}}}],["user\"(email",{"_index":2443,"title":{},"body":{"classes/user1616304930711.html":{}}}],["user\"(id",{"_index":2440,"title":{},"body":{"classes/user1616304930711.html":{}}}],["user.command",{"_index":917,"title":{},"body":{"classes/CreateUserHandler.html":{},"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["user.command.ts",{"_index":882,"title":{},"body":{"classes/CreateUserCommand.html":{}}}],["user.command.ts:1",{"_index":884,"title":{},"body":{"classes/CreateUserCommand.html":{}}}],["user.command.ts:3",{"_index":887,"title":{},"body":{"classes/CreateUserCommand.html":{}}}],["user.command.ts:4",{"_index":885,"title":{},"body":{"classes/CreateUserCommand.html":{}}}],["user.command.ts:5",{"_index":886,"title":{},"body":{"classes/CreateUserCommand.html":{}}}],["user.comments",{"_index":582,"title":{},"body":{"entities/Comment.html":{}}}],["user.controller",{"_index":2270,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.email",{"_index":935,"title":{},"body":{"classes/CreateUserHandler.html":{},"injectables/FirebaseAuthService.html":{}}}],["user.entity",{"_index":2300,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.handler",{"_index":2267,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.handler.ts",{"_index":899,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["user.handler.ts:11",{"_index":906,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["user.handler.ts:16",{"_index":911,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["user.handler.ts:35",{"_index":915,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["user.handler.ts:44",{"_index":908,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["user.password",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserHandler.html":{},"injectables/UserService.html":{}}}],["user.posts",{"_index":1626,"title":{},"body":{"entities/Post-2.html":{}}}],["user.role",{"_index":1174,"title":{},"body":{"injectables/FirebaseAuthService.html":{},"guards/RolesGuard.html":{},"guards/RolesGuard-1.html":{}}}],["user.ts",{"_index":2425,"title":{},"body":{"classes/user1616304930711.html":{}}}],["user.ts:21",{"_index":2430,"title":{},"body":{"classes/user1616304930711.html":{}}}],["user.ts:5",{"_index":2432,"title":{},"body":{"classes/user1616304930711.html":{}}}],["user.uid",{"_index":1173,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["user.userid",{"_index":932,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["user.username",{"_index":934,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["user1616304930711",{"_index":2423,"title":{"classes/user1616304930711.html":{}},"body":{"classes/user1616304930711.html":{}}}],["user['datavalues",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_repository",{"_index":2301,"title":{},"body":{"injectables/UsersService.html":{}}}],["useragent",{"_index":1466,"title":{},"body":{"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["usercontroller",{"_index":1947,"title":{"controllers/UserController.html":{},"controllers/UserController-1.html":{}},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{},"controllers/UserController-1.html":{},"modules/UsersModule.html":{}}}],["usercreated",{"_index":2276,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["usercreatedevent",{"_index":923,"title":{"classes/UserCreatedEvent.html":{}},"body":{"classes/CreateUserHandler.html":{},"classes/UserCreatedEvent.html":{},"classes/UserCreatedHandler.html":{},"modules/UsersModule.html":{},"injectables/UsersSagas.html":{}}}],["usercreatedhandler",{"_index":2176,"title":{"classes/UserCreatedHandler.html":{}},"body":{"classes/UserCreatedHandler.html":{}}}],["userdb",{"_index":936,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["userdto",{"_index":253,"title":{"classes/UserDTO.html":{},"classes/UserDto.html":{}},"body":{"controllers/AuthController-2.html":{},"controllers/UserController-1.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"injectables/UsersService.html":{}}}],["userexist",{"_index":1040,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["userid",{"_index":364,"title":{},"body":{"classes/AuthPayload.html":{},"classes/CreateUserHandler.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/PostsService.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"classes/UserCreatedEvent.html":{},"entities/Users.html":{}}}],["usermodel",{"_index":1145,"title":{},"body":{"injectables/FirebaseAuthService.html":{}}}],["username",{"_index":357,"title":{},"body":{"classes/AuthPayload.html":{},"injectables/AuthService.html":{},"classes/CreateUserCommand.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/CreateUserHandler.html":{},"interfaces/IDatabaseConfig.html":{},"interfaces/IDatabaseConfigAttributes.html":{},"classes/IMutation.html":{},"classes/IQuery.html":{},"injectables/LocalStrategy.html":{},"classes/SignUp.html":{},"classes/Signup.html":{},"classes/SignupResponse.html":{},"injectables/TypeOrmConfigService.html":{},"controllers/UserController.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{},"entities/Users.html":{}}}],["userparam",{"_index":441,"title":{"classes/UserParam.html":{},"classes/UserParam-1.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["userrepo",{"_index":2221,"title":{},"body":{"injectables/UserService.html":{}}}],["userrepository",{"_index":919,"title":{"classes/UserRepository.html":{}},"body":{"classes/CreateUserHandler.html":{},"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userrepository.create",{"_index":931,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["userrepository.save(user",{"_index":937,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["users",{"_index":927,"title":{"entities/Users.html":{}},"body":{"classes/CreateUserHandler.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"entities/Users.html":{}}}],["users.entity",{"_index":2213,"title":{},"body":{"classes/UserRepository.html":{}}}],["users.map((user",{"_index":2235,"title":{},"body":{"injectables/UserService.html":{}}}],["users/dto/user.dto",{"_index":263,"title":{},"body":{"controllers/AuthController-2.html":{}}}],["users/user.entity",{"_index":1792,"title":{},"body":{"injectables/PostsService.html":{}}}],["users/users.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["usersagas",{"_index":2289,"title":{},"body":{"injectables/UsersSagas.html":{}}}],["userservice",{"_index":376,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/AuthenticationController.html":{},"guards/DoesUserExist.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["usersmodule",{"_index":155,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["userssagas",{"_index":2263,"title":{"injectables/UsersSagas.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersSagas.html":{},"overview.html":{}}}],["usersservice",{"_index":373,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"guards/DoesUserExist.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["usersvc",{"_index":453,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["uuid",{"_index":909,"title":{},"body":{"classes/CreateUserHandler.html":{},"injectables/UploadAzureService.html":{}}}],["uuidv4",{"_index":922,"title":{},"body":{"classes/CreateUserHandler.html":{},"injectables/UploadAzureService.html":{}}}],["uuid}.${allowedfiles.includes(extention",{"_index":2063,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["v4",{"_index":921,"title":{},"body":{"classes/CreateUserHandler.html":{}}}],["valid",{"_index":2381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validate",{"_index":418,"title":{},"body":{"injectables/AuthService-1.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1345,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(token",{"_index":420,"title":{},"body":{"injectables/AuthService-1.html":{}}}],["validate(username",{"_index":1368,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validateinputpipe",{"_index":2305,"title":{"injectables/ValidateInputPipe.html":{}},"body":{"injectables/ValidateInputPipe.html":{}}}],["validatenested",{"_index":31,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["validateobjectid",{"_index":638,"title":{"injectables/ValidateObjectId.html":{}},"body":{"controllers/CompanyController.html":{},"injectables/ValidateObjectId.html":{}}}],["validaterequest",{"_index":1027,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["validaterequest(request",{"_index":1033,"title":{},"body":{"guards/DoesUserExist.html":{}}}],["validatetype",{"_index":35,"title":{},"body":{"classes/Address.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/GetCatByIdParam.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{}}}],["validateuser",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":1956,"title":{},"body":{"classes/SignUp.html":{},"controllers/UserController.html":{}}}],["validationpipe",{"_index":447,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/ProductController.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{},"injectables/ValidateInputPipe.html":{}}}],["validator",{"_index":32,"title":{},"body":{"classes/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostDto-1.html":{},"classes/CreatePostDto-2.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserDto-1.html":{},"classes/GetCatByIdParam.html":{},"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-2.html":{},"entities/Post-3.html":{},"classes/PostDto.html":{},"classes/PostTag.html":{},"classes/PostTag-1.html":{},"classes/PostTag-2.html":{},"classes/SearchElasticDto.html":{},"classes/SearchParamsDto.html":{},"classes/SearchPostDto.html":{},"classes/SearchPostDto-1.html":{},"classes/SearchPostDto-2.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/User-2.html":{},"classes/UserDTO.html":{},"classes/UserDto.html":{},"classes/UserParam.html":{},"classes/UserParam-1.html":{}}}],["value",{"_index":424,"title":{},"body":{"injectables/AuthService-1.html":{},"injectables/CatsService.html":{},"injectables/PostService.html":{},"injectables/PostService-1.html":{},"injectables/PostService-2.html":{},"injectables/RedisCacheService.html":{},"injectables/TestService.html":{},"injectables/UserService.html":{},"injectables/UsersSagas.html":{},"injectables/ValidateInputPipe.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["values",{"_index":2149,"title":{},"body":{"classes/User-1.html":{}}}],["varchar",{"_index":1585,"title":{},"body":{"entities/Post.html":{},"entities/Post-1.html":{},"entities/Post-3.html":{}}}],["variables",{"_index":781,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{}}}],["varying",{"_index":2436,"title":{},"body":{"classes/user1616304930711.html":{}}}],["verbose",{"_index":745,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"miscellaneous/enumerations.html":{}}}],["verbose(message",{"_index":1406,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["version",{"_index":823,"title":{},"body":{"interfaces/Contact.html":{},"interfaces/Contact-1.html":{},"interfaces/Contact-2.html":{},"interfaces/Contact-3.html":{},"interfaces/Contact-4.html":{},"interfaces/SwaggerConfig.html":{},"interfaces/SwaggerConfig-1.html":{},"interfaces/SwaggerConfig-2.html":{},"interfaces/SwaggerConfig-3.html":{},"interfaces/SwaggerConfig-4.html":{},"interfaces/SwaggerConfig-5.html":{},"interfaces/SwaggerConfig-6.html":{},"interfaces/SwaggerConfig-7.html":{},"interfaces/SwaggerConfig-8.html":{}}}],["via",{"_index":976,"title":{},"body":{"interfaces/DbConfig.html":{},"interfaces/DbConfig-1.html":{},"interfaces/DbConfig-2.html":{},"interfaces/DbConfig-3.html":{},"miscellaneous/functions.html":{}}}],["view",{"_index":775,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{}}}],["void",{"_index":551,"title":{},"body":{"modules/CatsModule.html":{},"injectables/CatsService.html":{},"modules/CompanyModule.html":{},"injectables/ConfigService.html":{},"injectables/ConfigService-1.html":{},"injectables/ConfigService-2.html":{},"classes/HttpExceptionFilter.html":{},"classes/HttpExceptionFilter-1.html":{},"classes/HttpExceptionFilter-2.html":{},"classes/HttpExceptionFilter-3.html":{},"classes/HttpExceptionFilter-4.html":{},"classes/HttpExceptionFilter-5.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{},"injectables/LoggerMiddleware-3.html":{},"modules/LoggerModule.html":{},"injectables/PostService.html":{},"controllers/TestController.html":{},"controllers/TestController-1.html":{},"controllers/TestController-2.html":{},"controllers/TestController-3.html":{},"classes/UserCreatedHandler.html":{}}}],["warn",{"_index":746,"title":{},"body":{"interfaces/ConfigData.html":{},"interfaces/ConfigData-1.html":{},"interfaces/ConfigData-2.html":{},"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"interfaces/RedisConfig.html":{},"interfaces/RedisConfig-1.html":{},"miscellaneous/enumerations.html":{}}}],["warn(message",{"_index":1409,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["webp",{"_index":2062,"title":{},"body":{"injectables/UploadAzureService.html":{}}}],["went",{"_index":2245,"title":{},"body":{"injectables/UserService.html":{}}}],["whitelist",{"_index":451,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/BlogController.html":{},"controllers/CatController.html":{},"controllers/CompanyController.html":{},"controllers/PostController.html":{},"controllers/PostController-1.html":{},"controllers/PostController-2.html":{},"controllers/ProductController.html":{},"controllers/UploadController.html":{},"controllers/UploadProcessController.html":{}}}],["winston",{"_index":1417,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{},"injectables/LoggerInterceptor.html":{},"injectables/LoggerInterceptor-1.html":{},"injectables/LoggerInterceptor-2.html":{},"injectables/LoggerInterceptor-3.html":{}}}],["winston.createlogger",{"_index":1434,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["winston.format((info",{"_index":1420,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["winston.logger",{"_index":1412,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["winston.transports.console",{"_index":1438,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["without",{"_index":2437,"title":{},"body":{"classes/user1616304930711.html":{}}}],["working",{"_index":130,"title":{},"body":{"controllers/AppController-6.html":{},"controllers/AppController-7.html":{}}}],["world",{"_index":95,"title":{},"body":{"controllers/AppController-2.html":{},"controllers/AppController-4.html":{},"injectables/AppService.html":{},"injectables/AppService-1.html":{},"injectables/AppService-2.html":{},"injectables/AppService-3.html":{},"injectables/AppService-4.html":{},"injectables/AppService-5.html":{}}}],["write",{"_index":1374,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["writes",{"_index":1382,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["wrong",{"_index":2246,"title":{},"body":{"injectables/UserService.html":{}}}],["yes",{"_index":1402,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["yyyy",{"_index":1430,"title":{},"body":{"injectables/Logger.html":{},"injectables/Logger-1.html":{},"injectables/Logger-2.html":{}}}],["z",{"_index":1555,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["za",{"_index":1554,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}],["zero",{"_index":1769,"title":{},"body":{"controllers/PostsController.html":{}}}],["zone",{"_index":2438,"title":{},"body":{"classes/user1616304930711.html":{}}}],["zoom",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/CompanyModule.html":{},"modules/DomainModule.html":{},"modules/LoggerModule.html":{},"modules/PostsModule.html":{},"modules/RedisCacheModule.html":{},"modules/SearchModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["zz",{"_index":1544,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/LoggerMiddleware-1.html":{},"injectables/LoggerMiddleware-2.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Address.html":{"url":"classes/Address.html","title":"class - Address","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/domain/cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                city\n                            \n                            \n                                    Readonly\n                                state\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '', required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '', required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayMinSize, IsArray, IsInt, IsOptional, IsString, IsUUID, ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type as ValidateType } from 'class-transformer';\n\n\nexport class Address {\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly city: string;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly state: number; \n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class CreateCatDto {\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly name: string;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsInt()\n  readonly age: number;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly breed: string;\n\n  @ApiProperty({description:\"address\", required: true, type: [Address]})\n  @IsOptional()\n  @IsArray()\n  @ArrayMinSize(1)\n  @ValidateNested()\n  @ValidateType(() => Address)\n  public address?: Address [];\n}\n\n\n// tslint:disable-next-line:max-classes-per-file\nexport class GetCatByIdParam {\n  @ApiProperty({description:\"\", required: true})\n  @IsUUID()\n  readonly id!: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-1.html":{"url":"controllers/AppController-1.html","title":"controller - AppController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-2.html":{"url":"controllers/AppController-2.html","title":"controller - AppController-2","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-rabbitmq-microservice/microservice-client/src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in nestjs-rabbitmq-microservice/microservice-client/src/app.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-rabbitmq-microservice/microservice-client/src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { Message } from './message.event';\n\n@Controller()\nexport class AppController {\n  constructor(@Inject('HELLO_SERVICE') private readonly client: ClientProxy) { }\n\n  async onApplicationBootstrap() {\n    //await this.client.connect();\n  }\n\n  @Get()\n  getHello() {\n    this.client.emit('message_printed', new Message('Hello World'));\n    return 'Hello World printed';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-3.html":{"url":"controllers/AppController-3.html","title":"controller - AppController-3","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-rabbitmq-microservice/microservices-app/src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleMessagePrinted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleMessagePrinted\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessagePrinted(data: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @EventPattern('message_printed')\n                \n            \n\n            \n                \n                    Defined in nestjs-rabbitmq-microservice/microservices-app/src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { EventPattern } from '@nestjs/microservices';\n\n@Controller()\nexport class AppController {\n  constructor() { }\n\n\n  @EventPattern('message_printed')\n  async handleMessagePrinted(data: Record) {\n    console.log(data.text);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-4.html":{"url":"controllers/AppController-4.html","title":"controller - AppController-4","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            simple-nestjs-microservice/microservice-client/src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in simple-nestjs-microservice/microservice-client/src/app.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                    \n                    onApplicationBootstrap()\n                \n            \n\n\n            \n                \n                    Defined in simple-nestjs-microservice/microservice-client/src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Inject } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { Message } from './message.event';\n\n@Controller()\nexport class AppController {\n  constructor(@Inject('HELLO_SERVICE') private readonly client: ClientProxy) { }\n\n  async onApplicationBootstrap() {\n    await this.client.connect();\n  }\n\n  @Get()\n  getHello() {\n    this.client.emit('message_printed', new Message('Hello World'));\n    return 'Hello World printed';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-5.html":{"url":"controllers/AppController-5.html","title":"controller - AppController-5","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            simple-nestjs-microservice/microservices-app/src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleMessagePrinted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleMessagePrinted\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessagePrinted(data: Record)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @EventPattern('message_printed')\n                \n            \n\n            \n                \n                    Defined in simple-nestjs-microservice/microservices-app/src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { EventPattern } from '@nestjs/microservices';\n\n@Controller()\nexport class AppController {\n  constructor() { }\n\n\n  @EventPattern('message_printed')\n  async handleMessagePrinted(data: Record) {\n    console.log(data.text);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-6.html":{"url":"controllers/AppController-6.html","title":"controller - AppController-6","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getApp\n                            \n                            \n                                    Public\n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getApp\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApp()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in nestjs-authentication-authz/src/app/controllers/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in nestjs-authentication-authz/src/app/controllers/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller('/api/v1')\nexport class AppController {\n  @Get('health')\n  public getHealth(): string {\n    return 'Health OK! From Gatekeeper Service';\n  }\n\n  @Get()\n  public getApp(): string {\n    return 'Gatekeeper Service Working!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-7.html":{"url":"controllers/AppController-7.html","title":"controller - AppController-7","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getApp\n                            \n                            \n                                    Public\n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getApp\n                        \n                    \n                \n            \n            \n                \n                    \n                    getApp()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/app.controller.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller('/api/v1')\nexport class AppController {\n  @Get('health')\n  public getHealth(): string {\n    return 'Health OK! From Gatekeeper Service';\n  }\n\n  @Get()\n  public getApp(): string {\n    return 'Gatekeeper Service Working!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-8.html":{"url":"controllers/AppController-8.html","title":"controller - AppController-8","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealthCheck\n                        \n                    \n                \n            \n            \n                \ngetHealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')\n                \n            \n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/controllers/app.controller.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller('/api/v1')\nexport class AppController {\n\n  @Get('/health')\n  getHealthCheck() {\n    return {\n      status: 'ok from company service'\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController-9.html":{"url":"controllers/AppController-9.html","title":"controller - AppController-9","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHealthCheck\n                            \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHealthCheck\n                        \n                    \n                \n            \n            \n                \ngetHealthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/health')\n                \n            \n\n            \n                \n                    Defined in typescript-nestjs/src/app/controllers/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/testAuth0')\n                \n            \n\n            \n                \n                    Defined in typescript-nestjs/src/app/controllers/app.controller.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { status: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\n@Controller('/api')\nexport class AppController {\n\n  @Get('/testAuth0')\n  getHello() {\n    return {\n      status: 'ok'\n    };\n  }\n\n  @Get('/health')\n  getHealthCheck() {\n    return {\n      status: 'ok'\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { join } from 'path';\nimport { TypeOrmConfigService } from './config/typeorm.config.service';\n\n@Module({\n  imports: [\n    UsersModule,\n    ConfigModule.forRoot({ isGlobal: true, }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useClass: TypeOrmConfigService,\n      inject: [ConfigService],\n    }),\n    CqrsModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService-1.html":{"url":"injectables/AppService-1.html","title":"injectable - AppService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService-2.html":{"url":"injectables/AppService-2.html","title":"injectable - AppService-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-rabbitmq-microservice/microservice-client/src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-rabbitmq-microservice/microservice-client/src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService-3.html":{"url":"injectables/AppService-3.html","title":"injectable - AppService-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-rabbitmq-microservice/microservices-app/src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-rabbitmq-microservice/microservices-app/src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService-4.html":{"url":"injectables/AppService-4.html","title":"injectable - AppService-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            simple-nestjs-microservice/microservice-client/src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in simple-nestjs-microservice/microservice-client/src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService-5.html":{"url":"injectables/AppService-5.html","title":"injectable - AppService-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            simple-nestjs-microservice/microservices-app/src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in simple-nestjs-microservice/microservices-app/src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/app/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('authenticate')@ApiBadRequestResponse({schema: undefined})@ApiUnauthorizedResponse({schema: undefined})@ApiOkResponse({schema: undefined})\n                \n            \n\n            \n                \n                    Defined in nestjs-authentication-authz/src/app/controllers/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Controller, Get, HttpStatus, Req, UnauthorizedException } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiTags, ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { FirebaseAuthService } from '../services/firebase.service';\nimport * as CONSTANT from '../constants.api';\n\n@ApiBearerAuth('access-token')\n@ApiTags('Auth')\n@Controller('/api/v1')\nexport class AuthController {\n\n  constructor(private authService: FirebaseAuthService) { }\n\n  @Get('authenticate')\n  @ApiBadRequestResponse({ schema: { example: { statusCode: 400, message: CONSTANT.MISSING_AUTH_HEADER, error: 'Bad Request' } } })\n  @ApiUnauthorizedResponse({ schema: { example: { statusCode: 401, message: CONSTANT.INVALID_AUTH_TOKEN, error: 'Unauthorized' } } })\n  @ApiOkResponse({ schema: { example: { isAuthenticate: true, status: 200 } } })\n  public async authenticate(@Req() req: Request): Promise {\n    const authToken = req.headers.authorization;\n\n    if (!authToken) {\n      throw new BadRequestException(CONSTANT.MISSING_AUTH_HEADER);\n    }\n    try {\n      const {uid, email, companyId, role } = await this.authService.authenticate(authToken);\n      return { uid, email, companyId, role,  status: HttpStatus.OK };\n    } catch (error) {\n      throw new UnauthorizedException(error.message);\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController-1.html":{"url":"controllers/AuthController-1.html","title":"controller - AuthController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('authenticate')@ApiBadRequestResponse({schema: undefined})@ApiUnauthorizedResponse({schema: undefined})@ApiOkResponse({schema: undefined})\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Controller, Get, HttpStatus, Req, UnauthorizedException } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiTags, ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { FirebaseAuthService } from '../services/firebase.service';\nimport * as CONSTANT from '../constants.api';\n\n@ApiBearerAuth('access-token')\n@ApiTags('Auth')\n@Controller('/api/v1')\nexport class AuthController {\n\n  constructor(private authService: FirebaseAuthService) { }\n\n  @Get('authenticate')\n  @ApiBadRequestResponse({ schema: { example: { statusCode: 400, message: CONSTANT.MISSING_AUTH_HEADER, error: 'Bad Request' } } })\n  @ApiUnauthorizedResponse({ schema: { example: { statusCode: 401, message: CONSTANT.INVALID_AUTH_TOKEN, error: 'Unauthorized' } } })\n  @ApiOkResponse({ schema: { example: { isAuthenticate: true, status: 200 } } })\n  public async authenticate(@Req() req: Request): Promise {\n    const authToken = req.headers.authorization;\n\n    if (!authToken) {\n      throw new BadRequestException(CONSTANT.MISSING_AUTH_HEADER);\n    }\n    try {\n      const {uid, email,role } = await this.authService.authenticate(authToken);\n      return { uid, email, role,  status: HttpStatus.OK };\n    } catch (error) {\n      throw new UnauthorizedException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController-2.html":{"url":"controllers/AuthController-2.html","title":"controller - AuthController-2","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(user: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(DoesUserExist)@Post('signup')\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Body, Post, UseGuards, Request } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { AuthService } from './auth.service';\nimport { UserDto } from '../users/dto/user.dto';\nimport { DoesUserExist } from '../../core/guards/doesUserExist.guard';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private authService: AuthService) { }\n\n    @UseGuards(AuthGuard('local'))\n    @Post('login')\n    async login(@Request() req) {\n        return await this.authService.login(req.user);\n    }\n\n    @UseGuards(DoesUserExist)\n    @Post('signup')\n    async signUp(@Body() user: UserDto) {\n        return await this.authService.create(user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware.html":{"url":"injectables/AuthMiddleware.html","title":"injectable - AuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/auth.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authorizationService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-testing-unit-e2e/src/app/auth.middleware.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authorizationService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res_: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/auth.middleware.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res_\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { createParamDecorator, ExecutionContext, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\nimport { NextFunction, Request, Response } from 'express';\nimport AuthService from './domain/services/auth.service';\n// tslint:disable:naming-convention\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private authorizationService: AuthService) {}\n\n  public async use(req: Request, res_: Response, next: NextFunction) {\n    const { authorization } = req.headers;\n    if (!authorization) {\n      throw new HttpException({ message: 'missing token' }, HttpStatus.BAD_REQUEST);\n    }\n    if (this.authorizationService.validate(authorization)){\n      console.log('??')\n      next();\n    } else {\n    throw new HttpException({ message: 'invalid token' }, HttpStatus.UNAUTHORIZED);\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware-1.html":{"url":"injectables/AuthMiddleware-1.html","title":"injectable - AuthMiddleware-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/middleware/auth.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseService: FirebaseAuthService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-firebase-auth-authz/src/app/middleware/auth.middleware.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseService\n                                                  \n                                                        \n                                                                        FirebaseAuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: RequestModel, _: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/middleware/auth.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                RequestModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { createParamDecorator, ExecutionContext, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\nimport { NextFunction, Request, Response } from 'express';\nimport { FirebaseAuthService } from '../services/firebase.service';\nexport interface RequestModel extends Request {\n  user: any;\n}\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private readonly firebaseService: FirebaseAuthService){}\n\n  public async use(req: RequestModel, _: Response, next: NextFunction) {\n    try {\n    const { authorization } = req.headers;\n    if (!authorization) {\n      throw new HttpException({ message: 'missing authz header' }, HttpStatus.BAD_REQUEST);\n    }\n    const user = await this.firebaseService.authenticate(authorization);\n    console.log(user);\n    req.user = user;\n    next();\n   } catch(err) {\n    throw new HttpException({ message: 'invalid token' }, HttpStatus.UNAUTHORIZED);\n   }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware-2.html":{"url":"injectables/AuthMiddleware-2.html","title":"injectable - AuthMiddleware-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/common/auth.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in typescript-nestjs/src/app/common/auth.middleware.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, _: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in typescript-nestjs/src/app/common/auth.middleware.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { createParamDecorator, ExecutionContext, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\nimport { NextFunction, Request, Response } from 'express';\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n\n  constructor() {}\n\n  public async use(req: Request, _: Response, next: NextFunction) {\n    const { authorization } = req.headers;\n    if (!authorization) {\n      throw new HttpException({ message: 'Missing authorization Header' }, HttpStatus.BAD_REQUEST);\n    }\n    // this.service.validate(authorization);\n    next();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware-3.html":{"url":"injectables/AuthMiddleware-3.html","title":"injectable - AuthMiddleware-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/core/middleware/middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authorizationService: AuthorizationService, logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/app/core/middleware/middleware.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authorizationService\n                                                  \n                                                        \n                                                                    AuthorizationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, _: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/core/middleware/middleware.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, HttpStatus, createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\nimport { NextFunction, Request, Response } from 'express';\nimport { Logger } from '../../../logger/logger';\nimport AuthorizationService from '../../shared/services/authorization-service';\n\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n\n  constructor(private authorizationService: AuthorizationService, private logger: Logger) {\n\n  }\n  async use(req: Request, _: Response, next: NextFunction) {\n    const { authorization } = req.headers;\n    if (!authorization) {\n      throw new HttpException({ message: 'Token Not Provided, Token Authorization Failed' }, HttpStatus.UNAUTHORIZED);\n    }\n    try {\n      const { data } = await this.authorizationService.authorizeRequest(authorization);\n      this.logger.info(`${data.uid}${data.email}` );\n      if (data.email && data.uid) {\n        req['user'] = data;\n        next();\n      } else {\n        throw new HttpException({ message: 'Token Authorization Failed' }, HttpStatus.UNAUTHORIZED);\n      }\n    } catch (err) {\n      throw new HttpException({ message: 'Token Authorization Failed' }, HttpStatus.UNAUTHORIZED);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule,\n    UsersModule,\n    JwtModule.register({\n      secret: process.env.JWTKEY\n    }),\n  ],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthPayload.html":{"url":"classes/AuthPayload.html","title":"class - AuthPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/graphql.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/graphql.schema.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Signup {\n    username: string;\n    email: string;\n    password: string;\n}\n\nexport class SignupResponse {\n    username: string;\n    email: string;\n}\n\nexport class AuthPayload {\n    email: string;\n}\n\nexport abstract class IMutation {\n    abstract signup(input: Signup): SignupResponse | Promise;\n\n    abstract login(username: string, password: string): AuthPayload | Promise;\n}\n\nexport class User {\n    userId: string;\n    username?: string;\n    email: string;\n    password: string;\n}\n\nexport abstract class IQuery {\n    abstract me(): string | Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                comparePassword\n                            \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Private\n                                    Async\n                                generateToken\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-sequelize-apis/src/modules/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(enteredPassword, dbPassword)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    enteredPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dbPassword\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly userService: UsersService,\n        private readonly jwtService: JwtService,\n    ) { }\n\n    async validateUser(username: string, pass: string) {\n        // find if user exist with this email\n        const user = await this.userService.findOneByEmail(username);\n        if (!user) {\n            return null;\n        }\n\n        // find if user password match\n        const match = await this.comparePassword(pass, user.password);\n\n        if (!match) {\n            return null;\n        }\n\n        // tslint:disable-next-line: no-string-literal\n        const { password, ...result } = user['dataValues'];\n        return result;\n    }\n\n    public async login(user) {\n        const token = await this.generateToken(user);\n        return { user, token };\n    }\n\n    public async create(user) {\n        // hash the password\n        const pass = await this.hashPassword(user.password);\n\n        // create the user\n        const newUser = await this.userService.create({ ...user, password: pass });\n\n        // tslint:disable-next-line: no-string-literal\n        const { password, ...result } = newUser['dataValues'];\n\n        // generate token\n        const token = await this.generateToken(result);\n\n        // return the user and the token\n        return { user: result, token };\n    }\n\n    private async generateToken(user) {\n        const token = await this.jwtService.signAsync(user);\n        return token;\n    }\n\n    private async hashPassword(password) {\n        const hash = await bcrypt.hash(password, 10);\n        return hash;\n    }\n\n    private async comparePassword(enteredPassword, dbPassword) {\n        const match = await bcrypt.compare(enteredPassword, dbPassword);\n        return match;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService-1.html":{"url":"injectables/AuthService-1.html","title":"injectable - AuthService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/services/auth.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/services/auth.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AuthService.name)\n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/services/auth.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport default class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n  constructor() { }\n  public validate(token: string) {\n     return true;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/controller/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                getAllUser\n                            \n                            \n                                    Public\n                                    Async\n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(registrationData: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/controller/user.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAllUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/controller/user.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(params: UserParam)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/controller/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                UserParam\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, UsePipes, ValidationPipe } from '@nestjs/common';\nimport CreateUserDto, { UserParam } from '../dto/user.dto';\nimport UserService from '../services/user.service';\n \n@Controller('/api/v1/users')\n@UsePipes(\n  new ValidationPipe({\n    whitelist: true,\n    transform: true,\n  }),\n)\nexport class AuthenticationController {\n  constructor(\n    private readonly userSvc: UserService,\n  ) {}\n  @Post('/')\n  public async createUser(@Body() registrationData: CreateUserDto) {\n    return this.userSvc.register(registrationData);\n  }\n  @Get('/:id')\n  public async getUser(@Param() params: UserParam) {\n    return await this.userSvc.getById(params.id);\n  }\n  @Get('/')\n  public async getAllUser() {\n    return await this.userSvc.getAllUsers();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogController.html":{"url":"controllers/BlogController.html","title":"controller - BlogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/controllers/blog.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createProduct\n                            \n                            \n                                    Public\n                                    Async\n                                ListAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('blog')@Roles(Role.USER)\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/blog.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        ListAllProducts\n                        \n                    \n                \n            \n            \n                \n                    \n                    ListAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('blog')@Roles(Role.USER)\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/blog.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Req, UseGuards, UsePipes, ValidationPipe } from '@nestjs/common';\nimport {\n  ApiTags,\n} from '@nestjs/swagger';\nimport { RolesGuard } from '../middleware/auth.guard';\nimport { Roles } from '../middleware/role.decorator';\n\nexport enum Role {\n  ADMIN = 'admin',\n  USER= 'user'\n}\n@ApiTags('Product')\n@Controller('/api/v1')\n@UsePipes(new ValidationPipe({\n  whitelist: true,\n  transform: true,\n}))\n@UseGuards(RolesGuard)\nexport class BlogController {\n  constructor() {}\n\n  @Get('blog')\n  @Roles(Role.USER)\n  public async ListAllProducts(): Promise {\n    return [];\n  }\n\n  @Post('blog')\n  @Roles(Role.USER)\n  public async createProduct(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cat.html":{"url":"interfaces/Cat.html","title":"interface - Cat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/domain/cat.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            age\n                                        \n                                \n                                \n                                        \n                                            breed\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        age\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        age:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        breed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        breed:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Cat {\n  name: string;\n  age: number;\n  breed: string;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatController.html":{"url":"controllers/CatController.html","title":"controller - CatController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/domain/cat.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCat\n                            \n                            \n                                    Async\n                                listAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCat\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCat(cat: CreateCatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('cat')@Post('')@ApiOperation({description: 'create new Cat'})@UsePipes(ValidationPipe)@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'OK'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiInternalServerErrorResponse({description: 'data has been created successfully'})\n                \n            \n\n            \n                \n                    Defined in typescript-nestjs/src/app/domain/cat.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                CreateCatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    listAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('cat')@Get('')@ApiOperation({description: 'Get All Cat'})@UsePipes(ValidationPipe)@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'OK'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiInternalServerErrorResponse({description: 'data has been fetched successfully'})\n                \n            \n\n            \n                \n                    Defined in typescript-nestjs/src/app/domain/cat.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Logger,\n  Param,\n  Post,\n  Put,\n  UseFilters,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiInternalServerErrorResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreateCatDto, GetCatByIdParam } from './cat.dto';\nimport { CatsService } from './cat.service';\n\n@Controller('cats')\n@UsePipes(\n  new ValidationPipe({\n    whitelist: true,\n    transform: true,\n  }),\n)\nexport class CatController {\n  constructor(private readonly catService: CatsService){}\n\n  @ApiTags('cat')\n  @Post('')\n  @ApiOperation({\n     description: 'create new Cat' })\n  @UsePipes(ValidationPipe)\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'OK' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiInternalServerErrorResponse({ description: 'data has been created successfully' })\n  async createCat(@Body() cat: CreateCatDto) {\n    return this.catService.create(cat);\n  }\n\n  @ApiTags('cat')\n  @Get('')\n  @ApiOperation({\n     description: 'Get All Cat' })\n  @UsePipes(ValidationPipe)\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'OK' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiInternalServerErrorResponse({ description: 'data has been fetched successfully' })\n  async listAll() {\n    return this.catService.findAll();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/entities/category.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/category.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/category.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/category.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.category)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/category.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/category.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport Comment from './comment';\nimport Post from './post';\nimport User from './user';\n\n@Entity()\nclass Category {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  @IsNotEmpty()\n  public category!: string;\n \n  @OneToOne(() => Post, post => post.category)\n  public post!: Post;\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default Category;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatsModule.html":{"url":"modules/CatsModule.html","title":"module - CatsModule","body":"\n                   \n\n\n\n\n    Modules\n    CatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\n\nCatsService\n\nCatsService\n\n\n\nCatsModule\n\nCatsModule\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            typescript-nestjs/src/app/domain/cat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in typescript-nestjs/src/app/domain/cat.module.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule, MiddlewareConsumer, RequestMethod } from '@nestjs/common';\nimport { AuthMiddleware } from '../common/auth.middleware';\nimport { CatController } from './cat.controller';\nimport { CatsService } from './cat.service';\n\n@Module({\n  controllers: [CatController],\n  providers: [CatsService],\n})\nexport class CatsModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer) {\n    consumer.apply(AuthMiddleware)\n      .exclude('/api/v1/cat/something')\n      .forRoutes({path: '/api/v1', method : RequestMethod.ALL});\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatsService.html":{"url":"injectables/CatsService.html","title":"injectable - CatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/domain/cat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cats\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(cat: Cat)\n                \n            \n\n\n            \n                \n                    Defined in typescript-nestjs/src/app/domain/cat.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                Cat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in typescript-nestjs/src/app/domain/cat.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Cat[]\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cats\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Cat[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Cat } from './cat.interface';\n\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = [];\n\n  create(cat: Cat) {\n    this.cats.push(cat);\n  }\n\n  findAll(): Cat[] {\n    return this.cats;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/entities/comment.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                            \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/comment.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/comment.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments, {eager: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/comment.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/comment.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/comment.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.comments, {eager: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/comment.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport Post from './post';\nimport User from './user';\n\n@Entity()\nclass Comment {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  @IsNotEmpty()\n  public text!: string;\n\n  @ManyToOne(() => User, user => user.comments, { eager: true, onDelete: 'CASCADE' })\n  public user!: User;\n\n  @ManyToOne(() => Post, post => post.comments, { eager: true, onDelete: 'CASCADE' })\n  public post!: Post;\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default Comment;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Company.html":{"url":"classes/Company.html","title":"class - Company","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Company\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/company/model/company.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ceo\n                            \n                            \n                                createdBy\n                            \n                            \n                                history\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ceo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/model/company.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/model/company.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/model/company.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/model/company.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/model/company.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type CompanyDocument = Company & Document;\n\n@Schema()\nexport class Company {\n  @Prop()\n  name: string;\n\n  @Prop()\n  createdBy: number;\n\n  @Prop()\n  owner: string;\n\n  @Prop()\n  history: string;\n\n  @Prop()\n  ceo: string;\n}\n\nexport const CompanySchema = SchemaFactory.createForClass(Company);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CompanyController.html":{"url":"controllers/CompanyController.html","title":"controller - CompanyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CompanyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/company/controller/company.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/company\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                archiveCompany\n                            \n                            \n                                    Async\n                                createCompany\n                            \n                            \n                                    Async\n                                getCompanies\n                            \n                            \n                                    Async\n                                getCompany\n                            \n                            \n                                    Async\n                                updateCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        archiveCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    archiveCompany(res, companyId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Delete('/:companyId')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'company updated successfully'})@ApiBadRequestResponse({description: PARAMETERS_FAILED_VALIDATION})\n                \n            \n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/controller/company.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(res, companydto: CompanyDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'created company successfully'})@ApiBadRequestResponse({description: PARAMETERS_FAILED_VALIDATION})\n                \n            \n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/controller/company.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companydto\n                                    \n                                                CompanyDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCompanies\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompanies(res, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/list')@Roles(Role.ADMIN)@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Company has been successfully fetched'})@ApiBadRequestResponse({description: PARAMETERS_FAILED_VALIDATION})@ApiInternalServerErrorResponse({description: 'unable to fetch company details'})\n                \n            \n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/controller/company.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompany(res, companyId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Get('/:companyId')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'company fetched successfully'})@ApiBadRequestResponse({description: PARAMETERS_FAILED_VALIDATION})\n                \n            \n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/controller/company.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCompany(res, companydto: Partial, companyId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@Put('/:companyId')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'company updated successfully'})@ApiBadRequestResponse({description: PARAMETERS_FAILED_VALIDATION})\n                \n            \n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/controller/company.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companydto\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    companyId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller, Get, Post, Delete, Put, Body, Res, HttpStatus,\n  Param, HttpCode, ValidationPipe, UsePipes, UseGuards, Req\n} from '@nestjs/common';\nimport { ApiBadRequestResponse, ApiInternalServerErrorResponse, ApiOkResponse } from '@nestjs/swagger';\nimport { RolesGuard } from '../../core/guard/role.guard';\nimport { PARAMETERS_FAILED_VALIDATION } from '../../../app.constants';\nimport { ValidateObjectId } from '../pipe/company.pipe';\nimport { CompanyService } from '../services/company.service';\nimport { Roles } from '../../core/decorator/role.decorator';\nimport { CompanyDTO } from '../dto/company.dto';\n\nexport enum Role {\n  ADMIN= 'ADMIN'\n}\n@Controller('/api/v1/company')\n@UseGuards(RolesGuard)\n@UsePipes(new ValidationPipe({\n  whitelist: true,\n  transform: true,\n}))\nexport class CompanyController {\n  constructor(private companyService: CompanyService) { }\n\n  @Get('/list')\n  @Roles(Role.ADMIN)\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Company has been successfully fetched' })\n  @ApiBadRequestResponse({ description: PARAMETERS_FAILED_VALIDATION })\n  @ApiInternalServerErrorResponse({ description: 'unable to fetch company details' })\n  async getCompanies(@Res() res, @Req() req) {\n    const company = await this.companyService.getAllCompany();\n    return res.status(HttpStatus.OK).json({\n      message: 'Company has been successfully fetched',\n      data: company\n    });\n  }\n\n  @Roles(Role.ADMIN)\n  @Get('/:companyId')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'company fetched successfully' })\n  @ApiBadRequestResponse({ description: PARAMETERS_FAILED_VALIDATION })\n  async getCompany(@Res() res, @Param('companyId', new ValidateObjectId()) companyId) {\n    const company = await this.companyService.getCompany(companyId);\n    return res.status(HttpStatus.OK).json({\n      message: 'Company has been fetched successfully',\n      data: company\n    });\n  }\n\n  @Post('/')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'created company successfully' })\n  @ApiBadRequestResponse({ description: PARAMETERS_FAILED_VALIDATION })\n  async createCompany(@Res() res, @Body() companydto: CompanyDTO) {\n    const company = await this.companyService.createCompany(companydto);\n    return res.status(HttpStatus.OK).json({\n      message: 'Company has been created successfully',\n      data: company\n    });\n  }\n\n  @Roles(Role.ADMIN)\n  @Put('/:companyId')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'company updated successfully' })\n  @ApiBadRequestResponse({ description: PARAMETERS_FAILED_VALIDATION })\n  async updateCompany(@Res() res, @Body() companydto: Partial,\n                      @Param('companyId', new ValidateObjectId()) companyId) {\n    const company = await this.companyService.updateCompany(companyId, companydto);\n    return res.status(HttpStatus.OK).json({\n      message: 'Company has been updated successfully',\n      data: company\n    });\n  }\n\n  @Roles(Role.ADMIN)\n  @Delete('/:companyId')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'company updated successfully' })\n  @ApiBadRequestResponse({ description: PARAMETERS_FAILED_VALIDATION })\n  async archiveCompany(@Res() res,\n                       @Param('companyId', new ValidateObjectId()) companyId) {\n    const company = await this.companyService.deleteCompany(companyId);\n    return res.status(HttpStatus.OK).json({\n      message: 'Company has been purged successfully',\n      data: company\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CompanyDTO.html":{"url":"classes/CompanyDTO.html","title":"class - CompanyDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CompanyDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/company/dto/company.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ceo\n                            \n                            \n                                history\n                            \n                            \n                                name\n                            \n                            \n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ceo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/dto/company.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/dto/company.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/dto/company.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/app/company/dto/company.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CompanyDTO {\n  name: string;\n  history: string;\n  owner: string;\n  ceo: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CompanyModule.html":{"url":"modules/CompanyModule.html","title":"module - CompanyModule","body":"\n                   \n\n\n\n\n    Modules\n    CompanyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_imports\n\n\n\ncluster_CompanyModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nCompanyModule\n\nCompanyModule\n\nCompanyModule -->\n\nDatabaseModule->CompanyModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nCompanyModule -->\n\nLoggerModule->CompanyModule\n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/company/entity.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CompanyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CompanyController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            LoggerModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/entity.module.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule, RequestMethod, Type } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { LoggerModule } from '../../logger/logger.module';\nimport { DatabaseModule } from '../../database/database.module';\nimport { AuthMiddleware } from '../core/middleware/middleware';\nimport { CompanyController } from './controller/company.controller';\nimport { CompanyService } from './services/company.service';\nimport { Company, CompanySchema } from './model/company';\n\n@Module({\n  imports: [\n    LoggerModule,\n    DatabaseModule.forRoot(),\n    MongooseModule\n    .forFeature(\n      [\n        { name: 'company', schema: CompanySchema }\n      ]),\n  ],\n  providers: [CompanyService],\n  exports : [],\n  controllers: [CompanyController]\n})\nexport class CompanyModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(AuthMiddleware)\n      .forRoutes({path: '/api/v1/company', method: RequestMethod.ALL});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CompanyService.html":{"url":"injectables/CompanyService.html","title":"injectable - CompanyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CompanyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/company/services/company.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCompany\n                            \n                            \n                                    Async\n                                deleteCompany\n                            \n                            \n                                    Async\n                                getAllCompany\n                            \n                            \n                                    Async\n                                getCompany\n                            \n                            \n                                    Async\n                                getCurrentCompany\n                            \n                            \n                                    Async\n                                updateCompany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(companyModel: Model)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/app/company/services/company.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        companyModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCompany(company: CompanyDTO)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/services/company.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    company\n                                    \n                                                CompanyDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCompany(companyId: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/services/company.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllCompany()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/services/company.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCompany(companyId: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/services/company.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentCompany(companyId: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/services/company.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCompany\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCompany(companyId: string, company: Partial)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/services/company.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    companyId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    company\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Company } from '../model/company';\nimport { CompanyDTO } from '../dto/company.dto';\n@Injectable()\nexport class CompanyService {\n  constructor(@InjectModel('company') private readonly companyModel: Model) { }\n  async getAllCompany(): Promise {\n      return await this.companyModel.find({}).exec();\n  }\n  async getCurrentCompany(companyId: string): Promise {\n    return await this.companyModel.find({_id: companyId}).exec();\n}\n  async getCompany(companyId: string): Promise {\n    return await this.companyModel.findById(companyId);\n  }\n  async updateCompany(companyId: string, company: Partial): Promise {\n    return await this.companyModel.findByIdAndUpdate(companyId, company, { new: true });\n  }\n  async deleteCompany(companyId: string): Promise {\n    return await this.companyModel.findByIdAndUpdate(companyId, {active: false});\n  }\n  async createCompany(company: CompanyDTO): Promise {\n    const existingCompany =  await this.companyModel.find({ siret: company.siret}).exec();\n    if (existingCompany && existingCompany.length > 0) {\n      return existingCompany[0];\n    }\n    const newCompany =  new this.companyModel(company);\n    return await newCompany.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigData.html":{"url":"interfaces/ConfigData.html","title":"interface - ConfigData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            env\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logLevel\n                                        \n                                \n                                \n                                        \n                                            mongo\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            redis\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        env\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        env:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the environment.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logLevel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The log level to use.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mongo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mongo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port number of the http server to listen on.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        redis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        redis:         RedisConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RedisConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RedisConfig {\n  host: string;\n  port: string;\n  ttl: number;\n}\nexport interface ConfigData {\n  /**\n   * The name of the environment.\n   * @example 'test', 'development', 'staging', 'production'\n   */\n  env: string;\n\n  /** The port number of the http server to listen on. */\n  port: number;\n\n  /**\n   * The log level to use.\n   * @example 'verbose', 'info', 'warn', 'error'\n   */\n  logLevel?: string;\n\n  redis: RedisConfig;\n\n  mongo: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigData-1.html":{"url":"interfaces/ConfigData-1.html","title":"interface - ConfigData-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/config/config.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            env\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logLevel\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        env\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        env:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the environment.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logLevel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The log level to use.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port number of the http server to listen on.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface RedisConfig {\n  host: string;\n  port: string;\n  ttl: number;\n}\nexport interface ConfigData {\n  /**\n   * The name of the environment.\n   * @example 'test', 'development', 'staging', 'production'\n   */\n  env: string;\n\n  /** The port number of the http server to listen on. */\n  port: number;\n\n  /**\n   * The log level to use.\n   * @example 'verbose', 'info', 'warn', 'error'\n   */\n  logLevel?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfigData-2.html":{"url":"interfaces/ConfigData-2.html","title":"interface - ConfigData-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfigData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/config/config.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration data for the app.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            env\n                                        \n                                \n                                \n                                        \n                                            gatekeeperServiceUrl\n                                        \n                                \n                                \n                                        \n                                            logLevel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mongo\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        env\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        env:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gatekeeperServiceUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gatekeeperServiceUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logLevel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The log level to use.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mongo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mongo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Database connection details.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The port number of the http server to listen on.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ConfigData {\n  env: string;\n\n  /** The port number of the http server to listen on. */\n  port: number;\n\n  /** Database connection details. */\n  mongo?: string;\n\n  /**\n   * The log level to use.\n   * @example 'verbose', 'info', 'warn', 'error'\n   */\n  logLevel: string;\n\n  gatekeeperServiceUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-authentication-authz/src/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as dotenv from 'dotenv';\nimport { ConfigService } from './config.service';\n\nconst configFactory = {\n  provide: ConfigService,\n  useFactory: () => {\n    dotenv.config();\n    const config = new ConfigService();\n    config.loadFromEnv();\n    return config;\n  },\n};\n\n@Module({\n  imports: [],\n  controllers: [],\n  providers: [configFactory],\n  exports: [configFactory],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provides a means to access the application configuration.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Private\n                                getRedisConfig\n                            \n                            \n                                    Public\n                                loadFromEnv\n                            \n                            \n                                    Private\n                                parseConfigFromEnv\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: ConfigData)\n                    \n                \n                        \n                            \n                                Defined in nestjs-authentication-authz/src/config/config.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ConfigData\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/config/config.service.ts:45\n                \n            \n\n\n            \n                \n                    Retrieves the config.\n\n\n                    \n                    \n                    \n                        Returns :     Readonly\n\n                    \n                    \n                        immutable view of the config data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getRedisConfig\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRedisConfig(env: NodeJS.ProcessEnv)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/config/config.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                            NodeJS.ProcessEnv\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RedisConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadFromEnv\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadFromEnv()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/config/config.service.ts:20\n                \n            \n\n\n            \n                \n                    Loads the config from environment variables.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        parseConfigFromEnv\n                        \n                    \n                \n            \n            \n                \n                    \n                    parseConfigFromEnv(env: NodeJS.ProcessEnv)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/config/config.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                            NodeJS.ProcessEnv\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ConfigData\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfigData\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-authentication-authz/src/config/config.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { DEFAULT_CONFIG } from './config.default';\nimport { ConfigData, RedisConfig } from './config.interface';\n\n/**\n * Provides a means to access the application configuration.\n */\n@Injectable()\nexport class ConfigService {\n  private config: ConfigData;\n\n  constructor(data: ConfigData = DEFAULT_CONFIG) {\n    this.config = data;\n  }\n\n  /**\n   * Loads the config from environment variables.\n   */\n  public loadFromEnv() {\n    this.config = this.parseConfigFromEnv(process.env);\n  }\n\n  private parseConfigFromEnv(env: NodeJS.ProcessEnv): ConfigData {\n    return {\n      env: env.ENV || DEFAULT_CONFIG.env,\n      port: env.PORT ? parseInt(env.PORT, 10) : DEFAULT_CONFIG.port,\n      mongo: env.MONGO || DEFAULT_CONFIG.mongo,\n      logLevel: env.LOG_LEVEL || DEFAULT_CONFIG.logLevel,\n      redis: env.REDIS_HOST ? this.getRedisConfig(env) : DEFAULT_CONFIG.redis,\n    };\n  }\n  private getRedisConfig(env: NodeJS.ProcessEnv): RedisConfig {\n    return {\n      host: env.REDIS_HOST,\n      port: env.REDIS_PORT,\n      ttl: parseInt(env.REDIS_TTL, 10)\n    };\n  }\n\n  /**\n   * Retrieves the config.\n   * @returns immutable view of the config data\n   */\n  public get(): Readonly {\n    return this.config;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService-1.html":{"url":"injectables/ConfigService-1.html","title":"injectable - ConfigService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provides a means to access the application configuration.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                loadFromEnv\n                            \n                            \n                                    Private\n                                parseConfigFromEnv\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: ConfigData)\n                    \n                \n                        \n                            \n                                Defined in nestjs-firebase-auth-authz/src/config/config.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ConfigData\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/config/config.service.ts:35\n                \n            \n\n\n            \n                \n                    Retrieves the config.\n\n\n                    \n                    \n                    \n                        Returns :     Readonly\n\n                    \n                    \n                        immutable view of the config data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        loadFromEnv\n                        \n                    \n                \n            \n            \n                \n                    \n                    loadFromEnv()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/config/config.service.ts:20\n                \n            \n\n\n            \n                \n                    Loads the config from environment variables.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        parseConfigFromEnv\n                        \n                    \n                \n            \n            \n                \n                    \n                    parseConfigFromEnv(env: NodeJS.ProcessEnv)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/config/config.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                            NodeJS.ProcessEnv\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ConfigData\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfigData\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-firebase-auth-authz/src/config/config.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { DEFAULT_CONFIG } from './config.default';\nimport { ConfigData, RedisConfig } from './config.interface';\n\n/**\n * Provides a means to access the application configuration.\n */\n@Injectable()\nexport class ConfigService {\n  private config: ConfigData;\n\n  constructor(data: ConfigData = DEFAULT_CONFIG) {\n    this.config = data;\n  }\n\n  /**\n   * Loads the config from environment variables.\n   */\n  public loadFromEnv() {\n    this.config = this.parseConfigFromEnv(process.env);\n  }\n\n  private parseConfigFromEnv(env: NodeJS.ProcessEnv): ConfigData {\n    return {\n      env: env.ENV || DEFAULT_CONFIG.env,\n      port: env.PORT ? parseInt(env.PORT, 10) : DEFAULT_CONFIG.port,\n      logLevel: env.LOG_LEVEL || DEFAULT_CONFIG.logLevel,\n    };\n  }\n  /**\n   * Retrieves the config.\n   * @returns immutable view of the config data\n   */\n  public get(): Readonly {\n    return this.config;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService-2.html":{"url":"injectables/ConfigService-2.html","title":"injectable - ConfigService-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Provides a means to access the application configuration.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                lofusingDotEnv\n                            \n                            \n                                    Private\n                                parseConfigFromEnv\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: ConfigData)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/config/config.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        ConfigData\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/config/config.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Readonly\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        lofusingDotEnv\n                        \n                    \n                \n            \n            \n                \n                    \n                    lofusingDotEnv()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/config/config.service.ts:20\n                \n            \n\n\n            \n                \n                    Loads the config from environment variables.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        parseConfigFromEnv\n                        \n                    \n                \n            \n            \n                \n                    \n                    parseConfigFromEnv(env: NodeJS.ProcessEnv)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/config/config.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    env\n                                    \n                                            NodeJS.ProcessEnv\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ConfigData\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfigData\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/config/config.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\nimport { DEFAULT_CONFIG } from './config.default';\nimport { ConfigData } from './config.interface';\n\n/**\n * Provides a means to access the application configuration.\n */\n@Injectable()\nexport class ConfigService {\n  private config: ConfigData;\n\n  constructor(data: ConfigData = DEFAULT_CONFIG) {\n    this.config = data;\n  }\n\n  /**\n   * Loads the config from environment variables.\n   */\n  public lofusingDotEnv() {\n    this.config = this.parseConfigFromEnv(process.env);\n  }\n\n  private parseConfigFromEnv(env: NodeJS.ProcessEnv): ConfigData {\n    return {\n      env: env.NODE_ENV || DEFAULT_CONFIG.env,\n      port: env.PORT ? parseInt(env.PORT, 10) : DEFAULT_CONFIG.port,\n      mongo: env.MONGO || DEFAULT_CONFIG.mongo,\n      logLevel: env.LOG_LEVEL || DEFAULT_CONFIG.logLevel,\n      gatekeeperServiceUrl: env.GATEKEEPER_SERVICE_URL || DEFAULT_CONFIG.gatekeeperServiceUrl\n    };\n  }\n  public get(): Readonly {\n    return this.config;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact.html":{"url":"interfaces/Contact.html","title":"interface - Contact","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact-1.html":{"url":"interfaces/Contact-1.html","title":"interface - Contact-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact-2.html":{"url":"interfaces/Contact-2.html","title":"interface - Contact-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact-3.html":{"url":"interfaces/Contact-3.html","title":"interface - Contact-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Contact-4.html":{"url":"interfaces/Contact-4.html","title":"interface - Contact-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Contact\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCatDto.html":{"url":"classes/CreateCatDto.html","title":"class - CreateCatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/domain/cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                address\n                            \n                            \n                                    Readonly\n                                age\n                            \n                            \n                                    Readonly\n                                breed\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'address', required: true, type: undefined})@IsOptional()@IsArray()@ArrayMinSize(1)@ValidateNested()@ValidateType(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '', required: true})@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        breed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '', required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '', required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayMinSize, IsArray, IsInt, IsOptional, IsString, IsUUID, ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type as ValidateType } from 'class-transformer';\n\n\nexport class Address {\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly city: string;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly state: number; \n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class CreateCatDto {\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly name: string;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsInt()\n  readonly age: number;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly breed: string;\n\n  @ApiProperty({description:\"address\", required: true, type: [Address]})\n  @IsOptional()\n  @IsArray()\n  @ArrayMinSize(1)\n  @ValidateNested()\n  @ValidateType(() => Address)\n  public address?: Address [];\n}\n\n\n// tslint:disable-next-line:max-classes-per-file\nexport class GetCatByIdParam {\n  @ApiProperty({description:\"\", required: true})\n  @IsUUID()\n  readonly id!: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                tags\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'EMAIL', required: true})@IsEmail()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostTag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'tags', required: false, type: undefined})@IsOptional()@IsArray()@ValidateNested()@ArrayMinSize(1)@ValidateType(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'TITLE', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'url', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchParamsDto {\n  @ApiProperty({\n    description: 'id of post',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public id?: number;\n}\n\nexport class SearchElasticDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n}\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto-1.html":{"url":"classes/CreatePostDto-1.html","title":"class - CreatePostDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                tags\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'EMAIL', required: true})@IsEmail()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostTag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'tags', required: false, type: undefined})@IsOptional()@IsArray()@ValidateNested()@ArrayMinSize(1)@ValidateType(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'TITLE', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'url', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto-2.html":{"url":"classes/CreatePostDto-2.html","title":"class - CreatePostDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                    Optional\n                                tags\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'EMAIL', required: true})@IsEmail()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PostTag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'tags', required: false, type: undefined})@IsOptional()@IsArray()@ValidateNested()@ArrayMinSize(1)@ValidateType(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'TITLE', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'url', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserCommand.html":{"url":"classes/CreateUserCommand.html","title":"class - CreateUserCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/commands/impl/create-user.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                            \n                                    Public\n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(username: string, email: string, password: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-cqrs-demo/src/users/commands/impl/create-user.command.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        username\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/commands/impl/create-user.command.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/commands/impl/create-user.command.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/commands/impl/create-user.command.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserCommand {\n    constructor(\n        public readonly username: string,\n        public readonly email: string,\n        public readonly password: string,\n    ) {}\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email', required: true})@IsEmail()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-s3-azure-blob/src/app/domain/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'username', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-s3-azure-blob/src/app/domain/dto/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'password', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-s3-azure-blob/src/app/domain/dto/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class UserParam {\n  @ApiProperty({description: 'user id', required: true})\n  @IsDefined()\n  @IsNotEmpty()\n  public id!: string;\n}\nexport class CreateUserDto {\n  @ApiProperty({description: 'email', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'username', required: true})\n  @IsString()\n  @MinLength(4)\n  public name!: string;\n\n  @ApiProperty({description: 'password', required: true})\n   @IsString()\n  @MinLength(4)\n  public password!: string;\n}\n \nexport default CreateUserDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto-1.html":{"url":"classes/CreateUserDto-1.html","title":"class - CreateUserDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email', required: true})@IsEmail()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'username', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/dto/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'password', required: true})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/dto/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class UserParam {\n  @ApiProperty({description: 'user id', required: true})\n  @IsDefined()\n  @IsNotEmpty()\n  public id!: string;\n}\nexport class CreateUserDto {\n  @ApiProperty({description: 'email', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'username', required: true})\n  @IsString()\n  @MinLength(4)\n  public name!: string;\n\n  @ApiProperty({description: 'password', required: true})\n   @IsString()\n  @MinLength(4)\n  public password!: string;\n}\n \nexport default CreateUserDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserHandler.html":{"url":"classes/CreateUserHandler.html","title":"class - CreateUserHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/commands/handlers/create-user.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                convertStringToBinary\n                            \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Private\n                                    Async\n                                sendEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventBus: EventBus)\n                    \n                \n                        \n                            \n                                Defined in nestjs-cqrs-demo/src/users/commands/handlers/create-user.handler.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventBus\n                                                  \n                                                        \n                                                                    EventBus\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        convertStringToBinary\n                        \n                    \n                \n            \n            \n                \n                    \n                    convertStringToBinary(uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/users/commands/handlers/create-user.handler.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateUserCommand)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/users/commands/handlers/create-user.handler.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateUserCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        sendEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendEvent(userId: Buffer, eventBus: EventBus)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/users/commands/handlers/create-user.handler.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    eventBus\n                                    \n                                            EventBus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserCommand } from \"../impl/create-user.command\";\nimport { ICommandHandler, CommandHandler, EventBus } from \"@nestjs/cqrs\";\nimport { UserRepository } from \"src/users/repositories/user.repository\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { UserCreatedEvent } from \"src/users/events/impl/user-created.event\";\nimport { getCustomRepository } from \"typeorm\";\nimport { Users } from \"src/users/users.entity\";\n\n\n@CommandHandler(CreateUserCommand)\nexport class CreateUserHandler implements ICommandHandler {\n    constructor(\n        private readonly eventBus: EventBus,\n    ) { }\n\n    async execute(command: CreateUserCommand) {\n\n        const { username, email, password } = command;\n        const userRepository = getCustomRepository(UserRepository);\n \n        const user = userRepository.create();\n        user.userId = await this.convertStringToBinary(uuidv4());\n        user.username = username;\n        user.email = email;\n        user.password = password;\n        \n        const userDB: Users = await userRepository.save(user);\n        \n        \n        this.sendEvent(userDB.userId, this.eventBus);\n        \n        return userDB;\n    }\n\n    private async sendEvent(userId: Buffer, eventBus: EventBus) {\n        if(userId !== undefined) {\n            console.log(\"send event UserCreatedEvent\");\n            eventBus.publish(\n                new UserCreatedEvent(\n                    Buffer.from(userId).toString('hex')));\n        }\n    }\n\n    private async convertStringToBinary(uuid: string): Promise {\n        const guid = Buffer.alloc(16);\n        guid.write(uuid);\n        return guid;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-authentication-authz/src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/database/database.module.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getNoSqlConnectionOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNoSqlConnectionOptions(config: ConfigService)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/database/database.module.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                ConfigService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MongooseModuleOptions\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, DynamicModule } from '@nestjs/common';\nimport { ConfigModule } from '../config/config.module';\nimport { ConfigService } from '../config/config.service';\nimport { DbConfigError, DbError } from './db.error';\nimport { MongooseModule, MongooseModuleOptions } from '@nestjs/mongoose';\n\n@Module({})\nexport class DatabaseModule {\n\n  public static getNoSqlConnectionOptions(config: ConfigService): MongooseModuleOptions {\n    const dbdata = config.get().mongo;\n\n    if (!dbdata) {\n      throw new DbConfigError('Database config is missing');\n    }\n    return {\n      uri: dbdata\n    };\n  }\n  public static forRoot(): DynamicModule {\n    return {\n      module: DatabaseModule,\n      imports: [\n      MongooseModule.forRootAsync({\n        imports: [ConfigModule],\n        useFactory: (configService: ConfigService) => DatabaseModule.getNoSqlConnectionOptions(configService),\n        inject: [ConfigService],\n      }),\n      ],\n      controllers: [],\n      providers: [],\n      exports: [],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DbConfig.html":{"url":"interfaces/DbConfig.html","title":"interface - DbConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DbConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/db/db.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Contains configuration options for the TypeORM database.\nNote that connection details, such as host and credentials, come from the environment variables, via the main config.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entities\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entities:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionOptions } from 'typeorm';\n\n/**\n * Contains configuration options for the TypeORM database.\n * Note that connection details, such as host and credentials, come from the environment variables, via the main config.\n */\nexport interface DbConfig {\n  entities: ConnectionOptions['entities'];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DbConfig-1.html":{"url":"interfaces/DbConfig-1.html","title":"interface - DbConfig-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DbConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/db/db.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Contains configuration options for the TypeORM database.\nNote that connection details, such as host and credentials, come from the environment variables, via the main config.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entities\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entities:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionOptions } from 'typeorm';\n\n/**\n * Contains configuration options for the TypeORM database.\n * Note that connection details, such as host and credentials, come from the environment variables, via the main config.\n */\nexport interface DbConfig {\n  entities: ConnectionOptions['entities'];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DbConfig-2.html":{"url":"interfaces/DbConfig-2.html","title":"interface - DbConfig-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DbConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/db/db.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Contains configuration options for the TypeORM database.\nNote that connection details, such as host and credentials, come from the environment variables, via the main config.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entities\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entities:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionOptions } from 'typeorm';\n\n/**\n * Contains configuration options for the TypeORM database.\n * Note that connection details, such as host and credentials, come from the environment variables, via the main config.\n */\nexport interface DbConfig {\n  entities: ConnectionOptions['entities'];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DbConfig-3.html":{"url":"interfaces/DbConfig-3.html","title":"interface - DbConfig-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DbConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/db/db.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Contains configuration options for the TypeORM database.\nNote that connection details, such as host and credentials, come from the environment variables, via the main config.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entities\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entities\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entities:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionOptions } from 'typeorm';\n\n/**\n * Contains configuration options for the TypeORM database.\n * Note that connection details, such as host and credentials, come from the environment variables, via the main config.\n */\nexport interface DbConfig {\n  entities: ConnectionOptions['entities'];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbConfigError.html":{"url":"classes/DbConfigError.html","title":"class - DbConfigError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbConfigError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/database/db.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DbError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-authentication-authz/src/database/db.error.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbConfigError-1.html":{"url":"classes/DbConfigError-1.html","title":"class - DbConfigError-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbConfigError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DbError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-elastic/src/db/db.errors.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbConfigError-2.html":{"url":"classes/DbConfigError-2.html","title":"class - DbConfigError-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbConfigError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DbError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-pagination/src/db/db.errors.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbConfigError-3.html":{"url":"classes/DbConfigError-3.html","title":"class - DbConfigError-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbConfigError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/database/db.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DbError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/database/db.error.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbConfigError-4.html":{"url":"classes/DbConfigError-4.html","title":"class - DbConfigError-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbConfigError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DbError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-testing-unit-e2e/src/db/db.errors.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbConfigError-5.html":{"url":"classes/DbConfigError-5.html","title":"class - DbConfigError-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbConfigError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        DbError\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-starter-/src/db/db.errors.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbError.html":{"url":"classes/DbError.html","title":"class - DbError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/database/db.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-authentication-authz/src/database/db.error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbError-1.html":{"url":"classes/DbError-1.html","title":"class - DbError-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-elastic/src/db/db.errors.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbError-2.html":{"url":"classes/DbError-2.html","title":"class - DbError-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-pagination/src/db/db.errors.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbError-3.html":{"url":"classes/DbError-3.html","title":"class - DbError-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/database/db.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/database/db.error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\n// tslint:disable-next-line: max-classes-per-file\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbError-4.html":{"url":"classes/DbError-4.html","title":"class - DbError-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-testing-unit-e2e/src/db/db.errors.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DbError-5.html":{"url":"classes/DbError-5.html","title":"class - DbError-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DbError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/db/db.errors.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-starter-/src/db/db.errors.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DbError extends Error {\n  public constructor(message = 'Unknown database error') {\n    super(message);\n  }\n}\n\nexport class DbConfigError extends DbError {\n  public constructor(message = 'Database configuration error') {\n    super(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbModule.html":{"url":"modules/DbModule.html","title":"module - DbModule","body":"\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/db/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(dbconfig: DbConfig)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/db/db.module.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dbconfig\n                                    \n                                                DbConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        getConnectionOptions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionOptions(dbconfig: DbConfig)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/db/db.module.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dbconfig\n                                    \n                                                DbConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        getConnectionOptionsPostgres\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectionOptionsPostgres()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/db/db.module.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm';\n\nimport { DbConfigError } from './db.errors';\nimport { DbConfig } from './db.interface';\n@Module({})\nexport class DbModule {\n  private static getConnectionOptions( dbconfig: DbConfig): TypeOrmModuleOptions {\n    const connectionOptions = DbModule.getConnectionOptionsPostgres();\n    return {\n      ...connectionOptions,\n      entities: dbconfig.entities,\n      synchronize: false,\n      logging: false,\n    };\n  }\n\n  private static getConnectionOptionsPostgres(): TypeOrmModuleOptions {\n    return {\n      type: 'postgres',\n      url: process.env.DATABASE_URL,\n      keepConnectionAlive: true\n    };\n  }\n\n  public static forRoot(dbconfig: DbConfig): DynamicModule {\n    return {\n      module: DbModule,\n      imports: [\n        TypeOrmModule.forRootAsync({\n          imports: [],\n          useFactory: () => DbModule.getConnectionOptions(dbconfig),\n          inject: [],\n        }),\n      ],\n      controllers: [],\n      providers: [],\n      exports: [],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/DoesUserExist.html":{"url":"guards/DoesUserExist.html","title":"guard - DoesUserExist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    DoesUserExist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                nestjs-sequelize-apis/src/core/guards/doesUserExist.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Async\n                                validateRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-sequelize-apis/src/core/guards/doesUserExist.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/core/guards/doesUserExist.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateRequest(request)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/core/guards/doesUserExist.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable, ForbiddenException } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\nimport { UsersService } from '../../modules/users/users.service';\n\n@Injectable()\nexport class DoesUserExist implements CanActivate {\n    constructor(private readonly userService: UsersService) { }\n\n    canActivate(\n        context: ExecutionContext,\n    ): boolean | Promise | Observable {\n        const request = context.switchToHttp().getRequest();\n        return this.validateRequest(request);\n    }\n\n    async validateRequest(request) {\n        const userExist = await this.userService.findOneByEmail(request.body.email);\n        if (userExist) {\n            throw new ForbiddenException('This email already exist');\n        }\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DomainModule.html":{"url":"modules/DomainModule.html","title":"module - DomainModule","body":"\n                   \n\n\n\n\n    Modules\n    DomainModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DomainModule\n\n\n\ncluster_DomainModule_imports\n\n\n\n\nDbModule\n\nDbModule\n\n\n\nDomainModule\n\nDomainModule\n\nDomainModule -->\n\nDbModule->DomainModule\n\n\n\n\n\nRedisCacheModule\n\nRedisCacheModule\n\nDomainModule -->\n\nRedisCacheModule->DomainModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nDomainModule -->\n\nSearchModule->DomainModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/domain.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DbModule\n                        \n                        \n                            RedisCacheModule\n                        \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule, RequestMethod, Type, CacheModule } from '@nestjs/common';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { DbModule } from '../../db/db.module';\nimport { RedisCacheModule } from '../redis/redis.module';\nimport { SearchModule } from '../search/search.module';\nimport { PostController } from './controller/user.controller';\n\nexport const ALL_ENTITIES = fs.readdirSync(path.join(path.dirname(__filename), 'entities'))\n  .filter((file) => (path.extname(file) === '.js' || path.extname(file) === '.ts') && !file.endsWith('.d.ts'))\n  .map((file) => require(`./entities/${file}`).default as Type);\n\nexport const ALL_SERVICES = fs.readdirSync(path.join(path.dirname(__filename), 'services'))\n  .filter((file) => (path.extname(file) === '.js' || path.extname(file) === '.ts') && !file.endsWith('.d.ts'))\n  .filter((file) => file.indexOf('.spec') === -1)\n  .map((file) => require(`./services/${file}`).default as Type);\n\n@Module({\n  imports: [\n    SearchModule,\n    RedisCacheModule,\n    CacheModule.register({\n      ttl: 5,\n      max: 100,\n    }),\n    EventEmitterModule.forRoot(),\n    ScheduleModule.forRoot(),\n    DbModule.forRoot({ entities: ALL_ENTITIES }),\n    TypeOrmModule.forFeature(ALL_ENTITIES),\n  ],\n  controllers: [PostController],\n  providers: [\n    ...ALL_SERVICES,\n  ],\n  exports: [...ALL_SERVICES],\n})\nexport class DomainModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsInterceptor.html":{"url":"injectables/ErrorsInterceptor.html","title":"injectable - ErrorsInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/common/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in typescript-nestjs/src/app/common/exception.interceptor.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorsInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError(err =>\n          throwError(new HttpException('New message', HttpStatus.BAD_GATEWAY)),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesAzureService.html":{"url":"injectables/FilesAzureService.html","title":"injectable - FilesAzureService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesAzureService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/services/file.azure.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                blobService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createBlobFromStream\n                            \n                            \n                                    Private\n                                    Async\n                                getBlobServiceInstance\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in nestjs-s3-azure-blob/src/app/domain/services/file.azure.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createBlobFromStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    createBlobFromStream(containerName: string, blobName: string, stream: Readable, buffer: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/services/file.azure.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    containerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    blobName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stream\n                                    \n                                            Readable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    buffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getBlobServiceInstance\n                        \n                    \n                \n            \n            \n                \n                    \n                    getBlobServiceInstance()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/services/file.azure.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        blobService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage.BlobService\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-s3-azure-blob/src/app/domain/services/file.azure.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as Storage from 'azure-storage';\nimport { Readable } from 'typeorm/platform/PlatformTools';\n\n\n@Injectable()\nexport class FilesAzureService {\n  private blobService!: Storage.BlobService;\n  constructor(\n  ) {}\n  private async getBlobServiceInstance(){\n    if (this.blobService) {\n      return this.blobService;\n    }\n    return Storage.createBlobService(process.env.CONNECTION_STRING!);\n  }\n  public async createBlobFromStream\n  (containerName: string, blobName: string, stream: Readable, buffer: Buffer): Promise {\n    this.blobService = await this.getBlobServiceInstance();\n    return new Promise((resolve, reject) => {\n      return this.blobService\n      .createBlockBlobFromStream(containerName, blobName, stream, Buffer.byteLength(buffer), (error, response) => {\n        if (!error) {\n          resolve(response);\n        } else {\n          reject(error);\n        }\n      });\n    });\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesS3Service.html":{"url":"injectables/FilesS3Service.html","title":"injectable - FilesS3Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesS3Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/services/file.s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteFile\n                            \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in nestjs-s3-azure-blob/src/app/domain/services/file.s3.service.ts:5\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFile(key: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/services/file.s3.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(imageBuffer: Buffer, fileName: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/services/file.s3.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {S3} from 'aws-sdk';\n\n@Injectable()\nexport class FilesS3Service {\n  constructor(\n  ) {}\n\n  public async uploadFile(imageBuffer: Buffer, fileName: string) {\n    const s3 = new S3();\n    return await s3.upload({\n      Bucket: process.env.BUCKET_NAME!,\n      Body: imageBuffer,\n      Key: fileName,\n    }).promise();\n  }\n  public async deleteFile(key: string) {\n    const s3 = new S3();\n    return await s3.deleteObject({\n      Bucket: process.env.BUCKET_NAME!,\n      Key: key,\n    }).promise();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService.html":{"url":"injectables/FirebaseAuthService.html","title":"injectable - FirebaseAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/app/services/firebase.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                buildRequestUserProfile\n                            \n                            \n                                    Private\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger, redisCacheService: RedisCacheService, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in nestjs-authentication-authz/src/app/services/firebase.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisCacheService\n                                                  \n                                                        \n                                                                        RedisCacheService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(authToken: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/app/services/firebase.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        buildRequestUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    buildRequestUserProfile(email: string, uid: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/app/services/firebase.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getToken(authToken: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/app/services/firebase.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport * as CONSTANT from '../constants.api';\nimport admin from '../../main';\nimport { RedisCacheService } from './redis.service';\nimport { Logger } from '../../logger/logger';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n@Injectable()\nexport class FirebaseAuthService {\n\n  constructor(\n    private logger: Logger,\n    private redisCacheService: RedisCacheService,\n    @InjectModel('user') private readonly userModel: Model\n  ) { }\n\n  private getToken(authToken: string): string {\n    const match = authToken.match(/^Bearer (.*)$/);\n    if (!match || match.length  {\n    const tokenString = this.getToken(authToken);\n    try {\n      const decodedToken: admin.auth.DecodedIdToken = await admin.auth().verifyIdToken(tokenString);\n      this.logger.info(`${JSON.stringify(decodedToken)}`);\n      const key = `${decodedToken.email}:${tokenString.split('.')[2].substr(0, 16)}`;\n      const data =  await this.redisCacheService.get(key);\n      if (! data) {\n        throw new UnauthorizedException('User session does not exist in Redis');\n      }\n      return data;\n    } catch (err) {\n      this.logger.error(`error while authenticate request ${err.message}`)\n      throw new UnauthorizedException(err.message);\n    }\n  }\n  async buildRequestUserProfile(email: string, uid: string) {\n    const user = await this.userModel.findOne({ email }).populate('companyId');\n    if (user) {\n      return {\n        email: user.email,\n        uid: user.uid,\n        role: user.role,\n      };\n    } else {\n      return {\n        email,\n        uid\n      };\n    }\n }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthService-1.html":{"url":"injectables/FirebaseAuthService-1.html","title":"injectable - FirebaseAuthService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/services/firebase.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                authenticate\n                            \n                            \n                                    Private\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in nestjs-firebase-auth-authz/src/app/services/firebase.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(authToken: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/services/firebase.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getToken(authToken: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/services/firebase.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport * as CONSTANT from '../constants.api';\nimport admin from '../../main';\nimport { Logger } from '../../logger/logger';\n@Injectable()\nexport class FirebaseAuthService {\n\n  constructor(\n    private logger: Logger,\n  ) { }\n\n  private getToken(authToken: string): string {\n    const match = authToken.match(/^Bearer (.*)$/);\n    if (!match || match.length  {\n    const tokenString = this.getToken(authToken);\n    try {\n      const decodedToken: admin.auth.DecodedIdToken = await admin.auth().verifyIdToken(tokenString);\n      this.logger.info(`${JSON.stringify(decodedToken)}`);\n      console.log(decodedToken);\n      const  {\n        email,\n        uid,\n        role\n      } = decodedToken;\n      return { email, uid, role};\n    } catch (err) {\n      this.logger.error(`error while authenticate request ${err.message}`)\n      throw new UnauthorizedException(err.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCatByIdParam.html":{"url":"classes/GetCatByIdParam.html","title":"class - GetCatByIdParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCatByIdParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/domain/cat.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '', required: true})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in typescript-nestjs/src/app/domain/cat.dto.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayMinSize, IsArray, IsInt, IsOptional, IsString, IsUUID, ValidateNested } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type as ValidateType } from 'class-transformer';\n\n\nexport class Address {\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly city: string;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly state: number; \n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class CreateCatDto {\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly name: string;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsInt()\n  readonly age: number;\n\n  @ApiProperty({description:\"\", required: true})\n  @IsString()\n  readonly breed: string;\n\n  @ApiProperty({description:\"address\", required: true, type: [Address]})\n  @IsOptional()\n  @IsArray()\n  @ArrayMinSize(1)\n  @ValidateNested()\n  @ValidateType(() => Address)\n  public address?: Address [];\n}\n\n\n// tslint:disable-next-line:max-classes-per-file\nexport class GetCatByIdParam {\n  @ApiProperty({description:\"\", required: true})\n  @IsUUID()\n  readonly id!: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('health')@Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/controllers/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService, TypeOrmHealthIndicator } from '@nestjs/terminus';\n\n@Controller('/api/v1/health')\nexport class HealthController {\n  private readonly logger = new Logger(HealthController.name);\n\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) { }\n\n  @ApiTags('health')\n  @Get()\n  @HealthCheck()\n  public check() {\n    this.logger.log('Health Check');\n    return this.health.check([\n      async () => this.db.pingCheck('typeorm'),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController-1.html":{"url":"controllers/HealthController-1.html","title":"controller - HealthController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('health')@Get('/')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/controllers/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService, TypeOrmHealthIndicator } from '@nestjs/terminus';\n\n@Controller('/api/v1/health')\nexport class HealthController {\n  private readonly logger = new Logger(HealthController.name);\n\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) { }\n\n  @ApiTags('health')\n  @Get('/')\n  @HealthCheck()\n  public check() {\n    return this.health.check([\n      async () => this.db.pingCheck('typeorm'),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController-2.html":{"url":"controllers/HealthController-2.html","title":"controller - HealthController-2","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('health')@Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/controllers/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService, TypeOrmHealthIndicator } from '@nestjs/terminus';\n\n@Controller('/api/v1/health')\nexport class HealthController {\n  private readonly logger = new Logger(HealthController.name);\n\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) { }\n\n  @ApiTags('health')\n  @Get()\n  @HealthCheck()\n  public check() {\n    this.logger.log('Health Check');\n    return this.health.check([\n      async () => this.db.pingCheck('typeorm'),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController-3.html":{"url":"controllers/HealthController-3.html","title":"controller - HealthController-3","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('health')@Get('/')@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/controllers/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService, TypeOrmHealthIndicator } from '@nestjs/terminus';\n\n@Controller('/api/v1/health')\nexport class HealthController {\n  private readonly logger = new Logger(HealthController.name);\n\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) { }\n\n  @ApiTags('health')\n  @Get('/')\n  @HealthCheck()\n  public check() {\n    return this.health.check([\n      async () => this.db.pingCheck('typeorm'),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController-4.html":{"url":"controllers/HealthController-4.html","title":"controller - HealthController-4","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/controllers/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/health\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        check\n                        \n                    \n                \n            \n            \n                \n                    \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('health')@Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/controllers/app.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Logger } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheck, HealthCheckService, TypeOrmHealthIndicator } from '@nestjs/terminus';\n\n@Controller('/api/v1/health')\nexport class HealthController {\n  private readonly logger = new Logger(HealthController.name);\n\n  constructor(\n    private health: HealthCheckService,\n    private db: TypeOrmHealthIndicator,\n  ) { }\n\n  @ApiTags('health')\n  @Get()\n  @HealthCheck()\n  public check() {\n    this.logger.log('Health Check');\n    return this.health.check([\n      async () => this.db.pingCheck('typeorm'),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/http-exception.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsHost, Catch, ExceptionFilter, HttpException} from '@nestjs/common'\nimport {Request, Response} from 'express';\n@Catch(HttpException)\n\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter-1.html":{"url":"classes/HttpExceptionFilter-1.html","title":"class - HttpExceptionFilter-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/http-exception.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsHost, Catch, ExceptionFilter, HttpException} from '@nestjs/common'\nimport {Request, Response} from 'express';\n@Catch(HttpException)\n\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter-2.html":{"url":"classes/HttpExceptionFilter-2.html","title":"class - HttpExceptionFilter-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/http-exception.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsHost, Catch, ExceptionFilter, HttpException} from '@nestjs/common'\nimport {Request, Response} from 'express';\n@Catch(HttpException)\n\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter-3.html":{"url":"classes/HttpExceptionFilter-3.html","title":"class - HttpExceptionFilter-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/http-exception.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsHost, Catch, ExceptionFilter, HttpException} from '@nestjs/common'\nimport {Request, Response} from 'express';\n@Catch(HttpException)\n\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response\n      .status(status)\n      .json({\n        statusCode: status,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter-4.html":{"url":"classes/HttpExceptionFilter-4.html","title":"class - HttpExceptionFilter-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/common/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in typescript-nestjs/src/app/common/exception.filter.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const statusCode = exception.getStatus();\n\n    response.status(statusCode).json({\n      statusCode,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter-5.html":{"url":"classes/HttpExceptionFilter-5.html","title":"class - HttpExceptionFilter-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/core/filter/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/core/filter/exception.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common';\n\n@Catch()\nexport class HttpExceptionFilter implements ExceptionFilter {\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const errorResponse = {\n      code: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message:\n        status !== HttpStatus.INTERNAL_SERVER_ERROR\n          ? exception['message']['error'] || exception['message'] || null\n          : 'Internal server error',\n    };\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDatabaseConfig.html":{"url":"interfaces/IDatabaseConfig.html","title":"interface - IDatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/core/database/interfaces/dbConfig.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            development\n                                        \n                                \n                                \n                                        \n                                            production\n                                        \n                                \n                                \n                                        \n                                            test\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        development\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        development:         IDatabaseConfigAttributes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDatabaseConfigAttributes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        production:         IDatabaseConfigAttributes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDatabaseConfigAttributes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        test\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        test:         IDatabaseConfigAttributes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDatabaseConfigAttributes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDatabaseConfigAttributes {\n    username?: string;\n    password?: string;\n    database?: string;\n    host?: string;\n    port?: number | string;\n    dialect?: string;\n    urlDatabase?: string;\n}\n\nexport interface IDatabaseConfig {\n    development: IDatabaseConfigAttributes;\n    test: IDatabaseConfigAttributes;\n    production: IDatabaseConfigAttributes;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDatabaseConfigAttributes.html":{"url":"interfaces/IDatabaseConfigAttributes.html","title":"interface - IDatabaseConfigAttributes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDatabaseConfigAttributes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/core/database/interfaces/dbConfig.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            database\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dialect\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            host\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            password\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            port\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            urlDatabase\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        database:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dialect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dialect:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:     number | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        urlDatabase\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        urlDatabase:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDatabaseConfigAttributes {\n    username?: string;\n    password?: string;\n    database?: string;\n    host?: string;\n    port?: number | string;\n    dialect?: string;\n    urlDatabase?: string;\n}\n\nexport interface IDatabaseConfig {\n    development: IDatabaseConfigAttributes;\n    test: IDatabaseConfigAttributes;\n    production: IDatabaseConfigAttributes;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IMutation.html":{"url":"classes/IMutation.html","title":"class - IMutation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IMutation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/graphql.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                login\n                            \n                            \n                                    Abstract\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/graphql.schema.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AuthPayload | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(input: Signup)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/graphql.schema.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                Signup\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SignupResponse | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Signup {\n    username: string;\n    email: string;\n    password: string;\n}\n\nexport class SignupResponse {\n    username: string;\n    email: string;\n}\n\nexport class AuthPayload {\n    email: string;\n}\n\nexport abstract class IMutation {\n    abstract signup(input: Signup): SignupResponse | Promise;\n\n    abstract login(username: string, password: string): AuthPayload | Promise;\n}\n\nexport class User {\n    userId: string;\n    username?: string;\n    email: string;\n    password: string;\n}\n\nexport abstract class IQuery {\n    abstract me(): string | Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPagination.html":{"url":"interfaces/IPagination.html","title":"interface - IPagination","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/services/post.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CACHE_MANAGER, HttpException, HttpStatus, Inject, Injectable, Logger } from '@nestjs/common';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { SearchService } from '../../search/search.service';\nimport { CreatePostDto, SearchElasticDto, SearchPostDto } from '../dto/post.dto';\nimport Post from '../entities/post';\nexport interface IPagination {\n  page: number;\n  limit: number;\n}\n\n@Injectable()\nexport default class PostService {\n  private readonly logger = new Logger(PostService.name);\n\n  constructor(\n    @InjectRepository(Post) private postRepo: Repository,\n    private readonly searchService: SearchService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    private eventEmitter: EventEmitter2,\n  ) { }\n  public async getByEmail(title: string) {\n    this.logger.log('getting post by title');\n    const post = await this.postRepo.findOne({ title });\n    if (!post) {\n      throw new HttpException('Post with this title does not exist', HttpStatus.NOT_FOUND);\n    }\n    return post;\n  }\n  public async getById(id: string) {\n    const post = await this.postRepo.findOne(id);\n    if (!post) {\n      throw new HttpException('Post with this id does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    return post;\n  }\n  public async getByTitle(title: string) {\n    return await this.postRepo.findOne({ where: { title } });\n  }\n  public async create(postDto: CreatePostDto) {\n    const post = await this.getByTitle(postDto.title);\n    if (post) {\n      throw new HttpException('Post with this title already exist', HttpStatus.CONFLICT);\n    }\n    const newPost = await this.postRepo.create(postDto);\n    const postData = await this.postRepo.save(newPost);\n    await this.searchService.indexPost(postData);\n    this.eventEmitter.emit('user.created', {});\n    return postData;\n  }\n  public extractTags(searchParam: SearchPostDto) {\n    const tags = [];\n    if (searchParam.tags) {\n      if (Array.isArray(searchParam.tags)) {\n        for (const tag of searchParam.tags) {\n          tags.push(tag);\n        }\n      } else {\n        tags.push(searchParam.tags);\n      }\n    }\n    return tags;\n  }\n  @OnEvent('user.created')\n  handleOrderCreatedEvent(payload: any) {\n    // handle and process \"OrderCreatedEvent\" event\n  }\n  // tslint:disable-next-line:cognitive-complexity\n  // tslint:disable-next-line:mccabe-complexity\n  // tslint:disable-next-line:cyclomatic-complexity\n  private async searchPosts(params: SearchPostDto): Promise {\n    const pagination: IPagination = {\n      page: Number(params.page || 1),\n      limit: Number(params.limit || 15),\n    };\n    const skippedItems = (pagination.page - 1) * pagination.limit;\n    const tagExtract = this.extractTags(params);\n    const { search_term, tags, startId } = params;\n    let query = `\n    select\n    count(*) OVER() as count,\n    tags,\n    id, title, email from post,\n    jsonb_to_recordset(post.tags) as tagItem(tag text)\n    `;\n    if (\n      search_term ||\n      this.extractTags.length > 0\n    ) {\n      query = `${query} where id is not NULL`;\n    }\n    if (search_term) {\n      const queryString = `(\n        title ILIKE '%${search_term}%' OR\n        url ILIKE '%${search_term}%' OR\n        text ILIKE '%${search_term}%' OR\n        email ILIKE '%${search_term}%')`;\n      query = `${query} AND (${queryString})`;\n    }\n    if (tagExtract && tagExtract.length > 0) {\n      let queryString = '';\n      for (const tag of tagExtract) {\n        if (!queryString) {\n          queryString = `${queryString} tagItem.tag ILIKE '%${tag}%'`;\n        } else {\n          queryString = `${queryString} OR tagItem.tag ILIKE '%${tag}%'`;\n        }\n      }\n      query = `${query} AND (${queryString})`;\n    }\n    const queryBuilder = `${query} GROUP BY id ORDER BY title ASC LIMIT ${pagination.limit} OFFSET ${skippedItems}`;\n    const posts = await this.postRepo.query(queryBuilder);\n    const count = parseInt(posts[0] && posts[0].count || 0, 10);\n    return {\n      posts,\n      totalCount: count,\n    };\n  }\n  public async searchElastic(param: SearchElasticDto) {\n    return this.searchService.search(param.search_term);\n  }\n  public async deletePost(id: any) {\n    const post = await this.getById(id);\n    await this.postRepo.delete(id);\n    await this.searchService.remove(id);\n    return null;\n  }\n  public async search(params: SearchPostDto) {\n    try {\n      const { page, limit } = params;\n      const pagination = {\n        page: page || 1,\n        limit: limit || 10,\n      };\n      const { totalCount, posts } = await this.searchPosts(params);\n      return {\n        totalCount,\n        page: pagination.page,\n        limit: pagination.limit,\n        data: posts.length > 0 ? posts : [],\n      };\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPagination-1.html":{"url":"interfaces/IPagination-1.html","title":"interface - IPagination-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/domain/services/post.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto, SearchPostDto } from '../dto/post.dto';\nimport Post from '../entities/post';\nexport interface IPagination {\n  page: number;\n  limit: number;\n}\n\n@Injectable()\nexport default class PostService {\n  private readonly logger = new Logger(PostService.name);\n\n    constructor(@InjectRepository(Post) private postRepo: Repository) {}\n    public async getByEmail(title: string) {\n      this.logger.log('getting post by title');\n      const post = await this.postRepo.findOne({title});\n      if (!post) {\n      throw new HttpException('Post with this title does not exist', HttpStatus.NOT_FOUND);\n     }\n      return post;\n    }\n    public async getById(id: string) {\n      const post = await this.postRepo.findOne(id);\n      if (!post) {\n       throw new HttpException('Post with this id does not exist', HttpStatus.NOT_FOUND);\n      }\n      return post;\n     }\n     public async getByTitle(title: string) {\n      return await this.postRepo.findOne({ where: { title}});\n     }\n    public async create(postDto: CreatePostDto) {\n      const post = await this.getByTitle(postDto.title);\n      if (post) {\n        throw new HttpException('Post with this title already exist', HttpStatus.CONFLICT);\n      }\n      const newUser = await this.postRepo.create(postDto);\n      await this.postRepo.save(newUser);\n      return newUser;\n    }\n    public extractTags(searchParam: SearchPostDto) {\n      const tags = [];\n      if (searchParam.tags) {\n        if (Array.isArray(searchParam.tags)) {\n          for (const tag of searchParam.tags) {\n            tags.push(tag);\n          }\n        } else {\n          tags.push(searchParam.tags);\n        }\n      }\n      return tags;\n    }\n   // tslint:disable-next-line:cognitive-complexity\n   // tslint:disable-next-line:mccabe-complexity\n    // tslint:disable-next-line:cyclomatic-complexity\n   private async searchPosts(params: SearchPostDto): Promise {\n    const pagination: IPagination = {\n      page: Number(params.page || 1),\n      limit: Number(params.limit || 15),\n    };\n    const skippedItems = (pagination.page - 1) * pagination.limit;\n    const tagExtract = this.extractTags(params);\n    const {search_term , tags, startId} = params;\n    let query = `\n    select\n    count(*) OVER() as count,\n    tags,\n    id, title, email from post,\n    jsonb_to_recordset(post.tags) as tagItem(tag text)\n    `;\n    if (\n      search_term ||\n      this.extractTags.length > 0\n    ) {\n      query = `${query} where id is not NULL`;\n    }\n    if (search_term) {\n      const queryString = `(\n        title ILIKE '%${search_term}%' OR\n        url ILIKE '%${search_term}%' OR\n        text ILIKE '%${search_term}%' OR\n        email ILIKE '%${search_term}%')`;\n      query = `${query} AND (${queryString})`;\n    }\n    if (tagExtract && tagExtract.length > 0 ) {\n    let queryString = '';\n    for (const tag of tagExtract) {\n       if (! queryString) {\n        queryString = `${queryString} tagItem.tag ILIKE '%${tag}%'`;\n       } else {\n        queryString = `${queryString} OR tagItem.tag ILIKE '%${tag}%'`;\n       }\n    }\n    query = `${query} AND (${queryString})`;\n    }\n    const queryBuilder = `${query} GROUP BY id ORDER BY title ASC LIMIT ${pagination.limit} OFFSET ${skippedItems}`;\n    const posts = await this.postRepo.query(queryBuilder);\n    const count = parseInt(posts[0] && posts[0].count || 0, 10);\n    return {\n      posts,\n      totalCount: count,\n    };\n   }\n    public async search(params: SearchPostDto) {\n      try {\n         const {page, limit} = params;\n         const pagination = {\n           page: page || 1,\n           limit: limit || 10,\n         };\n         const {totalCount, posts} = await this.searchPosts(params);\n         return {\n           totalCount,\n           page: pagination.page,\n           limit: pagination.limit,\n           data: posts.length > 0 ? posts : [],\n         };\n      } catch (err) {\n         throw err;\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPagination-2.html":{"url":"interfaces/IPagination-2.html","title":"interface - IPagination-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/domain/services/post.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto, SearchPostDto } from '../dto/post.dto';\nimport Post from '../entities/post';\nexport interface IPagination {\n  page: number;\n  limit: number;\n}\n\n@Injectable()\nexport default class PostService {\n  private readonly logger = new Logger(PostService.name);\n\n    constructor(@InjectRepository(Post) private postRepo: Repository) {}\n    public async getByEmail(title: string) {\n      this.logger.log('getting post by title');\n      const post = await this.postRepo.findOne({title});\n      if (!post) {\n      throw new HttpException('Post with this title does not exist', HttpStatus.NOT_FOUND);\n     }\n      return post;\n    }\n    public async getById(id: string) {\n      const post = await this.postRepo.findOne(id);\n      if (!post) {\n       throw new HttpException('Post with this id does not exist', HttpStatus.NOT_FOUND);\n      }\n      return post;\n     }\n     public async getByTitle(title: string) {\n      return await this.postRepo.findOne({ where: { title}});\n     }\n    public async create(postDto: CreatePostDto) {\n      const post = await this.getByTitle(postDto.title);\n      if (post) {\n        throw new HttpException('Post with this title already exist', HttpStatus.CONFLICT);\n      }\n      const newUser = await this.postRepo.create(postDto);\n      await this.postRepo.save(newUser);\n      return newUser;\n    }\n    public extractTags(searchParam: SearchPostDto) {\n      const tags = [];\n      if (searchParam.tags) {\n        if (Array.isArray(searchParam.tags)) {\n          for (const tag of searchParam.tags) {\n            tags.push(tag);\n          }\n        } else {\n          tags.push(searchParam.tags);\n        }\n      }\n      return tags;\n    }\n   // tslint:disable-next-line:cognitive-complexity\n   // tslint:disable-next-line:mccabe-complexity\n    // tslint:disable-next-line:cyclomatic-complexity\n   private async searchPosts(params: SearchPostDto): Promise {\n    const pagination: IPagination = {\n      page: Number(params.page || 1),\n      limit: Number(params.limit || 15),\n    };\n    const skippedItems = (pagination.page - 1) * pagination.limit;\n    const tagExtract = this.extractTags(params);\n    const {search_term , tags, startId} = params;\n    let query = `\n    select\n    count(*) OVER() as count,\n    tags,\n    id, title, email from post,\n    jsonb_to_recordset(post.tags) as tagItem(tag text)\n    `;\n    if (\n      search_term ||\n      this.extractTags.length > 0\n    ) {\n      query = `${query} where id is not NULL`;\n    }\n    if (search_term) {\n      const queryString = `(\n        title ILIKE '%${search_term}%' OR\n        url ILIKE '%${search_term}%' OR\n        text ILIKE '%${search_term}%' OR\n        email ILIKE '%${search_term}%')`;\n      query = `${query} AND (${queryString})`;\n    }\n    if (tagExtract && tagExtract.length > 0 ) {\n    let queryString = '';\n    for (const tag of tagExtract) {\n       if (! queryString) {\n        queryString = `${queryString} tagItem.tag ILIKE '%${tag}%'`;\n       } else {\n        queryString = `${queryString} OR tagItem.tag ILIKE '%${tag}%'`;\n       }\n    }\n    query = `${query} AND (${queryString})`;\n    }\n    const queryBuilder = `${query} GROUP BY id ORDER BY title ASC LIMIT ${pagination.limit} OFFSET ${skippedItems}`;\n    const posts = await this.postRepo.query(queryBuilder);\n    const count = parseInt(posts[0] && posts[0].count || 0, 10);\n    return {\n      posts,\n      totalCount: count,\n    };\n   }\n    public async search(params: SearchPostDto) {\n      try {\n         const {page, limit} = params;\n         const pagination = {\n           page: page || 1,\n           limit: limit || 10,\n         };\n         const {totalCount, posts} = await this.searchPosts(params);\n         return {\n           totalCount,\n           page: pagination.page,\n           limit: pagination.limit,\n           data: posts.length > 0 ? posts : [],\n         };\n      } catch (err) {\n         throw err;\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IQuery.html":{"url":"classes/IQuery.html","title":"class - IQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/graphql.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                me\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        me\n                        \n                    \n                \n            \n            \n                \n                    \n                    me()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/graphql.schema.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     string | Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Signup {\n    username: string;\n    email: string;\n    password: string;\n}\n\nexport class SignupResponse {\n    username: string;\n    email: string;\n}\n\nexport class AuthPayload {\n    email: string;\n}\n\nexport abstract class IMutation {\n    abstract signup(input: Signup): SignupResponse | Promise;\n\n    abstract login(username: string, password: string): AuthPayload | Promise;\n}\n\nexport class User {\n    userId: string;\n    username?: string;\n    email: string;\n    password: string;\n}\n\nexport abstract class IQuery {\n    abstract me(): string | Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-sequelize-apis/src/modules/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly userService: UsersService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: process.env.JWTKEY,\n        });\n    }\n\n    async validate(payload: any) {\n        // check if user in the token actually exist\n        const user = await this.userService.findOneById(payload.id);\n        if (!user) {\n            throw new UnauthorizedException('You are not authorized to perform the operation');\n        }\n        return payload;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/auth/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-sequelize-apis/src/modules/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthService) {\n        super();\n    }\n\n    async validate(username: string, password: string): Promise {\n        const user = await this.authService.validateUser(username, password);\n        if (!user) {\n            throw new UnauthorizedException('Invalid user credentials');\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Logger.html":{"url":"injectables/Logger.html","title":"injectable - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/logger/logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Provides a means to write log messages.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                http\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                silly\n                            \n                            \n                                    Public\n                                verbose\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-authentication-authz/src/logger/logger.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:102\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Debug log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:62\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Error log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        http\n                        \n                    \n                \n            \n            \n                \n                    \n                    http(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:86\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.HTTP log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        info\n                        \n                    \n                \n            \n            \n                \n                    \n                    info(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:78\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Info log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(level: LogLevel, message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:46\n                \n            \n\n\n            \n                \n                    Writes a log message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the severity of the message\n\n                                    \n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:51\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Info log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(p0: LogLevel | string, p1?: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p0\n                                    \n                                            LogLevel | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p1\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        silly\n                        \n                    \n                \n            \n            \n                \n                    \n                    silly(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:110\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Silly log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:94\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Verbose log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.ts:70\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Warn log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logger\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-authentication-authz/src/logger/logger.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LoggerService } from '@nestjs/common';\nimport * as moment from 'moment';\nimport { MESSAGE } from 'triple-beam';\nimport * as winston from 'winston';\n\nimport { ConfigService } from '../config/config.service';\nimport { isLogLevel, LogLevel } from './loglevel';\n\nconst formatter = winston.format((info) => {\n  if (info.level === LogLevel.HTTP) {\n    // HTTP messages are already formatted by the middleware, so just pass through\n    return info;\n  }\n  info.message = `[${moment().format('ddd MMM DD HH:mm:ss YYYY')}] [${info.level}] ${info.message}`;\n  return info;\n});\n\nconst passthrough = winston.format((info) => {\n  info[MESSAGE] = info.message;\n  return info;\n});\n\n/**\n * Provides a means to write log messages.\n */\n@Injectable()\nexport class Logger implements LoggerService {\n  private logger: winston.Logger;\n\n  constructor(private configService: ConfigService) {\n    this.logger = winston.createLogger({\n      level: configService.get().logLevel,\n      format: formatter(),\n    });\n    this.logger.add(new winston.transports.Console({\n      format: passthrough(),\n      stderrLevels: [LogLevel.Error, LogLevel.Warn],\n    }));\n  }\n\n  /**\n   * Writes a log message.\n   * @param level the severity of the message\n   * @param message the log message\n   */\n  public log(level: LogLevel, message: string): void;\n  /**\n   * Writes a log message with the {@link LogLevel.Info} log level.\n   * @param message the log message\n   */\n  public log(message: string): void;\n  public log(p0: LogLevel | string, p1?: string) {\n    const logLevel = isLogLevel(p0) ? p0 : LogLevel.Info;\n    const message = (isLogLevel(p0) && p1) ? p1 : p0;\n    this.logger.log(logLevel, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Error} log level.\n   * @param message the log message\n   */\n  public error(message: string) {\n    this.log(LogLevel.Error, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Warn} log level.\n   * @param message the log message\n   */\n  public warn(message: string) {\n    this.log(LogLevel.Warn, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Info} log level.\n   * @param message the log message\n   */\n  public info(message: string) {\n    this.log(LogLevel.Info, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.HTTP} log level.\n   * @param message the log message\n   */\n  public http(message: string) {\n    this.log(LogLevel.HTTP, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Verbose} log level.\n   * @param message the log message\n   */\n  public verbose(message: string) {\n    this.log(LogLevel.Verbose, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Debug} log level.\n   * @param message the log message\n   */\n  public debug(message: string) {\n    this.log(LogLevel.Debug, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Silly} log level.\n   * @param message the log message\n   */\n  public silly(message: string) {\n    this.log(LogLevel.Silly, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Logger-1.html":{"url":"injectables/Logger-1.html","title":"injectable - Logger-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/logger/logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Provides a means to write log messages.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                http\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                silly\n                            \n                            \n                                    Public\n                                verbose\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:102\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Debug log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:62\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Error log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        http\n                        \n                    \n                \n            \n            \n                \n                    \n                    http(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:86\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.HTTP log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        info\n                        \n                    \n                \n            \n            \n                \n                    \n                    info(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:78\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Info log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(level: LogLevel, message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:46\n                \n            \n\n\n            \n                \n                    Writes a log message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the severity of the message\n\n                                    \n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:51\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Info log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(p0: LogLevel | string, p1?: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p0\n                                    \n                                            LogLevel | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p1\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        silly\n                        \n                    \n                \n            \n            \n                \n                    \n                    silly(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:110\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Silly log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:94\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Verbose log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:70\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Warn log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logger\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-firebase-auth-authz/src/logger/logger.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LoggerService } from '@nestjs/common';\nimport * as moment from 'moment';\nimport { MESSAGE } from 'triple-beam';\nimport * as winston from 'winston';\n\nimport { ConfigService } from '../config/config.service';\nimport { isLogLevel, LogLevel } from './loglevel';\n\nconst formatter = winston.format((info) => {\n  if (info.level === LogLevel.HTTP) {\n    // HTTP messages are already formatted by the middleware, so just pass through\n    return info;\n  }\n  info.message = `[${moment().format('ddd MMM DD HH:mm:ss YYYY')}] [${info.level}] ${info.message}`;\n  return info;\n});\n\nconst passthrough = winston.format((info) => {\n  info[MESSAGE] = info.message;\n  return info;\n});\n\n/**\n * Provides a means to write log messages.\n */\n@Injectable()\nexport class Logger implements LoggerService {\n  private logger: winston.Logger;\n\n  constructor(private configService: ConfigService) {\n    this.logger = winston.createLogger({\n      level: configService.get().logLevel,\n      format: formatter(),\n    });\n    this.logger.add(new winston.transports.Console({\n      format: passthrough(),\n      stderrLevels: [LogLevel.Error, LogLevel.Warn],\n    }));\n  }\n\n  /**\n   * Writes a log message.\n   * @param level the severity of the message\n   * @param message the log message\n   */\n  public log(level: LogLevel, message: string): void;\n  /**\n   * Writes a log message with the {@link LogLevel.Info} log level.\n   * @param message the log message\n   */\n  public log(message: string): void;\n  public log(p0: LogLevel | string, p1?: string) {\n    const logLevel = isLogLevel(p0) ? p0 : LogLevel.Info;\n    const message = (isLogLevel(p0) && p1) ? p1 : p0;\n    this.logger.log(logLevel, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Error} log level.\n   * @param message the log message\n   */\n  public error(message: string) {\n    this.log(LogLevel.Error, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Warn} log level.\n   * @param message the log message\n   */\n  public warn(message: string) {\n    this.log(LogLevel.Warn, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Info} log level.\n   * @param message the log message\n   */\n  public info(message: string) {\n    this.log(LogLevel.Info, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.HTTP} log level.\n   * @param message the log message\n   */\n  public http(message: string) {\n    this.log(LogLevel.HTTP, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Verbose} log level.\n   * @param message the log message\n   */\n  public verbose(message: string) {\n    this.log(LogLevel.Verbose, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Debug} log level.\n   * @param message the log message\n   */\n  public debug(message: string) {\n    this.log(LogLevel.Debug, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Silly} log level.\n   * @param message the log message\n   */\n  public silly(message: string) {\n    this.log(LogLevel.Silly, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Logger-2.html":{"url":"injectables/Logger-2.html","title":"injectable - Logger-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/logger/logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Provides a means to write log messages.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                http\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                log\n                            \n                            \n                                    Public\n                                silly\n                            \n                            \n                                    Public\n                                verbose\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/logger/logger.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        debug\n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:102\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Debug log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        error\n                        \n                    \n                \n            \n            \n                \n                    \n                    error(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:62\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Error log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        http\n                        \n                    \n                \n            \n            \n                \n                    \n                    http(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:86\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.HTTP log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        info\n                        \n                    \n                \n            \n            \n                \n                    \n                    info(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:78\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Info log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(level: LogLevel, message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:46\n                \n            \n\n\n            \n                \n                    Writes a log message.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the severity of the message\n\n                                    \n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:51\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Info log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        log\n                        \n                    \n                \n            \n            \n                \n                    \n                    log(p0: LogLevel | string, p1?: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p0\n                                    \n                                            LogLevel | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    p1\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        silly\n                        \n                    \n                \n            \n            \n                \n                    \n                    silly(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:110\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Silly log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        verbose\n                        \n                    \n                \n            \n            \n                \n                    \n                    verbose(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:94\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Verbose log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.ts:70\n                \n            \n\n\n            \n                \n                    Writes a log message with the LogLevel.Warn log level.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the log message\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logger\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-with-mongoose/src/logger/logger.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LoggerService } from '@nestjs/common';\nimport * as moment from 'moment';\nimport { MESSAGE } from 'triple-beam';\nimport * as winston from 'winston';\n\nimport { ConfigService } from '../config/config.service';\nimport { isLogLevel, LogLevel } from './loglevel';\n\nconst formatter = winston.format((info) => {\n  if (info.level === LogLevel.HTTP) {\n    // HTTP messages are already formatted by the middleware, so just pass through\n    return info;\n  }\n  info.message = `[${moment().format('ddd MMM DD HH:mm:ss YYYY')}] [${info.level}] ${info.message}`;\n  return info;\n});\n\nconst passthrough = winston.format((info) => {\n  info[MESSAGE] = info.message;\n  return info;\n});\n\n/**\n * Provides a means to write log messages.\n */\n@Injectable()\nexport class Logger implements LoggerService {\n  private logger: winston.Logger;\n\n  constructor(private configService: ConfigService) {\n    this.logger = winston.createLogger({\n      level: configService.get().logLevel,\n      format: formatter(),\n    });\n    this.logger.add(new winston.transports.Console({\n      format: passthrough(),\n      stderrLevels: [LogLevel.Error, LogLevel.Warn],\n    }));\n  }\n\n  /**\n   * Writes a log message.\n   * @param level the severity of the message\n   * @param message the log message\n   */\n  public log(level: LogLevel, message: string): void;\n  /**\n   * Writes a log message with the {@link LogLevel.Info} log level.\n   * @param message the log message\n   */\n  public log(message: string): void;\n  public log(p0: LogLevel | string, p1?: string) {\n    const logLevel = isLogLevel(p0) ? p0 : LogLevel.Info;\n    const message = (isLogLevel(p0) && p1) ? p1 : p0;\n    this.logger.log(logLevel, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Error} log level.\n   * @param message the log message\n   */\n  public error(message: string) {\n    this.log(LogLevel.Error, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Warn} log level.\n   * @param message the log message\n   */\n  public warn(message: string) {\n    this.log(LogLevel.Warn, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Info} log level.\n   * @param message the log message\n   */\n  public info(message: string) {\n    this.log(LogLevel.Info, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.HTTP} log level.\n   * @param message the log message\n   */\n  public http(message: string) {\n    this.log(LogLevel.HTTP, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Verbose} log level.\n   * @param message the log message\n   */\n  public verbose(message: string) {\n    this.log(LogLevel.Verbose, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Debug} log level.\n   * @param message the log message\n   */\n  public debug(message: string) {\n    this.log(LogLevel.Debug, message);\n  }\n\n  /**\n   * Writes a log message with the {@link LogLevel.Silly} log level.\n   * @param message the log message\n   */\n  public silly(message: string) {\n    this.log(LogLevel.Silly, message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerInterceptor.html":{"url":"injectables/LoggerInterceptor.html","title":"injectable - LoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/logger.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/logger.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const userAgent = context.switchToHttp().getRequest().headers['user-agent'];\n\n    const now = Date.now();\n    return next.handle().pipe(\n      tap((data) => {\n        // you can capture user-agent string of user browser and save it to logger\n        // also can calculate the execution time.\n        console.log(`After... ${Date.now() - now}ms`, data, userAgent); // you can use any logger like winston\n      }),\n      catchError((err) => {\n        console.log('err caught in interceptor, you can log it in logger or send it to newrelic or similar', err);\n        throw err; // throwing it for client\n      }),\n    );\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerInterceptor-1.html":{"url":"injectables/LoggerInterceptor-1.html","title":"injectable - LoggerInterceptor-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/logger.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/logger.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const userAgent = context.switchToHttp().getRequest().headers['user-agent'];\n\n    const now = Date.now();\n    return next.handle().pipe(\n      tap((data) => {\n        // you can capture user-agent string of user browser and save it to logger\n        // also can calculate the execution time.\n        console.log(`After... ${Date.now() - now}ms`, data, userAgent); // you can use any logger like winston\n      }),\n      catchError((err) => {\n        console.log('err caught in interceptor, you can log it in logger or send it to newrelic or similar', err);\n        throw err; // throwing it for client\n      }),\n    );\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerInterceptor-2.html":{"url":"injectables/LoggerInterceptor-2.html","title":"injectable - LoggerInterceptor-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/logger.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/logger.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const userAgent = context.switchToHttp().getRequest().headers['user-agent'];\n\n    const now = Date.now();\n    return next.handle().pipe(\n      tap((data) => {\n        // you can capture user-agent string of user browser and save it to logger\n        // also can calculate the execution time.\n        console.log(`After... ${Date.now() - now}ms`, data, userAgent); // you can use any logger like winston\n      }),\n      catchError((err) => {\n        console.log('err caught in interceptor, you can log it in logger or send it to newrelic or similar', err);\n        throw err; // throwing it for client\n      }),\n    );\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerInterceptor-3.html":{"url":"injectables/LoggerInterceptor-3.html","title":"injectable - LoggerInterceptor-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/logger.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/logger.interceptor.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggerInterceptor implements NestInterceptor {\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const userAgent = context.switchToHttp().getRequest().headers['user-agent'];\n\n    const now = Date.now();\n    return next.handle().pipe(\n      tap((data) => {\n        // you can capture user-agent string of user browser and save it to logger\n        // also can calculate the execution time.\n        console.log(`After... ${Date.now() - now}ms`, data, userAgent); // you can use any logger like winston\n      }),\n      catchError((err) => {\n        console.log('err caught in interceptor, you can log it in logger or send it to newrelic or similar', err);\n        throw err; // throwing it for client\n      }),\n    );\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/logger/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateLogMessage\n                            \n                            \n                                    Private\n                                getResponseSize\n                            \n                            \n                                    Public\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in nestjs-authentication-authz/src/logger/logger.middleware.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateLogMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateLogMessage(req: Request, res: Response, timeTaken: number)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.middleware.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    timeTaken\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getResponseSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponseSize(res: Response)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.middleware.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as moment from 'moment';\n\nimport { Logger } from './logger';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  public constructor(private logger: Logger) {}\n\n  public use(req: Request, res: Response, next: () => void): any {\n    const before = Date.now();\n    next();\n    res.on('close', () => this.logger.http(this.generateLogMessage(req, res, Date.now() - before)));\n  }\n\n  /*\n    - COMBINED LOG FORMAT -\n    %h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\n\n    %h: ip\n    %l: client identd (leave as '-')\n    %u: HTTP auth userid (can leave as '-')\n    %t: time (e.g. '[10/Oct/2000:13:55:36 -0700]')\n    %r: request line (e.g. 'GET /apache_pb.gif HTTP/1.0')\n    %>s: HTTP status code \n    %b: response size in bytes (leave as '-' if 0)\n    %{Referer}i: \"Referer\" HTTP request header\n    %{User-agent}i: \"User-Agent\" HTTP request header\n  */\n\n  private getResponseSize(res: Response): number {\n    const sizeRaw = res.getHeader('Content-Length');\n    if (typeof sizeRaw === 'number') { return sizeRaw; }\n    if (typeof sizeRaw === 'string') {\n      const parsed = parseInt(sizeRaw, 10);\n      if (isNaN(parsed)) { return 0; }\n      return parsed;\n    }\n    return 0;\n  }\n\n  private generateLogMessage(req: Request, res: Response, timeTaken: number): string {\n    const size = this.getResponseSize(res);\n    const terms: { [key: string]: string } = {\n      '%h': req.socket.remoteAddress || '-',\n      '%l': '-',\n      '%u': '-', // todo: parse req.headers.authorization?\n      '%t': `[${moment().format('DD/MMM/YYYY:HH:mm:ss ZZ')}]`,\n      '%r': `${req.method} ${req.originalUrl} ${req.httpVersion}`,\n      '%>s': `${res.statusCode}`,\n      '%b': size === 0 ? '-' : `${size}`,\n    };\n    let str = '%h %l %u %t \\\"%r\\\" %>s %b %{Referer}i %{User-agent}i';\n    for (const term in terms) {\n      if (term in terms) {\n        str = str.replace(term, terms[term]);\n      }\n    }\n    str = str.replace(/%\\{([a-zA-Z\\-]+)\\}i/g, (match, p1) => {\n      const header = req.headers[`${p1}`.toLowerCase()];\n      if (header == null) { return '-'; }\n      if (Array.isArray(header)) { return `\"${header.join(',')}\"`; }\n      return `\"${header}\"`;\n    });\n    return str;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware-1.html":{"url":"injectables/LoggerMiddleware-1.html","title":"injectable - LoggerMiddleware-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/logger/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateLogMessage\n                            \n                            \n                                    Private\n                                getResponseSize\n                            \n                            \n                                    Public\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in nestjs-firebase-auth-authz/src/logger/logger.middleware.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateLogMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateLogMessage(req: Request, res: Response, timeTaken: number)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.middleware.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    timeTaken\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getResponseSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponseSize(res: Response)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.middleware.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/logger/logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as moment from 'moment';\n\nimport { Logger } from './logger';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  public constructor(private logger: Logger) {}\n\n  public use(req: Request, res: Response, next: () => void): any {\n    const before = Date.now();\n    next();\n    res.on('close', () => this.logger.http(this.generateLogMessage(req, res, Date.now() - before)));\n  }\n\n  /*\n    - COMBINED LOG FORMAT -\n    %h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\n\n    %h: ip\n    %l: client identd (leave as '-')\n    %u: HTTP auth userid (can leave as '-')\n    %t: time (e.g. '[10/Oct/2000:13:55:36 -0700]')\n    %r: request line (e.g. 'GET /apache_pb.gif HTTP/1.0')\n    %>s: HTTP status code \n    %b: response size in bytes (leave as '-' if 0)\n    %{Referer}i: \"Referer\" HTTP request header\n    %{User-agent}i: \"User-Agent\" HTTP request header\n  */\n\n  private getResponseSize(res: Response): number {\n    const sizeRaw = res.getHeader('Content-Length');\n    if (typeof sizeRaw === 'number') { return sizeRaw; }\n    if (typeof sizeRaw === 'string') {\n      const parsed = parseInt(sizeRaw, 10);\n      if (isNaN(parsed)) { return 0; }\n      return parsed;\n    }\n    return 0;\n  }\n\n  private generateLogMessage(req: Request, res: Response, timeTaken: number): string {\n    const size = this.getResponseSize(res);\n    const terms: { [key: string]: string } = {\n      '%h': req.socket.remoteAddress || '-',\n      '%l': '-',\n      '%u': '-', // todo: parse req.headers.authorization?\n      '%t': `[${moment().format('DD/MMM/YYYY:HH:mm:ss ZZ')}]`,\n      '%r': `${req.method} ${req.originalUrl} ${req.httpVersion}`,\n      '%>s': `${res.statusCode}`,\n      '%b': size === 0 ? '-' : `${size}`,\n    };\n    let str = '%h %l %u %t \\\"%r\\\" %>s %b %{Referer}i %{User-agent}i';\n    for (const term in terms) {\n      if (term in terms) {\n        str = str.replace(term, terms[term]);\n      }\n    }\n    str = str.replace(/%\\{([a-zA-Z\\-]+)\\}i/g, (match, p1) => {\n      const header = req.headers[`${p1}`.toLowerCase()];\n      if (header == null) { return '-'; }\n      if (Array.isArray(header)) { return `\"${header.join(',')}\"`; }\n      return `\"${header}\"`;\n    });\n    return str;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware-2.html":{"url":"injectables/LoggerMiddleware-2.html","title":"injectable - LoggerMiddleware-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/logger/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateLogMessage\n                            \n                            \n                                    Private\n                                getResponseSize\n                            \n                            \n                                    Public\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(logger: Logger)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/logger/logger.middleware.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateLogMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateLogMessage(req: Request, res: Response, timeTaken: number)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.middleware.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    timeTaken\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getResponseSize\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponseSize(res: Response)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.middleware.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/logger/logger.middleware.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as moment from 'moment';\n\nimport { Logger } from './logger';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  public constructor(private logger: Logger) {}\n\n  public use(req: Request, res: Response, next: () => void): any {\n    const before = Date.now();\n    next();\n    res.on('close', () => this.logger.http(this.generateLogMessage(req, res, Date.now() - before)));\n  }\n\n  /*\n    - COMBINED LOG FORMAT -\n    %h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\n\n    %h: ip\n    %l: client identd (leave as '-')\n    %u: HTTP auth userid (can leave as '-')\n    %t: time (e.g. '[10/Oct/2000:13:55:36 -0700]')\n    %r: request line (e.g. 'GET /apache_pb.gif HTTP/1.0')\n    %>s: HTTP status code \n    %b: response size in bytes (leave as '-' if 0)\n    %{Referer}i: \"Referer\" HTTP request header\n    %{User-agent}i: \"User-Agent\" HTTP request header\n  */\n\n  private getResponseSize(res: Response): number {\n    const sizeRaw = res.getHeader('Content-Length');\n    if (typeof sizeRaw === 'number') { return sizeRaw; }\n    if (typeof sizeRaw === 'string') {\n      const parsed = parseInt(sizeRaw, 10);\n      if (isNaN(parsed)) { return 0; }\n      return parsed;\n    }\n    return 0;\n  }\n\n  private generateLogMessage(req: Request, res: Response, timeTaken: number): string {\n    const size = this.getResponseSize(res);\n    const terms: { [key: string]: string } = {\n      '%h': req.socket.remoteAddress || '-',\n      '%l': '-',\n      '%u': '-', // todo: parse req.headers.authorization?\n      '%t': `[${moment().format('DD/MMM/YYYY:HH:mm:ss ZZ')}]`,\n      '%r': `${req.method} ${req.originalUrl} ${req.httpVersion}`,\n      '%>s': `${res.statusCode}`,\n      '%b': size === 0 ? '-' : `${size}`,\n    };\n    let str = '%h %l %u %t \\\"%r\\\" %>s %b %{Referer}i %{User-agent}i';\n    for (const term in terms) {\n      if (term in terms) {\n        str = str.replace(term, terms[term]);\n      }\n    }\n    str = str.replace(/%\\{([a-zA-Z\\-]+)\\}i/g, (match, p1) => {\n      const header = req.headers[`${p1}`.toLowerCase()];\n      if (header == null) { return '-'; }\n      if (Array.isArray(header)) { return `\"${header.join(',')}\"`; }\n      return `\"${header}\"`;\n    });\n    return str;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware-3.html":{"url":"injectables/LoggerMiddleware-3.html","title":"injectable - LoggerMiddleware-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/app/common/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: any, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in typescript-nestjs/src/app/common/logger.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () => void) {\n    console.log(`Request...`);\n    next();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_imports\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nConfigModule->LoggerModule\n\n\n\n\n\nLogger \n\nLogger \n\nLogger  -->\n\nLoggerModule->Logger \n\n\n\n\n\nLogger\n\nLogger\n\nLoggerModule -->\n\nLogger->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-authentication-authz/src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Logger\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Logger\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-authentication-authz/src/logger/logger.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\n\nimport { ConfigModule } from '../config/config.module';\nimport { Logger } from './logger';\nimport { LoggerMiddleware } from './logger.middleware';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [Logger],\n  exports: [Logger],\n})\nexport class LoggerModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware)\n      .forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-rabbitmq-microservice/microservice-client/src/message.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(text)\n                    \n                \n                        \n                            \n                                Defined in nestjs-rabbitmq-microservice/microservice-client/src/message.event.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-rabbitmq-microservice/microservice-client/src/message.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Message {\n    text: string;\n\n    constructor(text) {\n        this.text = text;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message-1.html":{"url":"classes/Message-1.html","title":"class - Message-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            simple-nestjs-microservice/microservice-client/src/message.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(text)\n                    \n                \n                        \n                            \n                                Defined in simple-nestjs-microservice/microservice-client/src/message.event.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        text\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in simple-nestjs-microservice/microservice-client/src/message.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Message {\n    text: string;\n\n    constructor(text) {\n        this.text = text;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/entities/post.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                social_links\n                            \n                            \n                                    Public\n                                tags\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        social_links\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/entities/post.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\n@Index(['email', 'title'])\n@Unique(['title'])\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  @IsNotEmpty()\n  public title!: string;\n\n  @Column({ type: 'varchar', length: 255})\n  public url!: string;\n\n  @Column({ type: 'varchar', length: 255})\n  public email!: string;\n\n  @Column({ type: 'jsonb', default: null })\n  public social_links!: object;\n\n  @Column({ type: 'jsonb', default: null })\n  public tags!: object;\n\n  @Column({ type: 'varchar', length: 255, default: null })\n  public text!: string;\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post-1.html":{"url":"entities/Post-1.html","title":"entity - Post-1","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/domain/entities/post.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                social_links\n                            \n                            \n                                    Public\n                                tags\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        social_links\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/entities/post.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\n@Index(['email', 'title'])\n@Unique(['title'])\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  @IsNotEmpty()\n  public title!: string;\n\n  @Column({ type: 'varchar', length: 255})\n  public url!: string;\n\n  @Column({ type: 'varchar', length: 255})\n  public email!: string;\n\n  @Column({ type: 'jsonb', default: null })\n  public social_links!: object;\n\n  @Column({ type: 'jsonb', default: null })\n  public tags!: object;\n\n  @Column({ type: 'varchar', length: 255, default: null })\n  public text!: string;\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post-2.html":{"url":"entities/Post-2.html","title":"entity - Post-2","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/entities/post.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                tags\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                            \n                                    Public\n                                url\n                            \n                            \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, category => category.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, tag => tag.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/post.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport Category from './category';\nimport Comment from './comment';\nimport Tag from './tag';\nimport User from './user';\n\n@Entity()\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  @IsNotEmpty()\n  public title!: string;\n\n  @ManyToOne(() => User, user => user.posts, {eager : true, onDelete: 'CASCADE'})\n  public user!: User;\n\n  @OneToMany(() => Comment, comment => comment.post)\n  public comments!: Comment[];\n\n  @OneToMany(() => Tag, tag => tag.post)\n  public tags!: Tag[];\n\n  @OneToOne(() => Category, category => category.post)\n  public category!: Category;\n\n  @Column()\n  public url!: string;\n\n  @Column()\n  public text!: string;\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post-3.html":{"url":"entities/Post-3.html","title":"entity - Post-3","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/domain/entities/post.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                social_links\n                            \n                            \n                                    Public\n                                tags\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                title\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        social_links\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'jsonb', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/entities/post.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\n@Index(['email', 'title'])\n@Unique(['title'])\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  @IsNotEmpty()\n  public title!: string;\n\n  @Column({ type: 'varchar', length: 255})\n  public url!: string;\n\n  @Column({ type: 'varchar', length: 255})\n  public email!: string;\n\n  @Column({ type: 'jsonb', default: null })\n  public social_links!: object;\n\n  @Column({ type: 'jsonb', default: null })\n  public tags!: object;\n\n  @Column({ type: 'varchar', length: 255, default: null })\n  public text!: string;\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/controller/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                deletePost\n                            \n                            \n                                    Public\n                                    Async\n                                searchElastic\n                            \n                            \n                                    Public\n                                    Async\n                                searchPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('post')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/controller/user.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(params: SearchParamsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('post/:id')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/controller/user.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                SearchParamsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchElastic\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchElastic(queryParams: SearchElasticDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(CacheInterceptor)@Get('post/elastic-search')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/controller/user.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                SearchElasticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPost(queryParams: SearchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('post/search')@UseInterceptors(CacheInterceptor)\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/controller/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body,\n  CacheInterceptor, Controller, Post, Get, ValidationPipe, UsePipes, UseInterceptors, Query, Delete, Param } from '@nestjs/common';\nimport { LoggerInterceptor } from '../../logger.interceptor';\nimport { CreatePostDto, SearchElasticDto, SearchParamsDto, SearchPostDto } from '../dto/post.dto';\nimport PostService from '../services/post.service';\n\n@Controller('/api/v1')\n@UseInterceptors(new LoggerInterceptor())\n\n@UsePipes(\n  new ValidationPipe({\n    whitelist: true,\n    transform: true,\n  }),\n)\nexport class PostController {\n  constructor(\n    private readonly postService: PostService\n  ) {}\n  @Post('post')\n  public async createPost(@Body() post: CreatePostDto) {\n    return await this.postService.create(post);\n  }\n  @Delete('post/:id')\n  public async deletePost(@Param() params: SearchParamsDto) {\n    return await this.postService.deletePost(params.id);\n  }\n  @Get('post/search')\n  // post/search?search_term=hello\n  // post/search?search_term=hello1\n\n  @UseInterceptors(CacheInterceptor)\n  public async searchPost(@Query() queryParams: SearchPostDto) {\n    return await this.postService.search(queryParams);\n  }\n  @UseInterceptors(CacheInterceptor)\n  @Get('post/elastic-search')\n  public async searchElastic(@Query() queryParams: SearchElasticDto) {\n    return await this.postService.searchElastic(queryParams);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController-1.html":{"url":"controllers/PostController-1.html","title":"controller - PostController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/domain/controller/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                searchPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('post')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/controller/user.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPost(queryParams: SearchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('post/search')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/controller/user.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Req, Controller, HttpCode, Post, UseGuards, Get, ValidationPipe, UsePipes, UseInterceptors, Query } from '@nestjs/common';\nimport { LoggerInterceptor } from '../../logger.interceptor';\nimport { CreatePostDto, SearchPostDto } from '../dto/post.dto';\nimport PostService from '../services/post.service';\n\n@Controller('/api/v1')\n@UseInterceptors(new LoggerInterceptor())\n\n@UsePipes(\n  new ValidationPipe({\n    whitelist: true,\n    transform: true,\n  }),\n)\nexport class PostController {\n  constructor(\n    private readonly postService: PostService,\n  ) {}\n  @Post('post')\n  public async createPost(@Body() post: CreatePostDto) {\n    return await this.postService.create(post);\n  }\n // /:id \n // post/search?tag=nodejs\n  @Get('post/search')\n  public async searchPost(@Query() queryParams: SearchPostDto) {\n    return await this.postService.search(queryParams);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController-2.html":{"url":"controllers/PostController-2.html","title":"controller - PostController-2","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/domain/controller/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                searchPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('post')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/controller/user.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPost(queryParams: SearchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('post/search')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/controller/user.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Req, Controller, HttpCode, Post, UseGuards, Get, ValidationPipe, UsePipes, UseInterceptors, Query } from '@nestjs/common';\nimport { LoggerInterceptor } from '../../logger.interceptor';\nimport { CreatePostDto, SearchPostDto } from '../dto/post.dto';\nimport PostService from '../services/post.service';\n\n@Controller('/api/v1')\n@UseInterceptors(new LoggerInterceptor())\n\n@UsePipes(\n  new ValidationPipe({\n    whitelist: true,\n    transform: true,\n  }),\n)\nexport class PostController {\n  constructor(\n    private readonly postService: PostService,\n  ) {}\n  @Post('post')\n  public async createPost(@Body() post: CreatePostDto) {\n    return await this.postService.create(post);\n  }\n // /:id \n // post/search?tag=nodejs\n  @Get('post/search')\n  public async searchPost(@Query() queryParams: SearchPostDto) {\n    return await this.postService.search(queryParams);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDto.html":{"url":"classes/PostDto.html","title":"class - PostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/posts/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                body\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/posts/dto/post.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/posts/dto/post.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength } from 'class-validator';\n\nexport class PostDto {\n\n    @IsNotEmpty()\n    @MinLength(4)\n    readonly title: string;\n\n    @IsNotEmpty()\n    readonly body: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deletePost\n                            \n                            \n                                    Public\n                                extractTags\n                            \n                            \n                                    Public\n                                    Async\n                                getByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByTitle\n                            \n                            \n                                handleOrderCreatedEvent\n                            \n                            \n                                    Public\n                                    Async\n                                search\n                            \n                            \n                                    Public\n                                    Async\n                                searchElastic\n                            \n                            \n                                    Private\n                                    Async\n                                searchPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepo: Repository, searchService: SearchService, cacheManager: Cache, eventEmitter: EventEmitter2)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                        SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eventEmitter\n                                                  \n                                                        \n                                                                    EventEmitter2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(postDto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: any)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        extractTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractTags(searchParam: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParam\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(title: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByTitle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTitle(title: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleOrderCreatedEvent\n                        \n                    \n                \n            \n            \n                \nhandleOrderCreatedEvent(payload: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('user.created')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(params: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        searchElastic\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchElastic(param: SearchElasticDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                SearchElasticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        searchPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPosts(params: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostService.name)\n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/services/post.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, HttpException, HttpStatus, Inject, Injectable, Logger } from '@nestjs/common';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { SearchService } from '../../search/search.service';\nimport { CreatePostDto, SearchElasticDto, SearchPostDto } from '../dto/post.dto';\nimport Post from '../entities/post';\nexport interface IPagination {\n  page: number;\n  limit: number;\n}\n\n@Injectable()\nexport default class PostService {\n  private readonly logger = new Logger(PostService.name);\n\n  constructor(\n    @InjectRepository(Post) private postRepo: Repository,\n    private readonly searchService: SearchService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n    private eventEmitter: EventEmitter2,\n  ) { }\n  public async getByEmail(title: string) {\n    this.logger.log('getting post by title');\n    const post = await this.postRepo.findOne({ title });\n    if (!post) {\n      throw new HttpException('Post with this title does not exist', HttpStatus.NOT_FOUND);\n    }\n    return post;\n  }\n  public async getById(id: string) {\n    const post = await this.postRepo.findOne(id);\n    if (!post) {\n      throw new HttpException('Post with this id does not exist', HttpStatus.NOT_FOUND);\n    }\n\n    return post;\n  }\n  public async getByTitle(title: string) {\n    return await this.postRepo.findOne({ where: { title } });\n  }\n  public async create(postDto: CreatePostDto) {\n    const post = await this.getByTitle(postDto.title);\n    if (post) {\n      throw new HttpException('Post with this title already exist', HttpStatus.CONFLICT);\n    }\n    const newPost = await this.postRepo.create(postDto);\n    const postData = await this.postRepo.save(newPost);\n    await this.searchService.indexPost(postData);\n    this.eventEmitter.emit('user.created', {});\n    return postData;\n  }\n  public extractTags(searchParam: SearchPostDto) {\n    const tags = [];\n    if (searchParam.tags) {\n      if (Array.isArray(searchParam.tags)) {\n        for (const tag of searchParam.tags) {\n          tags.push(tag);\n        }\n      } else {\n        tags.push(searchParam.tags);\n      }\n    }\n    return tags;\n  }\n  @OnEvent('user.created')\n  handleOrderCreatedEvent(payload: any) {\n    // handle and process \"OrderCreatedEvent\" event\n  }\n  // tslint:disable-next-line:cognitive-complexity\n  // tslint:disable-next-line:mccabe-complexity\n  // tslint:disable-next-line:cyclomatic-complexity\n  private async searchPosts(params: SearchPostDto): Promise {\n    const pagination: IPagination = {\n      page: Number(params.page || 1),\n      limit: Number(params.limit || 15),\n    };\n    const skippedItems = (pagination.page - 1) * pagination.limit;\n    const tagExtract = this.extractTags(params);\n    const { search_term, tags, startId } = params;\n    let query = `\n    select\n    count(*) OVER() as count,\n    tags,\n    id, title, email from post,\n    jsonb_to_recordset(post.tags) as tagItem(tag text)\n    `;\n    if (\n      search_term ||\n      this.extractTags.length > 0\n    ) {\n      query = `${query} where id is not NULL`;\n    }\n    if (search_term) {\n      const queryString = `(\n        title ILIKE '%${search_term}%' OR\n        url ILIKE '%${search_term}%' OR\n        text ILIKE '%${search_term}%' OR\n        email ILIKE '%${search_term}%')`;\n      query = `${query} AND (${queryString})`;\n    }\n    if (tagExtract && tagExtract.length > 0) {\n      let queryString = '';\n      for (const tag of tagExtract) {\n        if (!queryString) {\n          queryString = `${queryString} tagItem.tag ILIKE '%${tag}%'`;\n        } else {\n          queryString = `${queryString} OR tagItem.tag ILIKE '%${tag}%'`;\n        }\n      }\n      query = `${query} AND (${queryString})`;\n    }\n    const queryBuilder = `${query} GROUP BY id ORDER BY title ASC LIMIT ${pagination.limit} OFFSET ${skippedItems}`;\n    const posts = await this.postRepo.query(queryBuilder);\n    const count = parseInt(posts[0] && posts[0].count || 0, 10);\n    return {\n      posts,\n      totalCount: count,\n    };\n  }\n  public async searchElastic(param: SearchElasticDto) {\n    return this.searchService.search(param.search_term);\n  }\n  public async deletePost(id: any) {\n    const post = await this.getById(id);\n    await this.postRepo.delete(id);\n    await this.searchService.remove(id);\n    return null;\n  }\n  public async search(params: SearchPostDto) {\n    try {\n      const { page, limit } = params;\n      const pagination = {\n        page: page || 1,\n        limit: limit || 10,\n      };\n      const { totalCount, posts } = await this.searchPosts(params);\n      return {\n        totalCount,\n        page: pagination.page,\n        limit: pagination.limit,\n        data: posts.length > 0 ? posts : [],\n      };\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService-1.html":{"url":"injectables/PostService-1.html","title":"injectable - PostService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/domain/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                extractTags\n                            \n                            \n                                    Public\n                                    Async\n                                getByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByTitle\n                            \n                            \n                                    Public\n                                    Async\n                                search\n                            \n                            \n                                    Private\n                                    Async\n                                searchPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(postDto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        extractTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractTags(searchParam: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParam\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(title: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByTitle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTitle(title: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(params: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        searchPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPosts(params: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostService.name)\n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/services/post.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto, SearchPostDto } from '../dto/post.dto';\nimport Post from '../entities/post';\nexport interface IPagination {\n  page: number;\n  limit: number;\n}\n\n@Injectable()\nexport default class PostService {\n  private readonly logger = new Logger(PostService.name);\n\n    constructor(@InjectRepository(Post) private postRepo: Repository) {}\n    public async getByEmail(title: string) {\n      this.logger.log('getting post by title');\n      const post = await this.postRepo.findOne({title});\n      if (!post) {\n      throw new HttpException('Post with this title does not exist', HttpStatus.NOT_FOUND);\n     }\n      return post;\n    }\n    public async getById(id: string) {\n      const post = await this.postRepo.findOne(id);\n      if (!post) {\n       throw new HttpException('Post with this id does not exist', HttpStatus.NOT_FOUND);\n      }\n      return post;\n     }\n     public async getByTitle(title: string) {\n      return await this.postRepo.findOne({ where: { title}});\n     }\n    public async create(postDto: CreatePostDto) {\n      const post = await this.getByTitle(postDto.title);\n      if (post) {\n        throw new HttpException('Post with this title already exist', HttpStatus.CONFLICT);\n      }\n      const newUser = await this.postRepo.create(postDto);\n      await this.postRepo.save(newUser);\n      return newUser;\n    }\n    public extractTags(searchParam: SearchPostDto) {\n      const tags = [];\n      if (searchParam.tags) {\n        if (Array.isArray(searchParam.tags)) {\n          for (const tag of searchParam.tags) {\n            tags.push(tag);\n          }\n        } else {\n          tags.push(searchParam.tags);\n        }\n      }\n      return tags;\n    }\n   // tslint:disable-next-line:cognitive-complexity\n   // tslint:disable-next-line:mccabe-complexity\n    // tslint:disable-next-line:cyclomatic-complexity\n   private async searchPosts(params: SearchPostDto): Promise {\n    const pagination: IPagination = {\n      page: Number(params.page || 1),\n      limit: Number(params.limit || 15),\n    };\n    const skippedItems = (pagination.page - 1) * pagination.limit;\n    const tagExtract = this.extractTags(params);\n    const {search_term , tags, startId} = params;\n    let query = `\n    select\n    count(*) OVER() as count,\n    tags,\n    id, title, email from post,\n    jsonb_to_recordset(post.tags) as tagItem(tag text)\n    `;\n    if (\n      search_term ||\n      this.extractTags.length > 0\n    ) {\n      query = `${query} where id is not NULL`;\n    }\n    if (search_term) {\n      const queryString = `(\n        title ILIKE '%${search_term}%' OR\n        url ILIKE '%${search_term}%' OR\n        text ILIKE '%${search_term}%' OR\n        email ILIKE '%${search_term}%')`;\n      query = `${query} AND (${queryString})`;\n    }\n    if (tagExtract && tagExtract.length > 0 ) {\n    let queryString = '';\n    for (const tag of tagExtract) {\n       if (! queryString) {\n        queryString = `${queryString} tagItem.tag ILIKE '%${tag}%'`;\n       } else {\n        queryString = `${queryString} OR tagItem.tag ILIKE '%${tag}%'`;\n       }\n    }\n    query = `${query} AND (${queryString})`;\n    }\n    const queryBuilder = `${query} GROUP BY id ORDER BY title ASC LIMIT ${pagination.limit} OFFSET ${skippedItems}`;\n    const posts = await this.postRepo.query(queryBuilder);\n    const count = parseInt(posts[0] && posts[0].count || 0, 10);\n    return {\n      posts,\n      totalCount: count,\n    };\n   }\n    public async search(params: SearchPostDto) {\n      try {\n         const {page, limit} = params;\n         const pagination = {\n           page: page || 1,\n           limit: limit || 10,\n         };\n         const {totalCount, posts} = await this.searchPosts(params);\n         return {\n           totalCount,\n           page: pagination.page,\n           limit: pagination.limit,\n           data: posts.length > 0 ? posts : [],\n         };\n      } catch (err) {\n         throw err;\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService-2.html":{"url":"injectables/PostService-2.html","title":"injectable - PostService-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/domain/services/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                extractTags\n                            \n                            \n                                    Public\n                                    Async\n                                getByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByTitle\n                            \n                            \n                                    Public\n                                    Async\n                                search\n                            \n                            \n                                    Private\n                                    Async\n                                searchPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepo\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(postDto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postDto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        extractTags\n                        \n                    \n                \n            \n            \n                \n                    \n                    extractTags(searchParam: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    searchParam\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(title: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByTitle\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByTitle(title: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    title\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(params: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        searchPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchPosts(params: SearchPostDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                SearchPostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostService.name)\n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/services/post.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto, SearchPostDto } from '../dto/post.dto';\nimport Post from '../entities/post';\nexport interface IPagination {\n  page: number;\n  limit: number;\n}\n\n@Injectable()\nexport default class PostService {\n  private readonly logger = new Logger(PostService.name);\n\n    constructor(@InjectRepository(Post) private postRepo: Repository) {}\n    public async getByEmail(title: string) {\n      this.logger.log('getting post by title');\n      const post = await this.postRepo.findOne({title});\n      if (!post) {\n      throw new HttpException('Post with this title does not exist', HttpStatus.NOT_FOUND);\n     }\n      return post;\n    }\n    public async getById(id: string) {\n      const post = await this.postRepo.findOne(id);\n      if (!post) {\n       throw new HttpException('Post with this id does not exist', HttpStatus.NOT_FOUND);\n      }\n      return post;\n     }\n     public async getByTitle(title: string) {\n      return await this.postRepo.findOne({ where: { title}});\n     }\n    public async create(postDto: CreatePostDto) {\n      const post = await this.getByTitle(postDto.title);\n      if (post) {\n        throw new HttpException('Post with this title already exist', HttpStatus.CONFLICT);\n      }\n      const newUser = await this.postRepo.create(postDto);\n      await this.postRepo.save(newUser);\n      return newUser;\n    }\n    public extractTags(searchParam: SearchPostDto) {\n      const tags = [];\n      if (searchParam.tags) {\n        if (Array.isArray(searchParam.tags)) {\n          for (const tag of searchParam.tags) {\n            tags.push(tag);\n          }\n        } else {\n          tags.push(searchParam.tags);\n        }\n      }\n      return tags;\n    }\n   // tslint:disable-next-line:cognitive-complexity\n   // tslint:disable-next-line:mccabe-complexity\n    // tslint:disable-next-line:cyclomatic-complexity\n   private async searchPosts(params: SearchPostDto): Promise {\n    const pagination: IPagination = {\n      page: Number(params.page || 1),\n      limit: Number(params.limit || 15),\n    };\n    const skippedItems = (pagination.page - 1) * pagination.limit;\n    const tagExtract = this.extractTags(params);\n    const {search_term , tags, startId} = params;\n    let query = `\n    select\n    count(*) OVER() as count,\n    tags,\n    id, title, email from post,\n    jsonb_to_recordset(post.tags) as tagItem(tag text)\n    `;\n    if (\n      search_term ||\n      this.extractTags.length > 0\n    ) {\n      query = `${query} where id is not NULL`;\n    }\n    if (search_term) {\n      const queryString = `(\n        title ILIKE '%${search_term}%' OR\n        url ILIKE '%${search_term}%' OR\n        text ILIKE '%${search_term}%' OR\n        email ILIKE '%${search_term}%')`;\n      query = `${query} AND (${queryString})`;\n    }\n    if (tagExtract && tagExtract.length > 0 ) {\n    let queryString = '';\n    for (const tag of tagExtract) {\n       if (! queryString) {\n        queryString = `${queryString} tagItem.tag ILIKE '%${tag}%'`;\n       } else {\n        queryString = `${queryString} OR tagItem.tag ILIKE '%${tag}%'`;\n       }\n    }\n    query = `${query} AND (${queryString})`;\n    }\n    const queryBuilder = `${query} GROUP BY id ORDER BY title ASC LIMIT ${pagination.limit} OFFSET ${skippedItems}`;\n    const posts = await this.postRepo.query(queryBuilder);\n    const count = parseInt(posts[0] && posts[0].count || 0, 10);\n    return {\n      posts,\n      totalCount: count,\n    };\n   }\n    public async search(params: SearchPostDto) {\n      try {\n         const {page, limit} = params;\n         const pagination = {\n           page: page || 1,\n           limit: limit || 10,\n         };\n         const {totalCount, posts} = await this.searchPosts(params);\n         return {\n           totalCount,\n           page: pagination.page,\n           limit: pagination.limit,\n           data: posts.length > 0 ? posts : [],\n         };\n      } catch (err) {\n         throw err;\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostTag.html":{"url":"classes/PostTag.html","title":"class - PostTag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostTag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'post tag name', required: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchParamsDto {\n  @ApiProperty({\n    description: 'id of post',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public id?: number;\n}\n\nexport class SearchElasticDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n}\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostTag-1.html":{"url":"classes/PostTag-1.html","title":"class - PostTag-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostTag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'post tag name', required: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostTag-2.html":{"url":"classes/PostTag-2.html","title":"class - PostTag-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostTag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                tag\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'post tag name', required: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(post: PostDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post()\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                PostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, post: PostDto, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Put(':id')\n                \n            \n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                PostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Put, Delete, Param, Body, NotFoundException, UseGuards, Request } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { PostsService } from './posts.service';\nimport { Post as PostEntity } from './post.entity';\nimport { PostDto } from './dto/post.dto';\n\n@Controller('posts')\nexport class PostsController {\n    constructor(private readonly postService: PostsService) { }\n\n    @Get()\n    async findAll() {\n        // get all posts in the db\n        return await this.postService.findAll();\n    }\n\n    @Get(':id')\n    async findOne(@Param('id') id: number): Promise {\n        // find the post with this id\n        const post = await this.postService.findOne(id);\n\n        // if the post doesn't exit in the db, throw a 404 error\n        if (!post) {\n            throw new NotFoundException('This Post doesn\\'t exist');\n        }\n\n        // if post exist, return the post\n        return post;\n    }\n\n    @UseGuards(AuthGuard('jwt'))\n    @Post()\n    async create(@Body() post: PostDto, @Request() req): Promise {\n        // create a new post and return the newly created post\n        return await this.postService.create(post, req.user.id);\n    }\n\n    @UseGuards(AuthGuard('jwt'))\n    @Put(':id')\n    async update(@Param('id') id: number, @Body() post: PostDto, @Request() req): Promise {\n        // get the number of row affected and the updated post\n        const { numberOfAffectedRows, updatedPost } = await this.postService.update(id, post, req.user.id);\n\n        // if the number of row affected is zero, it means the post doesn't exist in our db\n        if (numberOfAffectedRows === 0) {\n            throw new NotFoundException('This Post doesn\\'t exist');\n        }\n\n        // return the updated post\n        return updatedPost;\n    }\n\n    @UseGuards(AuthGuard('jwt'))\n    @Delete(':id')\n    async remove(@Param('id') id: number, @Request() req) {\n        // delete the post with this id\n        const deleted = await this.postService.delete(id, req.user.id);\n\n        // if the number of row affected is zero, then the post doesn't exist in our db\n        if (deleted === 0) {\n            throw new NotFoundException('This Post doesn\\'t exist');\n        }\n\n        // return success message\n        return 'Successfully deleted';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { postsProviders } from './posts.providers';\n\n@Module({\n  providers: [PostsService, ...postsProviders],\n  controllers: [PostsController],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository)\n                    \n                \n                        \n                            \n                                Defined in nestjs-sequelize-apis/src/modules/posts/posts.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(post: PostDto, userId)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                PostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id, userId)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id, data, userId)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/posts/posts.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\n\nimport { Post } from './post.entity';\nimport { PostDto } from './dto/post.dto';\nimport { User } from '../users/user.entity';\nimport { POST_REPOSITORY } from '../../core/constants';\n\n@Injectable()\nexport class PostsService {\n    constructor(@Inject(POST_REPOSITORY) private readonly postRepository: typeof Post) { }\n\n    async create(post: PostDto, userId): Promise {\n        return await this.postRepository.create({ ...post, userId });\n    }\n\n    async findAll(): Promise {\n        return await this.postRepository.findAll({\n            include: [{ model: User, attributes: { exclude: ['password'] } }],\n        });\n    }\n\n    async findOne(id): Promise {\n        return await this.postRepository.findOne({\n            where: { id },\n            include: [{ model: User, attributes: { exclude: ['password'] } }],\n        });\n    }\n\n    async delete(id, userId) {\n        return await this.postRepository.destroy({ where: { id, userId } });\n    }\n\n    async update(id, data, userId) {\n        const [numberOfAffectedRows, [updatedPost]] = await this.postRepository.update({ ...data }, { where: { id, userId }, returning: true });\n        return { numberOfAffectedRows, updatedPost };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/controllers/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createProduct\n                            \n                            \n                                    Public\n                                    Async\n                                ListAllProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                    \n                    createProduct()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('product')@Roles(Role.ADMIN)\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/product.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        ListAllProducts\n                        \n                    \n                \n            \n            \n                \n                    \n                    ListAllProducts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('product')@Roles(Role.ADMIN)\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/product.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Req, UseGuards, UsePipes, ValidationPipe } from '@nestjs/common';\nimport {\n  ApiTags,\n} from '@nestjs/swagger';\nimport { RolesGuard } from '../middleware/auth.guard';\nimport { Roles } from '../middleware/role.decorator';\n\nexport enum Role {\n  ADMIN = 'admin',\n  USER= 'user'\n}\n@ApiTags('Product')\n@Controller('/api/v1')\n@UsePipes(new ValidationPipe({\n  whitelist: true,\n  transform: true,\n}))\n@UseGuards(RolesGuard)\nexport class ProductController {\n  constructor() {}\n\n  @Get('product')\n  @Roles(Role.ADMIN)\n  public async ListAllProducts(): Promise {\n    return [];\n  }\n\n  @Post('product')\n  @Roles(Role.ADMIN)\n  public async createProduct(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisCacheModule.html":{"url":"modules/RedisCacheModule.html","title":"module - RedisCacheModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisCacheModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RedisCacheModule\n\n\n\ncluster_RedisCacheModule_exports\n\n\n\ncluster_RedisCacheModule_providers\n\n\n\n\nRedisCacheModule \n\nRedisCacheModule \n\n\n\nRedisCacheService \n\nRedisCacheService \n\n\n\nRedisCacheModule\n\nRedisCacheModule\n\nRedisCacheModule  -->\n\nRedisCacheModule->RedisCacheModule \n\n\n\nRedisCacheService  -->\n\nRedisCacheModule->RedisCacheService \n\n\n\n\n\nRedisCacheService\n\nRedisCacheService\n\nRedisCacheModule -->\n\nRedisCacheService->RedisCacheModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisCacheService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisCacheModule\n                        \n                        \n                            RedisCacheService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/redis/redis.module.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  CACHE_MANAGER,\n  CacheModule,\n  Inject,\n  Logger,\n  Module,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { Cache } from 'cache-manager';\nimport * as redisStore from 'cache-manager-ioredis';\nimport { RedisCacheService } from './redis.service';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n          useFactory: () => {\n              return {\n                  store: redisStore,\n                  host: process.env.REDIS_HOST,\n                  port:  process.env.REDIS_PORT,\n                  ttl: 60 * 3600 * 1000,\n              };\n          },\n      }),\n  ],\n  providers:[RedisCacheService],\n  exports: [\n      RedisCacheModule,\n      RedisCacheService,\n  ],\n})\nexport class RedisCacheModule implements OnModuleInit {\n  constructor(\n      @Inject(CACHE_MANAGER) private readonly cache: Cache\n  ) {}\n  public onModuleInit(): any {\n      const logger = new Logger('Cache');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisCacheService.html":{"url":"injectables/RedisCacheService.html","title":"injectable - RedisCacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisCacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                del\n                            \n                            \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-elastic/src/app/redis/redis.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                    \n                    del(key: any)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/redis/redis.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/redis/redis.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                    \n                    set(key: string, value: object)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/redis/redis.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class RedisCacheService {\n  constructor(\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  public async get(key: string) {\n     return await this.cacheManager.get(key);\n  }\n  public async set(key: string, value: object) {\n   await this.cacheManager.set(key, value);\n  }\n  public async del(key: any) {\n   await this.cacheManager.del(key);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RedisConfig.html":{"url":"interfaces/RedisConfig.html","title":"interface - RedisConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RedisConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/config/config.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration data for the app.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RedisConfig {\n  host: string;\n  port: string;\n  ttl: number;\n}\nexport interface ConfigData {\n  /**\n   * The name of the environment.\n   * @example 'test', 'development', 'staging', 'production'\n   */\n  env: string;\n\n  /** The port number of the http server to listen on. */\n  port: number;\n\n  /**\n   * The log level to use.\n   * @example 'verbose', 'info', 'warn', 'error'\n   */\n  logLevel?: string;\n\n  redis: RedisConfig;\n\n  mongo: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RedisConfig-1.html":{"url":"interfaces/RedisConfig-1.html","title":"interface - RedisConfig-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RedisConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/config/config.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration data for the app.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            host\n                                        \n                                \n                                \n                                        \n                                            port\n                                        \n                                \n                                \n                                        \n                                            ttl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        port:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ttl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ttl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RedisConfig {\n  host: string;\n  port: string;\n  ttl: number;\n}\nexport interface ConfigData {\n  /**\n   * The name of the environment.\n   * @example 'test', 'development', 'staging', 'production'\n   */\n  env: string;\n\n  /** The port number of the http server to listen on. */\n  port: number;\n\n  /**\n   * The log level to use.\n   * @example 'verbose', 'info', 'warn', 'error'\n   */\n  logLevel?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestModel.html":{"url":"interfaces/RequestModel.html","title":"interface - RequestModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/middleware/auth.middleware.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext, HttpStatus, Injectable, NestMiddleware } from '@nestjs/common';\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\nimport { NextFunction, Request, Response } from 'express';\nimport { FirebaseAuthService } from '../services/firebase.service';\nexport interface RequestModel extends Request {\n  user: any;\n}\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n  constructor(private readonly firebaseService: FirebaseAuthService){}\n\n  public async use(req: RequestModel, _: Response, next: NextFunction) {\n    try {\n    const { authorization } = req.headers;\n    if (!authorization) {\n      throw new HttpException({ message: 'missing authz header' }, HttpStatus.BAD_REQUEST);\n    }\n    const user = await this.firebaseService.authenticate(authorization);\n    console.log(user);\n    req.user = user;\n    next();\n   } catch(err) {\n    throw new HttpException({ message: 'invalid token' }, HttpStatus.UNAUTHORIZED);\n   }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                nestjs-firebase-auth-authz/src/app/middleware/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in nestjs-firebase-auth-authz/src/app/middleware/auth.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/middleware/auth.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    console.log(roles);\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () => roles.includes(user.role);\n    return user && user.role && hasRole();\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard-1.html":{"url":"guards/RolesGuard-1.html","title":"guard - RolesGuard-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                nestjs-with-mongoose/src/app/core/guard/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in nestjs-with-mongoose/src/app/core/guard/role.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/core/guard/role.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    // console.log(user && user.role && roles.includes(user.role));\n    const hasRole = () => roles.includes(user.role);\n    return user && user.role && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchElasticDto.html":{"url":"classes/SearchElasticDto.html","title":"class - SearchElasticDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchElasticDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                search_term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        search_term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'search_term', required: false})@IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchParamsDto {\n  @ApiProperty({\n    description: 'id of post',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public id?: number;\n}\n\nexport class SearchElasticDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n}\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_imports\n\n\n\ncluster_SearchModule_exports\n\n\n\ncluster_SearchModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nConfigModule->SearchModule\n\n\n\n\n\nSearchService \n\nSearchService \n\nSearchService  -->\n\nSearchModule->SearchService \n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SearchService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SearchService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/search/search.module.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, OnModuleInit } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\nimport { SearchService } from './search.service';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        node: configService.get('ELASTICSEARCH_NODE'),\n        maxRetries: 10,\n        requestTimeout: 60000,\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [SearchService],\n  exports: [ElasticsearchModule, SearchService],\n})\nexport class SearchModule implements OnModuleInit  {\n  constructor(private readonly searchService: SearchService){}\n  public async onModuleInit() {\n     await this.searchService.createIndex();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchParamsDto.html":{"url":"classes/SearchParamsDto.html","title":"class - SearchParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'id of post', required: false})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:51\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchParamsDto {\n  @ApiProperty({\n    description: 'id of post',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public id?: number;\n}\n\nexport class SearchElasticDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n}\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchPostDto.html":{"url":"classes/SearchPostDto.html","title":"class - SearchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                limit\n                            \n                            \n                                    Public\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                search_term\n                            \n                            \n                                    Optional\n                                startId\n                            \n                            \n                                    Public\n                                    Optional\n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'number of records in a request', required: false})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'page number for request', required: false})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        search_term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'search_term', required: false})@IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'number of records in a request', required: true})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'tags', required: false})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-elastic/src/app/domain/dto/post.dto.ts:74\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchParamsDto {\n  @ApiProperty({\n    description: 'id of post',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public id?: number;\n}\n\nexport class SearchElasticDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n}\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchPostDto-1.html":{"url":"classes/SearchPostDto-1.html","title":"class - SearchPostDto-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                limit\n                            \n                            \n                                    Public\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                search_term\n                            \n                            \n                                    Optional\n                                startId\n                            \n                            \n                                    Public\n                                    Optional\n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'number of records in a request', required: false})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'page number for request', required: false})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        search_term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'search_term', required: false})@IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'number of records in a request', required: true})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'tags', required: false})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-pagination/src/app/domain/dto/post.dto.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchPostDto-2.html":{"url":"classes/SearchPostDto-2.html","title":"class - SearchPostDto-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                limit\n                            \n                            \n                                    Public\n                                    Optional\n                                page\n                            \n                            \n                                    Public\n                                search_term\n                            \n                            \n                                    Optional\n                                startId\n                            \n                            \n                                    Public\n                                    Optional\n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'number of records in a request', required: false})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'page number for request', required: false})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        search_term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'search_term', required: false})@IsOptional()@IsString()@MinLength(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'number of records in a request', required: true})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'tags', required: false})@IsString({each: true})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-postgres-starter-/src/app/domain/dto/post.dto.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type, Type as ValidateType } from 'class-transformer';\nimport { ArrayMinSize, IsArray, IsEmail, IsNumber, IsOptional, IsString, Min, MinLength, ValidateNested } from 'class-validator';\n/*\nSELECT * FROM post\nWHERE id > 20\nORDER BY id ASC\nLIMIT 10\n*/\n\nexport class PostTag {\n  @ApiProperty({description: 'post tag name', required: true})\n  @IsOptional()\n  @IsString()\n  public tag?: string;\n}\nexport class CreatePostDto {\n  @ApiProperty({description: 'TITLE', required: true})\n  @IsString()\n  @MinLength(4)\n  public title!: string;\n\n  @ApiProperty({description: 'EMAIL', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'url', required: true})\n   @IsString()\n  @MinLength(4)\n  public url!: string;\n\n @ApiProperty({description: 'tags', required: false, type:[PostTag]})\n @IsOptional()\n @IsArray()\n @ValidateNested()\n @ArrayMinSize(1)\n @ValidateType(() => PostTag)\n public tags?: PostTag [];\n}\n\nexport class SearchPostDto {\n  @ApiProperty({description: 'search_term', required: false})\n  @IsOptional()\n  @IsString()\n  @MinLength(2)\n  public search_term!: string;\n\n  @ApiProperty({\n    description: 'tags',\n    required: false,\n  })\n  @IsString({ each: true })\n  @IsOptional()\n  public tags?: string[];\n\n  @ApiProperty({\n    description: 'page number for request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public page?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  public limit?: number;\n\n  @ApiProperty({\n    description: 'number of records in a request',\n    required: true,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  startId?: number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SearchService.html":{"url":"injectables/SearchService.html","title":"injectable - SearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/search/search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createIndex\n                            \n                            \n                                    Public\n                                    Async\n                                indexPost\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(esService: ElasticsearchService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-postgres-elastic/src/app/search/search.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        esService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createIndex\n                        \n                    \n                \n            \n            \n                \n                    \n                    createIndex()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/search/search.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(post: any)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/search/search.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(postId: number)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/search/search.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\n\n@Injectable()\nexport class SearchService {\n  constructor(private readonly esService: ElasticsearchService, private readonly configService: ConfigService) { }\n  // tslint:disable-next-line:no-big-function\n  public async createIndex() {\n    const index = this.configService.get('ELASTICSEARCH_INDEX');\n    const checkIndex = await this.esService.indices.exists({ index });\n    // tslint:disable-next-line:early-exit\n    if (checkIndex.statusCode === 404) {\n      this.esService.indices.create(\n        {\n          index,\n          body: {\n            mappings: {\n              properties: {\n                email: {\n                  type: 'text',\n                  fields: {\n                    keyword: {\n                      type: 'keyword',\n                      ignore_above: 256,\n                    },\n                  },\n                },\n                tags: {\n                  properties: {\n                    tag: {\n                      type: 'text',\n                      fields: {\n                        keyword: {\n                          type: 'keyword',\n                          ignore_above: 256,\n                        },\n                      },\n                    },\n                  },\n                },\n                text: {\n                  type: 'text',\n                  fields: {\n                    keyword: {\n                      type: 'keyword',\n                      ignore_above: 256,\n                    },\n                  },\n                },\n                title: {\n                  type: 'text',\n                  fields: {\n                    keyword: {\n                      type: 'keyword',\n                      ignore_above: 256,\n                    },\n                  },\n                },\n              },\n            },\n            settings: {\n              analysis: {\n                filter: {\n                  autocomplete_filter: {\n                    type: 'edge_ngram',\n                    min_gram: 1,\n                    max_gram: 20,\n                  },\n                },\n                analyzer: {\n                  autocomplete: {\n                    type: 'custom',\n                    tokenizer: 'standard',\n                    filter: ['lowercase', 'autocomplete_filter'],\n                  },\n                },\n              },\n            },\n          },\n        },\n        (err: any) => {\n          if (err) {\n            console.log(err);\n          }\n        },\n      );\n    }\n  }\n  public async indexPost(post: any) {\n    return await this.esService.index({\n      index: this.configService.get('ELASTICSEARCH_INDEX')!,\n      body: post,\n    });\n  }\n  public async remove(postId: number) {\n    this.esService.deleteByQuery({\n      index: this.configService.get('ELASTICSEARCH_INDEX')!,\n      body: {\n        query: {\n          match: {\n            id: postId,\n          }\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUp.html":{"url":"classes/SignUp.html","title":"class - SignUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/user.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/user.controller.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/user.controller.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/user.controller.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Get, Post, Delete, Param, Controller, Body } from '@nestjs/common';\nimport { Request } from 'express';\nimport { CommandBus } from '@nestjs/cqrs';\nimport { CreateUserCommand } from './commands/impl/create-user.command';\n\nexport class SignUp { \n    email: string;\n    username: string;\n    password: string;\n};\n\n@Controller('profiles')\nexport class UserController {\n    constructor(private readonly commandBus: CommandBus,\n    ) { }\n\n    @Post('signup')\n    public async signup(@Body('input') input: SignUp) {\n        try {\n            return await this.commandBus.execute(\n                new CreateUserCommand(input.username,\n                    input.email, input.password));\n        } catch (errors) {\n            console.log(\"Caught promise rejection (validation failed). Errors: \", errors);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Signup.html":{"url":"classes/Signup.html","title":"class - Signup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Signup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/graphql.schema.ts\n        \n\n\n            \n                Description\n            \n            \n                \nTHIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/graphql.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/graphql.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/graphql.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Signup {\n    username: string;\n    email: string;\n    password: string;\n}\n\nexport class SignupResponse {\n    username: string;\n    email: string;\n}\n\nexport class AuthPayload {\n    email: string;\n}\n\nexport abstract class IMutation {\n    abstract signup(input: Signup): SignupResponse | Promise;\n\n    abstract login(username: string, password: string): AuthPayload | Promise;\n}\n\nexport class User {\n    userId: string;\n    username?: string;\n    email: string;\n    password: string;\n}\n\nexport abstract class IQuery {\n    abstract me(): string | Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupResponse.html":{"url":"classes/SignupResponse.html","title":"class - SignupResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/graphql.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/graphql.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/graphql.schema.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Signup {\n    username: string;\n    email: string;\n    password: string;\n}\n\nexport class SignupResponse {\n    username: string;\n    email: string;\n}\n\nexport class AuthPayload {\n    email: string;\n}\n\nexport abstract class IMutation {\n    abstract signup(input: Signup): SignupResponse | Promise;\n\n    abstract login(username: string, password: string): AuthPayload | Promise;\n}\n\nexport class User {\n    userId: string;\n    username?: string;\n    email: string;\n    password: string;\n}\n\nexport abstract class IQuery {\n    abstract me(): string | Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig.html":{"url":"interfaces/SwaggerConfig.html","title":"interface - SwaggerConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-authentication-authz/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-1.html":{"url":"interfaces/SwaggerConfig-1.html","title":"interface - SwaggerConfig-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-2.html":{"url":"interfaces/SwaggerConfig-2.html","title":"interface - SwaggerConfig-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/swagger/swagger.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            contact\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contact\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contact:         Contact\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Contact\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-3.html":{"url":"interfaces/SwaggerConfig-3.html","title":"interface - SwaggerConfig-3","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/swagger/swagger.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            contact\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contact\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contact:         Contact\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Contact\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-4.html":{"url":"interfaces/SwaggerConfig-4.html","title":"interface - SwaggerConfig-4","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/swagger/swagger.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            contact\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contact\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contact:         Contact\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Contact\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-5.html":{"url":"interfaces/SwaggerConfig-5.html","title":"interface - SwaggerConfig-5","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-6.html":{"url":"interfaces/SwaggerConfig-6.html","title":"interface - SwaggerConfig-6","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/swagger/swagger.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            contact\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contact\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contact:         Contact\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Contact\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-7.html":{"url":"interfaces/SwaggerConfig-7.html","title":"interface - SwaggerConfig-7","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/swagger/swagger.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            contact\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        contact\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        contact:         Contact\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Contact\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Contact {\n  name: string;\n  url: string;\n  email: string;\n}\nexport interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n  contact: Contact;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SwaggerConfig-8.html":{"url":"interfaces/SwaggerConfig-8.html","title":"interface - SwaggerConfig-8","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SwaggerConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            typescript-nestjs/src/swagger/swagger.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Specifies configuration for the swagger UI (found at /api).\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SwaggerConfig {\n  title: string;\n  description: string;\n  version: string;\n  tags: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/entities/tag.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                text\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/tag.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/tag.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.tags, {eager: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/tag.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/tag.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/tag.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport Post from './post';\n\n@Entity()\nclass Tag {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  @IsNotEmpty()\n  public text!: string;\n\n  @ManyToOne(() => Post, post => post.tags, { eager: true, onDelete: 'CASCADE' })\n  public post!: Post;\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\n\nexport default Tag;\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestController.html":{"url":"controllers/TestController.html","title":"controller - TestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-elastic/src/app/controllers/test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                            \n                                    Public\n                                test1\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@Get('/filter')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/controllers/test.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test1\n                        \n                    \n                \n            \n            \n                \n                    \n                    test1()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@UseFilters(new HttpExceptionFilter())@Get('/filter-test')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-elastic/src/app/controllers/test.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpException, HttpStatus, UseFilters } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HttpExceptionFilter } from '../http-exception.filter';\n\n@Controller('/api/v1/test')\nexport class TestController {\n  constructor(\n  ) { }\n\n  @ApiTags('test')\n  @Get('/filter')\n  public test() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n\n  @ApiTags('test')\n  @UseFilters( new HttpExceptionFilter())\n  @Get('/filter-test')\n  public test1() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestController-1.html":{"url":"controllers/TestController-1.html","title":"controller - TestController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-pagination/src/app/controllers/test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                            \n                                    Public\n                                test1\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@Get('/filter')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/controllers/test.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test1\n                        \n                    \n                \n            \n            \n                \n                    \n                    test1()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@UseFilters(new HttpExceptionFilter())@Get('/filter-test')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-pagination/src/app/controllers/test.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpException, HttpStatus, UseFilters } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HttpExceptionFilter } from '../http-exception.filter';\n\n@Controller('/api/v1/test')\nexport class TestController {\n  constructor(\n  ) { }\n\n  @ApiTags('test')\n  @Get('/filter')\n  public test() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n\n  @ApiTags('test')\n  @UseFilters( new HttpExceptionFilter())\n  @Get('/filter-test')\n  public test1() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestController-2.html":{"url":"controllers/TestController-2.html","title":"controller - TestController-2","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/controllers/test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                            \n                                    Public\n                                test1\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@Get('/test')\n                \n            \n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/controllers/test.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test1\n                        \n                    \n                \n            \n            \n                \n                    \n                    test1()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@UseFilters(new HttpExceptionFilter())@Get('/filter-test')\n                \n            \n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/controllers/test.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpException, HttpStatus, UseFilters } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HttpExceptionFilter } from '../http-exception.filter';\n\n@Controller('test')\nexport class TestController {\n  constructor(\n  ) { }\n\n  @ApiTags('test')\n  @Get('/test')\n  public test() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n\n  @ApiTags('test')\n  @UseFilters( new HttpExceptionFilter())\n  @Get('/filter-test')\n  public test1() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestController-3.html":{"url":"controllers/TestController-3.html","title":"controller - TestController-3","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-postgres-starter-/src/app/controllers/test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1/test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                            \n                                    Public\n                                test1\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test\n                        \n                    \n                \n            \n            \n                \n                    \n                    test()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@Get('/filter')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/controllers/test.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        test1\n                        \n                    \n                \n            \n            \n                \n                    \n                    test1()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiTags('test')@UseFilters(new HttpExceptionFilter())@Get('/filter-test')\n                \n            \n\n            \n                \n                    Defined in nestjs-postgres-starter-/src/app/controllers/test.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpException, HttpStatus, UseFilters } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HttpExceptionFilter } from '../http-exception.filter';\n\n@Controller('/api/v1/test')\nexport class TestController {\n  constructor(\n  ) { }\n\n  @ApiTags('test')\n  @Get('/filter')\n  public test() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n\n  @ApiTags('test')\n  @UseFilters( new HttpExceptionFilter())\n  @Get('/filter-test')\n  public test1() {\n    throw new HttpException({\n      status: HttpStatus.FORBIDDEN,\n      error: 'access to this res is forbidden',\n    }, 403);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TestService.html":{"url":"injectables/TestService.html","title":"injectable - TestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/services/test.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sayHi\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/services/test.service.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sayHi\n                        \n                    \n                \n            \n            \n                \n                    \n                    sayHi(email: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/services/test.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TestService.name)\n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/services/test.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport CreateUserDto from '../dto/user.dto';\nimport User from '../entities/user';\nconst bcrypt = require('bcrypt');\n\n@Injectable()\nexport default class TestService {\n  private readonly logger = new Logger(TestService.name);\n  constructor() { }\n  public sayHi(email: string) {\n     return email\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TypeOrmConfigService.html":{"url":"injectables/TypeOrmConfigService.html","title":"injectable - TypeOrmConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypeOrmConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/config/typeorm.config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-cqrs-demo/src/config/typeorm.config.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/config/typeorm.config.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     TypeOrmModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { TypeOrmOptionsFactory, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class TypeOrmConfigService implements TypeOrmOptionsFactory {\n  \n  constructor(private configService: ConfigService ) {}\n\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return {\n      type: 'mysql',\n      host: process.env.TYPEORM_HOST,\n      port: Number(process.env.TYPEORM_PORT),\n      username: process.env.TYPEORM_USERNAME,\n      password: process.env.TYPEORM_PASSWORD,\n      database: process.env.TYPEORM_DATABASE,\n      entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n      synchronize: false,\n      migrationsRun: true,\n      migrationsTableName: \"custom_migration_table\",\n      migrations: [__dirname + \"migration/*.js\"],\n      \"cli\": {\n        \"migrationsDir\": \"migration\"\n      },\n      autoLoadEntities: true,\n      logging: [\"query\", \"error\"],\n    };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadAzureService.html":{"url":"injectables/UploadAzureService.html","title":"injectable - UploadAzureService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadAzureService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/services/upload.azure.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Public\n                                getExtention\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filesService: FilesAzureService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-s3-azure-blob/src/app/domain/services/upload.azure.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesAzureService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(imageBuffer: Buffer, file: any)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/services/upload.azure.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getExtention\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExtention(extention: string, uuid: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/services/upload.azure.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    extention\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    uuid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { uploadFile } from '../controller/upload.controller.process';\nimport { FilesAzureService } from './file.azure.service';\nimport {uuid} from 'uuidv4';\nconst getStream = require('into-stream');\n\n@Injectable()\nexport class UploadAzureService {\n  constructor(\n    private readonly filesService: FilesAzureService,\n  ) {}\n\n   async addAvatar(imageBuffer: Buffer, file: any){\n     const extention = file.originalname && file.originalname.split('.').pop();\n     const blobName = this.getExtention(extention, uuid()); \n     const containerName = process.env.CONTAINER_NAME!;\n     const stream = getStream(imageBuffer);\n     return await this.filesService.createBlobFromStream(containerName, blobName, stream, imageBuffer);\n   }\n   public getExtention(extention: string, uuid: string) {\n    const allowedFiles = ['jpg', 'png', 'gif', 'jepg', 'bmp', 'webp'];\n    return `${uuid}.${allowedFiles.includes(extention) ? extention : 'jpeg'}`;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadController.html":{"url":"controllers/UploadController.html","title":"controller - UploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/controller/upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                            \n                                    Public\n                                    Async\n                                uploadMultipleFiles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/file-upload')@ApiConsumes('multipart/form-data')@uploadFile('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/controller/upload.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadMultipleFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMultipleFiles(files: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/multiple-file-upload')@ApiConsumes('multipart/form-data')@uploadFile('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/controller/upload.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UploadedFile, UploadedFiles, UseInterceptors, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiConsumes } from '@nestjs/swagger';\nimport { diskStorage } from 'multer';\nimport { imageFileFilter } from './file-helper';\nimport { uploadFile } from './upload.controller.process';\n\n@Controller('/api/v1')\n@UsePipes(\n  new ValidationPipe({\n    whitelist: true,\n    transform: true,\n  }),\n)\nexport class UploadController {\n  @Post('/file-upload')\n  @ApiConsumes('multipart/form-data')\n  @uploadFile('image')\n  @UseInterceptors(\n    FileInterceptor('image', {\n      storage: diskStorage({\n        destination: './files',\n      }),\n      fileFilter: imageFileFilter,\n    }),\n  )\n  public async uploadFile(@UploadedFile() file: any) {\n    const response = {\n      originalname: file.originalname,\n      filename: file.filename,\n    };\n    return response;\n  }\n\n  @Post('/multiple-file-upload')\n  @ApiConsumes('multipart/form-data')\n  @uploadFile('image')\n  @UseInterceptors(\n    FileInterceptor('image', {\n      storage: diskStorage({\n        destination: './files',\n      }),\n      fileFilter: imageFileFilter,\n    }),\n  )\n  public async uploadMultipleFiles(@UploadedFiles() files: any) {\n    const response: any = [];\n    files.map((file :any) => {\n      const fileReponse = {\n        originalname: file.originalname,\n        filename: file.filename,\n      };\n      response.push(fileReponse);\n    });\n    return response;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadProcessController.html":{"url":"controllers/UploadProcessController.html","title":"controller - UploadProcessController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadProcessController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/controller/upload.controller.process.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/controller/upload.controller.process.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(req: any, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/upload')@ApiConsumes('multipart/form-data')@uploadFile('filename')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/controller/upload.controller.process.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException,\n  Controller, Post, Req, UploadedFile,\n  UploadedFiles, UseInterceptors, UsePipes, ValidationPipe } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiBody, ApiConsumes } from '@nestjs/swagger';\nimport { diskStorage } from 'multer';\nimport { imageFileFilter } from './file-helper';\nconst getStream = require('into-stream');\n\nexport const uploadFile = (fileName: string = 'file'): MethodDecorator => (\n  target: any,\n  propertyKey,\n  descriptor: PropertyDescriptor,\n) => {\n  ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        [fileName]: {\n          type: 'string',\n          format: 'binary',\n        },\n      },\n    },\n  })(target, propertyKey, descriptor);\n};\n\n@Controller('/api/v1')\n@UsePipes(\n  new ValidationPipe({\n    whitelist: true,\n    transform: true,\n  }),\n)\nexport class UploadProcessController {\n  @Post('/')\n  public async createUser() {\n    return 'Hello';\n  }\n\n  @Post('/upload')\n  @ApiConsumes('multipart/form-data')\n  @uploadFile('filename')\n  @UseInterceptors(\n    FileInterceptor('filename', {\n      fileFilter: imageFileFilter,\n    }),\n  )\n  public async uploadFile(@Req() req: any, @UploadedFile() file: Express.Multer.File) {\n     if (!file || req.fileValidationError) {\n       throw new BadRequestException('invalid file provided, [image files allowed]');\n     }\n     return file.originalname;\n     // azure upload i need stream of file \n     // s3 upload you just need file buffer \n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/services/upload.s3.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filesService: FilesS3Service)\n                    \n                \n                        \n                            \n                                Defined in nestjs-s3-azure-blob/src/app/domain/services/upload.s3.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesS3Service\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(imageBuffer: Buffer, fileName: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-s3-azure-blob/src/app/domain/services/upload.s3.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { uploadFile } from '../controller/upload.controller.process';\nimport { FilesS3Service } from './file.s3.service';\n\n@Injectable()\nexport class UploadService {\n  constructor(\n    private readonly filesService: FilesS3Service,\n  ) {}\n\n   async addAvatar(imageBuffer: Buffer, fileName: string){\n     return await this.filesService.uploadFile(imageBuffer, fileName);\n   }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/entities/user.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                posts\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Length(4, 20)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Length(4, 100)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:42\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNotEmpty, Length } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\nimport Comment from './comment';\nimport Post from './post';\n\n@Entity()\n@Unique(['email'])\nclass User {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  @Length(4, 20)\n  @IsNotEmpty()\n  public email!: string;\n\n  @Column()\n  @Length(4, 100)\n  @IsNotEmpty()\n  public password?: string;\n\n  @OneToMany(() => Post, post => post.user)\n  public posts!: Post[]\n\n  @OneToMany(() => Comment, comment => comment.user)\n  public comments!: Comment[]\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default User;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/users/user.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                gender\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, unique: true, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, values: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Table, Column, Model, DataType } from 'sequelize-typescript';\n\n@Table\nexport class User extends Model {\n    @Column({\n        type: DataType.STRING,\n        allowNull: false,\n    })\n    name: string;\n    @Column({\n        type: DataType.STRING,\n        unique: true,\n        allowNull: false,\n    })\n    email: string;\n    @Column({\n        type: DataType.STRING,\n        allowNull: false,\n    })\n    password: string;\n    @Column({\n        type: DataType.ENUM,\n        values: ['male', 'female'],\n        allowNull: false,\n    })\n    gender: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-2.html":{"url":"classes/User-2.html","title":"class - User-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/entities/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                createdAt\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    Public\n                                posts\n                            \n                            \n                                    Public\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comment => comment.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Length(4, 20)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Length(4, 100)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/entities/user.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, Length } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\nimport Comment from './comment';\nimport Post from './post';\n\n@Entity()\n@Unique(['email'])\nclass User {\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  @Column()\n  @Length(4, 20)\n  @IsNotEmpty()\n  public email!: string;\n\n  @Column()\n  @Length(4, 100)\n  @IsNotEmpty()\n  public password?: string;\n\n  @OneToMany(() => Post, post => post.user)\n  public posts!: Post[]\n\n  @OneToMany(() => Comment, comment => comment.user)\n  public comments!: Comment[]\n\n  @Column()\n  @CreateDateColumn()\n  public createdAt!: Date;\n\n  @Column()\n  @UpdateDateColumn()\n  public updatedAt!: Date;\n}\n\nexport default User;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(input: SignUp)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/users/user.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                SignUp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Get, Post, Delete, Param, Controller, Body } from '@nestjs/common';\nimport { Request } from 'express';\nimport { CommandBus } from '@nestjs/cqrs';\nimport { CreateUserCommand } from './commands/impl/create-user.command';\n\nexport class SignUp { \n    email: string;\n    username: string;\n    password: string;\n};\n\n@Controller('profiles')\nexport class UserController {\n    constructor(private readonly commandBus: CommandBus,\n    ) { }\n\n    @Post('signup')\n    public async signup(@Body('input') input: SignUp) {\n        try {\n            return await this.commandBus.execute(\n                new CreateUserCommand(input.username,\n                    input.email, input.password));\n        } catch (errors) {\n            console.log(\"Caught promise rejection (validation failed). Errors: \", errors);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController-1.html":{"url":"controllers/UserController-1.html","title":"controller - UserController-1","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /api/v1\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(req: Request, userDto: UserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('user')@ApiOkResponse({schema: undefined})\n                \n            \n\n            \n                \n                    Defined in nestjs-firebase-auth-authz/src/app/controllers/user.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, Get, HttpStatus, Post, Req, UnauthorizedException } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse, ApiBearerAuth, ApiOkResponse, ApiTags, ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { FirebaseAuthService } from '../services/firebase.service';\nimport * as CONSTANT from '../constants.api';\nimport { UserDTO } from '../dto/user.dto';\nimport * as admin from 'firebase-admin'\n\n@ApiTags('User')\n@Controller('/api/v1')\nexport class UserController {\n\n  constructor(private authService: FirebaseAuthService) { }\n\n  @Post('user')\n  @ApiOkResponse({ schema: { example: { isAuthenticate: true, status: 200 } } })\n  public async createUser(@Req() req: Request, @Body() userDto: UserDTO): Promise {\n     \n    const { displayName, password, email, role } = userDto;\n\n    try {\n      const {uid} = await admin.auth().createUser({\n        displayName,\n        password,\n        email\n      });\n      await admin.auth().setCustomUserClaims(uid, {role});\n      return {uid};\n    } catch (error) {\n      throw new UnauthorizedException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreatedEvent.html":{"url":"classes/UserCreatedEvent.html","title":"class - UserCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/events/impl/user-created.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userId: string)\n                    \n                \n                        \n                            \n                                Defined in nestjs-cqrs-demo/src/users/events/impl/user-created.event.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/events/impl/user-created.event.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserCreatedEvent {\n    constructor(\n        public readonly userId: string,\n    ) {}\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreatedHandler.html":{"url":"classes/UserCreatedHandler.html","title":"class - UserCreatedHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreatedHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/events/handlers/user-created.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IEventHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(event: UserCreatedEvent)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-cqrs-demo/src/users/events/handlers/user-created.handler.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                UserCreatedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventsHandler, IEventHandler } from \"@nestjs/cqrs\";\nimport { UserCreatedEvent } from \"../impl/user-created.event\";\n\n@EventsHandler(UserCreatedEvent)\nexport class UserCreatedHandler implements \n    IEventHandler {\n\n    handle(event: UserCreatedEvent) {\n        console.log('UserCreatedEvent...'\n            + event.userId );\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-firebase-auth-authz/src/app/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayName\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'displayName'})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-firebase-auth-authz/src/app/dto/user.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email'})@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-firebase-auth-authz/src/app/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'password'})@IsString()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-firebase-auth-authz/src/app/dto/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'role'})@IsString()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-firebase-auth-authz/src/app/dto/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, MinLength } from 'class-validator';\n\nexport class UserDTO {\n \n  @ApiProperty({ description: 'displayName'})\n  @IsString()\n  @MinLength(4)\n  displayName: string;\n\n  @ApiProperty({ description: 'email'})\n  @IsString()\n  @IsEmail()\n  email: string;\n\n   @ApiProperty({ description: 'password'})\n   @IsString()\n   @MinLength(8)\n   password: string;\n\n  @ApiProperty({ description: 'role'})\n  @IsString()\n  @MinLength(4)\n   role: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/users/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                gender\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/dto/user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEnum(Gender, {message: 'gender must be either male or female'})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/dto/user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/dto/user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-sequelize-apis/src/modules/users/dto/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength, IsEmail, IsEnum } from 'class-validator';\n\nenum Gender {\n    MALE = 'male',\n    FEMALE = 'female',\n}\n\nexport class UserDto {\n\n    @IsNotEmpty()\n    readonly name: string;\n\n    @IsNotEmpty()\n    @IsEmail()\n    readonly email: string;\n\n    @IsNotEmpty()\n    @MinLength(6)\n    readonly password: string;\n\n    @IsNotEmpty()\n    @IsEnum(Gender, {\n        message: 'gender must be either male or female',\n    })\n    readonly gender: Gender;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserParam.html":{"url":"classes/UserParam.html","title":"class - UserParam","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-s3-azure-blob/src/app/domain/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user id', required: true})@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-s3-azure-blob/src/app/domain/dto/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class UserParam {\n  @ApiProperty({description: 'user id', required: true})\n  @IsDefined()\n  @IsNotEmpty()\n  public id!: string;\n}\nexport class CreateUserDto {\n  @ApiProperty({description: 'email', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'username', required: true})\n  @IsString()\n  @MinLength(4)\n  public name!: string;\n\n  @ApiProperty({description: 'password', required: true})\n   @IsString()\n  @MinLength(4)\n  public password!: string;\n}\n \nexport default CreateUserDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserParam-1.html":{"url":"classes/UserParam-1.html","title":"class - UserParam-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserParam\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'user id', required: true})@IsDefined()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/dto/user.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsDefined, IsEmail, IsNotEmpty, IsString, MinLength } from 'class-validator';\n\nexport class UserParam {\n  @ApiProperty({description: 'user id', required: true})\n  @IsDefined()\n  @IsNotEmpty()\n  public id!: string;\n}\nexport class CreateUserDto {\n  @ApiProperty({description: 'email', required: true})\n  @IsEmail()\n  @MinLength(4)\n  public email!: string;\n\n  @ApiProperty({description: 'username', required: true})\n  @IsString()\n  @MinLength(4)\n  public name!: string;\n\n  @ApiProperty({description: 'password', required: true})\n   @IsString()\n  @MinLength(4)\n  public password!: string;\n}\n \nexport default CreateUserDto;\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/repositories/user.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { Users } from \"../users.entity\";\n\n\n@EntityRepository(Users)\nexport class UserRepository extends Repository {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                getByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Public\n                                sayHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository, testService: TestService)\n                    \n                \n                        \n                            \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        testService\n                                                  \n                                                        \n                                                                        TestService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sayHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    sayHello(email: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UserService.name)\n                    \n                \n                    \n                        \n                                Defined in nestjs-testing-unit-e2e/src/app/domain/services/user.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport CreateUserDto from '../dto/user.dto';\nimport User from '../entities/user';\nimport TestService from './test.service';\nconst bcrypt = require('bcrypt');\n\n@Injectable()\nexport default class UserService {\n  private readonly logger = new Logger(UserService.name);\n\n  constructor(\n    @InjectRepository(User) private userRepo: Repository,\n    private readonly testService: TestService) { }\n\n  public sayHello(email: string) {\n    return this.testService.sayHi(email);\n  }\n  public async getAllUsers() {\n    const users: User[] = await this.userRepo.find();\n    return users.map((user: any) => {\n        delete user.password;\n        return user;\n    }) ;\n  }\n  public async getByEmail(email: string) {\n    this.logger.log('getting user by email');\n    const user = await this.userRepo.findOne({ email });\n    if (!user) {\n      throw new HttpException('User with this email does not exist', HttpStatus.NOT_FOUND);\n    }\n    return user;\n  }\n  public async getById(id: string) {\n    const user = await this.userRepo.findOne(id);\n    if (!user) {\n      throw new HttpException('User with this id does not exist', HttpStatus.NOT_FOUND);\n    }\n    return user;\n  }\n  public async register(registrationData: CreateUserDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.userRepo.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      const user = await this.userRepo.save(createdUser)\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException('Something went wrong', HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Users.html":{"url":"entities/Users.html","title":"entity - Users","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/users.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                userId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {name: 'email', length: 145})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/users.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {name: 'password', length: 120})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/users.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Buffer\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('binary', {primary: true, name: 'userId', length: 16})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/users.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {name: 'username', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/users.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\n@Entity(\"users\", { schema: \"testdb\" })\nexport class Users {\n  @Column(\"binary\", { primary: true, name: \"userId\", length: 16 })\n  userId: Buffer;\n\n  @Column(\"varchar\", { name: \"username\", length: 100 })\n  username: string;\n\n  @Column(\"varchar\", { name: \"email\", length: 145 })\n  email: string;\n\n  @Column(\"varchar\", { name: \"password\", length: 120 })\n  password: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersSagas\n\nUsersSagas\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersSagas->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersSagas\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './repositories/user.repository';\nimport { CreateUserHandler } from './commands/handlers/create-user.handler';\nimport { UserCreatedEvent } from './events/impl/user-created.event';\nimport { UsersSagas } from './sagas/users.saga';\nimport { UserController } from './user.controller';\n\nexport const CommandHandlers = [CreateUserHandler];\nexport const QueryHandlers =  [];\nexport const EventHandlers = [UserCreatedEvent];\n@Module({\n    imports: [\n        CqrsModule,\n        TypeOrmModule.forFeature([UserRepository])\n    ],\n    controllers: [UserController],\n    providers: [\n        UserRepository,\n        ...CommandHandlers,\n        ...QueryHandlers,\n        ...EventHandlers, \n        UsersSagas\n    ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersSagas.html":{"url":"injectables/UsersSagas.html","title":"injectable - UsersSagas","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersSagas\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-cqrs-demo/src/users/sagas/users.saga.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userCreated\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in nestjs-cqrs-demo/src/users/sagas/users.saga.ts:8\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userCreated\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Saga()\n                        \n                    \n                \n                    \n                        \n                                Defined in nestjs-cqrs-demo/src/users/sagas/users.saga.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Saga, ICommand, ofType, CommandHandler } from \"@nestjs/cqrs\";\nimport { Observable } from \"rxjs\";\nimport { UserCreatedEvent } from \"../events/impl/user-created.event\";\nimport { delay, map } from \"rxjs/operators\";\n\n@Injectable()\nexport class UsersSagas {\n    constructor() {}\n\n    @Saga()\n    userCreated = (events$: Observable): Observable => {\n\n        return events$\n            .pipe(\n                ofType(UserCreatedEvent),\n                delay(1000),\n                map((event) => {\n                    console.log('Inside [UserSagas] Saga ' \n                    + 'for example send a email');\n                    return null;\n                }),\n            );\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository)\n                    \n                \n                        \n                            \n                                Defined in nestjs-sequelize-apis/src/modules/users/users.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/users/users.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/modules/users/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\n\nimport { User } from './user.entity';\nimport { UserDto } from './dto/user.dto';\nimport { USER_REPOSITORY } from '../../core/constants';\n\n@Injectable()\nexport class UsersService {\n    constructor(@Inject(USER_REPOSITORY) private readonly userRepository: typeof User) { }\n\n    async create(user: UserDto): Promise {\n        return await this.userRepository.create(user);\n    }\n\n    async findOneByEmail(email: string): Promise {\n        return await this.userRepository.findOne({ where: { email } });\n    }\n\n    async findOneById(id: number): Promise {\n        return await this.userRepository.findOne({ where: { id } });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateInputPipe.html":{"url":"injectables/ValidateInputPipe.html","title":"injectable - ValidateInputPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidateInputPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-sequelize-apis/src/core/pipes/validate.pipe.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ValidationPipe\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleError\n                            \n                            \n                                    Public\n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleError\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleError(errors)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/core/pipes/validate.pipe.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-sequelize-apis/src/core/pipes/validate.pipe.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ArgumentMetadata, BadRequestException, ValidationPipe, UnprocessableEntityException } from '@nestjs/common';\n\n@Injectable()\nexport class ValidateInputPipe extends ValidationPipe {\n    public async transform(value, metadata: ArgumentMetadata) {\n        try {\n            return await super.transform(value, metadata);\n        } catch (e) {\n            if (e instanceof BadRequestException) {\n                throw new UnprocessableEntityException(this.handleError(e.message));\n            }\n        }\n    }\n\n    private handleError(errors) {\n        return errors.map(error => error.constraints);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateObjectId.html":{"url":"injectables/ValidateObjectId.html","title":"injectable - ValidateObjectId","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidateObjectId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-with-mongoose/src/app/company/pipe/company.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-with-mongoose/src/app/company/pipe/company.pipe.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport * as mongoose from 'mongoose';\n\n@Injectable()\nexport class ValidateObjectId implements PipeTransform {\n    async transform(value: string, metadata: ArgumentMetadata) {\n        const isValid = mongoose.Types.ObjectId.isValid(value);\n        if (!isValid) { throw new BadRequestException('Invalid ID!'); }\n        return value;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Gender   (nestjs-sequelize-apis/.../user.dto.ts)\n                        \n                        \n                            LogLevel   (nestjs-authentication-authz/.../loglevel.ts)\n                        \n                        \n                            LogLevel   (nestjs-firebase-auth-authz/.../loglevel.ts)\n                        \n                        \n                            LogLevel   (nestjs-with-mongoose/.../loglevel.ts)\n                        \n                        \n                            Role   (nestjs-firebase-auth-authz/.../blog.controller.ts)\n                        \n                        \n                            Role   (nestjs-firebase-auth-authz/.../product.controller.ts)\n                        \n                        \n                            Role   (nestjs-with-mongoose/.../company.controller.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    nestjs-sequelize-apis/src/modules/users/dto/user.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n\n    nestjs-authentication-authz/src/logger/loglevel.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Indicates the severity of a log message.\n\n                        \n                    \n                        \n                            \n                                 Error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 Warn\n                            \n                        \n                        \n                            \n                                Value : warn\n                            \n                        \n                        \n                            \n                                 Info\n                            \n                        \n                        \n                            \n                                Value : info\n                            \n                        \n                        \n                            \n                                 HTTP\n                            \n                        \n                        \n                            \n                                Value : http\n                            \n                        \n                        \n                            \n                                 Verbose\n                            \n                        \n                        \n                            \n                                Value : verbose\n                            \n                        \n                        \n                            \n                                 Debug\n                            \n                        \n                        \n                            \n                                Value : debug\n                            \n                        \n                        \n                            \n                                 Silly\n                            \n                        \n                        \n                            \n                                Value : silly\n                            \n                        \n            \n        \n\n    nestjs-firebase-auth-authz/src/logger/loglevel.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Indicates the severity of a log message.\n\n                        \n                    \n                        \n                            \n                                 Error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 Warn\n                            \n                        \n                        \n                            \n                                Value : warn\n                            \n                        \n                        \n                            \n                                 Info\n                            \n                        \n                        \n                            \n                                Value : info\n                            \n                        \n                        \n                            \n                                 HTTP\n                            \n                        \n                        \n                            \n                                Value : http\n                            \n                        \n                        \n                            \n                                 Verbose\n                            \n                        \n                        \n                            \n                                Value : verbose\n                            \n                        \n                        \n                            \n                                 Debug\n                            \n                        \n                        \n                            \n                                Value : debug\n                            \n                        \n                        \n                            \n                                 Silly\n                            \n                        \n                        \n                            \n                                Value : silly\n                            \n                        \n            \n        \n\n    nestjs-with-mongoose/src/logger/loglevel.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Indicates the severity of a log message.\n\n                        \n                    \n                        \n                            \n                                 Error\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n                        \n                            \n                                 Warn\n                            \n                        \n                        \n                            \n                                Value : warn\n                            \n                        \n                        \n                            \n                                 Info\n                            \n                        \n                        \n                            \n                                Value : info\n                            \n                        \n                        \n                            \n                                 HTTP\n                            \n                        \n                        \n                            \n                                Value : http\n                            \n                        \n                        \n                            \n                                 Verbose\n                            \n                        \n                        \n                            \n                                Value : verbose\n                            \n                        \n                        \n                            \n                                 Debug\n                            \n                        \n                        \n                            \n                                Value : debug\n                            \n                        \n                        \n                            \n                                 Silly\n                            \n                        \n                        \n                            \n                                Value : silly\n                            \n                        \n            \n        \n\n    nestjs-firebase-auth-authz/src/app/controllers/blog.controller.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    nestjs-firebase-auth-authz/src/app/controllers/product.controller.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    nestjs-with-mongoose/src/app/company/controller/company.controller.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (nestjs-authentication-authz/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-cqrs-demo/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-firebase-auth-authz/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-postgres-elastic/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-s3-azure-blob/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-postgres-pagination/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-sequelize-apis/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-testing-unit-e2e/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-postgres-starter-/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-rabbitmq-microservice/.../main.ts)\n                        \n                        \n                            bootstrap   (nestjs-rabbitmq-microservice/.../main.ts)\n                        \n                        \n                            bootstrap   (simple-nestjs-microservice/.../main.ts)\n                        \n                        \n                            bootstrap   (simple-nestjs-microservice/.../main.ts)\n                        \n                        \n                            createDocument   (nestjs-authentication-authz/.../swagger.ts)\n                        \n                        \n                            createDocument   (nestjs-firebase-auth-authz/.../swagger.ts)\n                        \n                        \n                            createDocument   (nestjs-postgres-elastic/.../swagger.ts)\n                        \n                        \n                            createDocument   (nestjs-s3-azure-blob/.../swagger.ts)\n                        \n                        \n                            createDocument   (nestjs-postgres-pagination/.../swagger.ts)\n                        \n                        \n                            createDocument   (nestjs-with-mongoose/.../swagger.ts)\n                        \n                        \n                            createDocument   (nestjs-testing-unit-e2e/.../swagger.ts)\n                        \n                        \n                            createDocument   (nestjs-postgres-starter-/.../swagger.ts)\n                        \n                        \n                            createDocument   (typescript-nestjs/.../swagger.ts)\n                        \n                        \n                            isLogLevel   (nestjs-authentication-authz/.../loglevel.ts)\n                        \n                        \n                            isLogLevel   (nestjs-firebase-auth-authz/.../loglevel.ts)\n                        \n                        \n                            isLogLevel   (nestjs-with-mongoose/.../loglevel.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    nestjs-authentication-authz/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-cqrs-demo/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-firebase-auth-authz/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-postgres-elastic/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-s3-azure-blob/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-postgres-pagination/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-sequelize-apis/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-testing-unit-e2e/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-postgres-starter-/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-rabbitmq-microservice/microservice-client/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-rabbitmq-microservice/microservices-app/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    simple-nestjs-microservice/microservice-client/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    simple-nestjs-microservice/microservices-app/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    nestjs-authentication-authz/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-firebase-auth-authz/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-postgres-elastic/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-s3-azure-blob/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-postgres-pagination/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-with-mongoose/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-testing-unit-e2e/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-postgres-starter-/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    typescript-nestjs/src/swagger/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDocument\n                        \n                    \n                \n            \n            \n                \ncreateDocument(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n                    Creates an OpenAPI document for an application, via swagger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the nestjs application\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     OpenAPIObject\n\n                    \n                    \n                        the OpenAPI document\n\n                    \n                \n            \n        \n    \n    nestjs-authentication-authz/src/logger/loglevel.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isLogLevel\n                        \n                    \n                \n            \n            \n                \nisLogLevel(value)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the value is a valid log level or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the value to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        true if a log level, false if not\n\n                    \n                \n            \n        \n    \n    nestjs-firebase-auth-authz/src/logger/loglevel.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isLogLevel\n                        \n                    \n                \n            \n            \n                \nisLogLevel(value)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the value is a valid log level or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the value to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        true if a log level, false if not\n\n                    \n                \n            \n        \n    \n    nestjs-with-mongoose/src/logger/loglevel.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isLogLevel\n                        \n                    \n                \n            \n            \n                \nisLogLevel(value)\n                \n            \n\n\n\n\n            \n                \n                    Determines if the value is a valid log level or not.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the value to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        true if a log level, false if not\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNest JS Tutorials\nhttps://www.youtube.com/watch?v=8d75-sTi4UI&list=PLIGDNOJWiL1_AhUGgmwz7RhyXwX5aVLj4\n\n  \n\n\n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ cp env.example .env\ndocker-compose build\ndocker-compose up\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CompanyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DomainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DomainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DomainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DomainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DomainModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisCacheModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\ncluster_CompanyModule\n\n\n\ncluster_CompanyModule_providers\n\n\n\ncluster_DomainModule\n\n\n\ncluster_DomainModule_imports\n\n\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_exports\n\n\n\ncluster_LoggerModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_RedisCacheModule\n\n\n\ncluster_RedisCacheModule_exports\n\n\n\ncluster_RedisCacheModule_providers\n\n\n\ncluster_SearchModule\n\n\n\ncluster_SearchModule_exports\n\n\n\ncluster_SearchModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nConfigModule->LoggerModule\n\n\n\nLoggerModule -->\n\nConfigModule->LoggerModule\n\n\n\nLoggerModule -->\n\nConfigModule->LoggerModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nSearchModule -->\n\nConfigModule->SearchModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nFirebaseAuthService \n\nFirebaseAuthService \n\nFirebaseAuthService  -->\n\nAppModule->FirebaseAuthService \n\n\n\nFirebaseAuthService  -->\n\nAppModule->FirebaseAuthService \n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nCompanyModule\n\nCompanyModule\n\nCompanyModule -->\n\nDatabaseModule->CompanyModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\nAppModule -->\n\nAppService->AppModule\n\n\n\nAppModule -->\n\nAppService->AppModule\n\n\n\nAppModule -->\n\nAppService->AppModule\n\n\n\nAppModule -->\n\nAppService->AppModule\n\n\n\nAppModule -->\n\nCompanyModule->AppModule\n\n\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\nCompanyModule -->\n\nLoggerModule->CompanyModule\n\n\n\n\n\nLogger \n\nLogger \n\nLogger  -->\n\nLoggerModule->Logger \n\n\n\nLogger  -->\n\nLoggerModule->Logger \n\n\n\nLogger  -->\n\nLoggerModule->Logger \n\n\n\n\n\nCatsModule\n\nCatsModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nFirebaseAuthService\n\nFirebaseAuthService\n\nAppModule -->\n\nFirebaseAuthService->AppModule\n\n\n\nAppModule -->\n\nFirebaseAuthService->AppModule\n\n\n\n\n\nDomainModule\n\nDomainModule\n\nAppModule -->\n\nDomainModule->AppModule\n\n\n\nAppModule -->\n\nDomainModule->AppModule\n\n\n\nAppModule -->\n\nDomainModule->AppModule\n\n\n\nAppModule -->\n\nDomainModule->AppModule\n\n\n\nAppModule -->\n\nDomainModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCatsService\n\nCatsService\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\nCompanyService\n\nCompanyService\n\nCompanyModule -->\n\nCompanyService->CompanyModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nDomainModule -->\n\nDbModule->DomainModule\n\n\n\nDomainModule -->\n\nDbModule->DomainModule\n\n\n\nDomainModule -->\n\nDbModule->DomainModule\n\n\n\nDomainModule -->\n\nDbModule->DomainModule\n\n\n\n\n\nRedisCacheModule\n\nRedisCacheModule\n\nDomainModule -->\n\nRedisCacheModule->DomainModule\n\n\n\n\n\nRedisCacheModule \n\nRedisCacheModule \n\nRedisCacheModule  -->\n\nRedisCacheModule->RedisCacheModule \n\n\n\n\n\nRedisCacheService \n\nRedisCacheService \n\nRedisCacheService  -->\n\nRedisCacheModule->RedisCacheService \n\n\n\nDomainModule -->\n\nSearchModule->DomainModule\n\n\n\n\n\nSearchService \n\nSearchService \n\nSearchService  -->\n\nSearchModule->SearchService \n\n\n\n\n\nLogger\n\nLogger\n\nLoggerModule -->\n\nLogger->LoggerModule\n\n\n\nLoggerModule -->\n\nLogger->LoggerModule\n\n\n\nLoggerModule -->\n\nLogger->LoggerModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nRedisCacheService\n\nRedisCacheService\n\nRedisCacheModule -->\n\nRedisCacheService->RedisCacheModule\n\n\n\n\n\nSearchService\n\nSearchService\n\nSearchModule -->\n\nSearchService->SearchModule\n\n\n\n\n\nUsersSagas\n\nUsersSagas\n\nUsersModule -->\n\nUsersSagas->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        41 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    35 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    50 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    62 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    30 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CompanyDocument   (nestjs-with-mongoose/.../company.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    nestjs-with-mongoose/src/app/company/model/company.ts\n    \n    \n        \n            \n                \n                    \n                    CompanyDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/user1616304930711.html":{"url":"classes/user1616304930711.html","title":"class - user1616304930711","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  user1616304930711\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            nestjs-testing-unit-e2e/src/migrations/1616304930711-user.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/migrations/1616304930711-user.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in nestjs-testing-unit-e2e/src/migrations/1616304930711-user.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class user1616304930711 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n      await queryRunner.query(\n        `CREATE TABLE \"user\" (\n          id SERIAL PRIMARY KEY,\n          email character varying NOT NULL UNIQUE,\n          password character varying NOT NULL,\n          \"createdAt\" timestamp without time zone NOT NULL DEFAULT now(),\n          \"updatedAt\" timestamp without time zone NOT NULL DEFAULT now()\n      );`\n      )\n      await queryRunner.query(\n        `CREATE UNIQUE INDEX \"PK_cace4a159ff9f2512dd42373760\" ON \"user\"(id int4_ops);\n         CREATE UNIQUE INDEX \"UQ_78a916df40e02a9deb1c4b75edb\" ON \"user\"(email text_ops);`\n      )\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n      await queryRunner.query(`DROP table user`);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
